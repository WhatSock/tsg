<!DOCTYPE html>
<html lang="en">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <title>AccDC Technical Style Guide</title>
    <meta name="Author" content="Bryan Garaventa" />
    <link rel="stylesheet" type="text/css" href="_doc_files/css/global.css" />
    <link rel="stylesheet" type="text/css" href="_doc_files/css/shCore.css" />
    <link rel="stylesheet" type="text/css" href="_doc_files/css/shThemeDefault.css" />
    <link rel="stylesheet" type="text/css" href="_doc_files/css/simple_web_buttons.css" />
    <script type="text/javascript" src="1 AccDC API/Standalone/Acc.DC.API.js"></script>
    <script type="text/javascript" src="2 Accessible Component Modules/aria_toggler.min.js"></script>
    <script type="text/javascript" src="_doc_files/js/shCore.js"></script>
    <script type="text/javascript" src="_doc_files/js/shBrushXml.js"></script>
    <script type="text/javascript" src="_doc_files/js/shBrushJScript.js"></script>
    <script type="text/javascript" src="_doc_files/js/shBrushCss.js"></script>
    <script type="text/javascript" src="_doc_files/js/setup.js"></script>
</head>

<body>
    <div id="container">

        <header>
            <h1 tabindex="-1"><strong>AccDC</strong> Technical Style Guide</h1>
            <p class="baseline version"><span id="AccDCCurrentVerS1"></span><span id="AccDCCurrentVerS2"></span></p>
            <p class="logo">
                <a href="http://whatsock.com"><img alt="WhatSock : Changing the world one step at a time" src="_doc_files/img/whatsock.svg" /></a></p>

            <nav>
                <h2>Main navigation <a id="skipLink" href="#wrapper">(Jump to main content)</a></h2>
                <ul class="menuList" id="skipLinks">
                </ul>
            </nav>
        </header>

        <div id="wrapper">


            <!-- <div role="navigation" aria-label="top" class="cb tac heading" id="skipLinks">
            </div>-->

            <main id="pgContent">

                <article>
                    <h2>Introduction</h2>
                    <div class="intro">
                        <p>The AccDC Technical Style Guide is designed to provide reliable and consistent interaction
                            designs that are accessible to the highest percentage of people possible, and to establish a
                            baseline for Functional Accessibility that can be utilized, built upon, studied, and tested against.</p>
                    </div>

                    <div class="intro">
                        <p> Functional Accessibility means that each component is fully accessible from the keyboard, with or without a screen reader running.</p>
                        <p> AccDC Technical Style Guide Mirrors:</p>
                        <ul>
                            <li> <a href="http://whatsock.com/tsg/">Powered by jQuery</a></li>
                            <li> <a href="http://whatsock.com/tsg/dojo/">Powered by Dojo</a></li>
                            <li> <a href="http://whatsock.com/tsg/mootools/">Powered by MooTools</a></li>
                        </ul>
                        <p> Please address any direct questions to <a id="mlto" href="#" target="_blank">Bryan Garaventa</a>, or to the <a href="http://www.linkedin.com/groups/Accessible-Innovators-4512178" target="_blank">Accessible Innovators Group</a> for community support.</p>
                    </div>

                    <div id="hd1" class="hd" tabindex="-1">
                        <h2><span id="h-1">AccDC API</span></h2>
                    </div>
                    <div class="expand-collapse">
                        <p><button aria-labelledby="h-1 col-1-lbl" id="col-1"><span id="col-1-lbl"> Collapse All</span></button>
                            <button aria-labelledby="h-1 exp-1-lbl" id="exp-1"><span id="exp-1-lbl"> Expand All</span></button>
                        </p>
                    </div>

                    <div class="AccDC downloads">
                        <div class="panel">
                            <h3 class="control"><button id="tgl-1-0">Downloads</button></h3>
                            <ul class="hdn content">
                                <li><strong>Browse All</strong>
                                    <a target="custom" href="https://github.com/whatsock/">WhatSock Projects on GitHub</a>
                                </li>
                                <li><strong>The AccDC API (Standalone)</strong>
                                    [ <a target="custom" href="https://github.com/whatsock/accdc">GitHub</a> |
                                    <a target="custom" href="https://github.com/whatsock/accdc/archive/master.zip">Zip</a> ]
                                </li>
                                <li><strong>The AccDC API (for jQuery)</strong>
                                    [ <a target="custom" href="https://github.com/whatsock/accdc-jquery">GitHub</a> |
                                    <a target="custom" href="https://github.com/whatsock/accdc-jquery/archive/master.zip">Zip</a> ]
                                </li>
                                <li><strong>The AccDC API (for Dojo)</strong>
                                    [ <a target="custom" href="https://github.com/whatsock/accdc-dojo">GitHub</a> |
                                    <a target="custom" href="https://github.com/whatsock/accdc-dojo/archive/master.zip">Zip</a> ]
                                </li>
                                <li><strong>The AccDC API (for MooTools)</strong>
                                    [ <a target="custom" href="https://github.com/whatsock/accdc-mootools">GitHub</a> |
                                    <a target="custom" href="https://github.com/whatsock/accdc-mootools/archive/master.zip">Zip</a> ]
                                </li>
                                <li><strong>AccDC Bootstrap (Standalone)</strong>
                                    [ <a target="custom" href="https://github.com/whatsock/bootstrap">GitHub</a> |
                                    <a target="custom" href="https://github.com/whatsock/bootstrap/archive/master.zip">Zip</a> ]
                                </li>
                                <li><strong>AccDC Bootstrap (for jQuery)</strong>
                                    [ <a target="custom" href="https://github.com/whatsock/bootstrap-jquery">GitHub</a> |
                                    <a target="custom" href="https://github.com/whatsock/bootstrap-jquery/archive/master.zip">Zip</a> ]
                                </li>
                                <li><strong>AccDC Bootstrap (for Dojo)</strong>
                                    [ <a target="custom" href="https://github.com/whatsock/bootstrap-dojo">GitHub</a> |
                                    <a target="custom" href="https://github.com/whatsock/bootstrap-dojo/archive/master.zip">Zip</a> ]
                                </li>
                                <li><strong>AccDC Bootstrap (for MooTools)</strong>
                                    [ <a target="custom" href="https://github.com/whatsock/bootstrap-mootools">GitHub</a> |
                                    <a target="custom" href="https://github.com/whatsock/bootstrap-mootools/archive/master.zip">Zip</a> ]
                                </li>
                                <li><strong>The AccDC Technical Style Guide and Coding Arena (for AccDC Standalone and jQuery)</strong>
                                    [ <a target="custom" href="https://github.com/whatsock/tsg">GitHub</a> |
                                    <a target="custom" href="https://github.com/whatsock/tsg/archive/master.zip">Zip</a> ]
                                </li>
                                <li><strong>The AccDC Technical Style Guide and Coding Arena (for Dojo)</strong>
                                    [ <a target="custom" href="https://github.com/whatsock/tsg-dojo">GitHub</a> |
                                    <a target="custom" href="https://github.com/whatsock/tsg-dojo/archive/master.zip">Zip</a> ]
                                </li>
                                <li><strong>The AccDC Technical Style Guide and Coding Arena (for MooTools)</strong>
                                    [ <a target="custom" href="https://github.com/whatsock/tsg-mootools">GitHub</a> |
                                    <a target="custom" href="https://github.com/whatsock/tsg-mootools/archive/master.zip">Zip</a> ]
                                </li>
                            </ul>
                        </div>

                        <div class="panel">
                            <h3 class="control"><button id="tgl-1-1">AccDC Details</button></h3>
                            <div class="content hdn">
                                <p> AccDC is a JavaScript based Application Programming Interface (API) that can be used with other
                                    libraries and frameworks, or by itself, to create new or enhance pre-existing web technologies with accessible features.</p>
                                <p> This is accomplished by utilizing the AccDC API properties and methods, and by leveraging the
                                    features that are available within all instantiated AccDC Objects.</p>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control"><button id="tgl-1-2">AccDC Objects</button></h3>
                            <div class="content hdn">
                                <p> The primary purpose of the AccDC API, is to recursively process AccDC Objects, which are rendered as encapsulated dynamic content components.</p>
                                <p> The majority of AccDC API properties and methods are prototyped within every AccDC Object, making every
                                    AccDC Object fully autonomous and programmatically configurable using JavaScript.</p>
                                <p> This is how AccDC Objects can dynamically control the behaviors of other AccDC Objects at runtime.</p>
                                <p> An AccDC Object is literally an instantiated JavaScript Object, which stores all relevant data and AccDC API properties and methods within it.</p>
                                <p> The shell construct of an AccDC Object declaration is as follows:</p>

                                <pre class="brush: js;">
var myObjArray = [
{id: 'uniqueObjectId', role: 'Object Role Name'
// Other AccDC API property and method declarations go here...
}];
</pre>
                                <p> The array of AccDC Object declarations is passed as a parameter to the <code>$A()</code> function, which instantiates them as registered AccDC Objects.</p>
                                <pre class="brush: js;">
$A(myObjArray);
</pre>
                                <p> All instantiated AccDC Objects are then registered within the <code>$A.reg</code> associative array, which can be queried
                                    directly using the ID of each AccDC Object in order to reference, configure, and control specific objects using JavaScript.</p>
                                <p><strong> Example:</strong></p>
                                <pre class="brush: js;">
var dc = $A.reg['uniqueObjectId'];
</pre>
                                <p> <strong>Or</strong></p>
                                <pre class="brush: js;">
var dc = $A.reg.uniqueObjectId;
</pre>
                                <p> An instantiated AccDC Object can then be programmatically configured by modifying or invoking properties and methods within the object instance.</p>
                                <p> <strong>Examples</strong>:</p>
                                <pre class="brush: js;">
// Set literal content to be rendered

dc.source = 'Hello World';

// Set the body as the container insertion point

dc.isStatic = 'body';

// Prepend the rendered content to the body content instead of replacing

dc.prepend = true;

// Set a top level class name for the newly rendered container Div  element

dc.className = 'banner';

dc.runAfter = function(dc){
// Do something after the content finishes loading
};

// Render the new content

dc.open();
</pre>
                                <p> Alternatively, all of the above property and method declarations can be included within the object
                                    literal declaration, before the object array is passed to the <code>$A()</code> function. </p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: js;">
var myObjArray = [
{
	id: 'uniqueObjectId',
	role: 'Object Role Name',
	source: 'Hello World',
	isStatic: 'body',
	prepend: true,
	className: 'banner',
	runAfter: function(dc){
// Do something after the content finishes loading
},
runAfterClose: function(dc){
// Do something after the content finishes closing
},
// Render the object immediately
autoStart: true,
// Automatically announce the rendered textual content for screen reader users
announce: true
}];

// Then register the object array

$A(myObjArray);
</pre>
                                <p> All AccDC API properties and methods are applicable to AccDC Objects, and are confined within the scope of that object.</p>
                                <p> To learn about sibling and global overrides for AccDC Objects, view the details about the <code>$A()</code> function within the AccDC Core API documentation.</p>
                                <p> AccDC Objects can also be used to store specific data that relates only to that object, which can then be accessed by other AccDC Objects.</p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: js;">
// Save data within one AccDC Object

dc.tmp = {form: formElement};

// Then access the data from another AccDC Object or process

var dataString = serialize( $A.reg.uniqueObjectId.tmp.form.elements );
</pre>
                                <p> All data stored within an AccDC Object remains within the object, even after the <code>close()</code> method is used to close the object and remove its content from the DOM. </p>
                                <p> Only the <code>$A()</code> method will completely destroy an AccDC Object and all of its stored data.</p>
                                <p> All of the Accessible Component Modules tap into this functionality by interfacing with the AccDC API.</p>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control"><button id="tgl-1-3">Debugging Mode</button></h3>
                            <div class="content hdn">
                                <p> If, for some reason an AccDC Object is not rendering properly when the <code>open()</code> method is invoked, Debugging Mode can be used to diagnose the cause of the issue.</p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: js;">
// Enable Debugging Mode

$A.fn.debug = true;
</pre>
                                <p> When set to true, this will throw an alert with specific instructions if the issue is caused by a lack of or improper combination of AccDC API properties.</p>
                                <p> Debugging Mode is set to false by default.</p>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control"><button id="tgl-1-4">Loading AccDC</button></h3>
                            <div class="content hdn">
                                <p> Currently there are four versions of the AccDC API available:</p>
                                <ol>
                                    <li> The Standalone version, which requires no third party dependencies and is compatible with all JavaScript libraries and frameworks without conflict.</li>
                                    <li> The jQuery extension, which requires jQuery 1.8.3 or greater.</li>
                                    <li> The Dojo module, which uses the Dojo AMD Loader.</li>
                                    <li> The MooTools extension, which requires MooTools 1.4.5 or greater.</li>
                                </ol>
                                <p> Since all Accessible Component Modules plug into the AccDC API, the same module code will work correctly in all AccDC API versions equally.</p>
                                <p> <strong>Example using the Standalone, jQuery, or MooTools AccDC versions:</strong></p>
                                <pre class="brush: html;">
&lt;head>

&lt;!-- If using the AccDC jQuery or MooTools extension, load jQuery or MooTools here first. -->

&lt;script type="text/javascript" src="Acc.DC.API.js">
// Load AccDC, which will create the $A namespace
&lt;/script>

&lt;script type="text/javascript" src="module_name.js">
// Load as many of the Accessible Component Modules as desired,
// which will add them to the $A namespace.
&lt;/script>

&lt;script type="text/javascript" src="setup.js">
// Then load the setup script to invoke module functionality after the page finishes loading.
&lt;/script>

&lt;/head>
</pre>
                                <p> <strong>Example using Dojo:</strong></p>
                                <pre class="brush: html;">
&lt;head>

&lt;script type="text/javascript" src="dojo/dojo.js" data-dojo-config="async:true">
// Load Dojo asynchronously.
&lt;/script>

&lt;script type="text/javascript">

// Configure AccDC modules and scripts to be loaded synchronously for flow control
InitAccDC = [
	'module1.js',
	'module2.js'
];

// Now load the AccDC API using the Dojo AMD Loader
// The referenced AccDC API file is located at dojo/acc.dc.api.js
require(['dojo/acc.dc.api']);

&lt;/script>

&lt;/head>
</pre>
                                <p> This will set up AccDC, and load all of the declared modules into the <code>$A</code> namespace, ready for use within your web application.</p>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control"><button id="tgl-1-5">AccDC Bootstrap</button></h3>
                            <div class="content hdn">
                                <p> If the AccDC Bootstrap module is also loaded, then there is no need to include a setup script.</p>
                                <p> All configurations are controlled through HTML5 attributes within the markup and by editing the <em>"accdc_bootstrap.js"</em> file as desired to customize functionality.</p>
                                <p> When the Bootstrap Module is executed, it parses the newly loaded DOM, recognizes class names that correspond with
                                    specific Accessible Component Modules, then configures and invokes the specified module using HTML5 attributes within the markup to customize both output and behavior.</p>
                                <p> Bootstrapping is designed to handle common control types that span multiple pages with similar setup configurations.</p>
                                <p> To enable this functionality, simply load the AccDC Bootstrap module after all of the desired Accessible Component Modules have been loaded.</p>
                                <p> <strong>Example using the Standalone, jQuery, or MooTools AccDC API versions:</strong></p>
                                <pre class="brush: html;">
&lt;head>

&lt;!-- If using the AccDC jQuery or MooTools extension, load jQuery or MooTools here first. -->

&lt;script type="text/javascript" src="Acc.DC.API.js">
// Load AccDC, which will create the $A namespace
&lt;/script>

&lt;script type="text/javascript" src="module_name.js">
// Load as many of the Accessible Component Modules as desired,
// which will add them to the $A namespace.
&lt;/script>

&lt;script type="text/javascript" src="accdc_bootstrap.js">
// Then load AccDC Bootstrap to parse the DOM automatically
&lt;/script>

&lt;/head>
</pre>
                                <p> <strong>Example using Dojo:</strong></p>
                                <pre class="brush: html;">
&lt;head>

&lt;script type="text/javascript" src="dojo/dojo.js" data-dojo-config="async:true">
// Load Dojo asynchronously.
&lt;/script>

&lt;script type="text/javascript">

// Configure AccDC modules and scripts to be loaded synchronously for flow control
InitAccDC = [
'module1.js',
'module2.js',
// Then load AccDC Bootstrap to parse the DOM automatically
'accdc_bootstrap.js'
];

// Now load the AccDC API using the Dojo AMD Loader
// The referenced AccDC API file is located at dojo/acc.dc.api.js
require(['dojo/acc.dc.api']);

&lt;/script>

&lt;/head>
</pre>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control"><button id="tgl-1-6">Offscreen Text</button></h3>
                            <div class="content hdn">
                                <p> Some modules refer to offscreen text, which can be used to provide textual information for screen reader users that is not displayed visually and has no impact on visual layout.</p>
                                <p> The following CSS class has been proven to work well for this purpose, which is the same that is built into AccDC as the <em>"$A.sraCSS"</em> object.</p>
                                <pre class="brush: css;">
.offscreenText {
position: absolute;
clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
clip: rect(1px, 1px, 1px, 1px);
clip-path: inset(50%);
padding: 0;
border: 0;
height: 1px; 
width: 1px; 
overflow: hidden;
white-space: nowrap;
}
</pre>
                                <p> This styling configuration is based on the research done by Thierry Koblentz, which is more fully described at
                                    <br />
                                    <a href="https://developer.yahoo.com/blogs/tenydnblog/clip-hidden-content-better-accessibility-53456.html" target="_blank"> https://developer.yahoo.com/blogs/tenydnblog/clip-hidden-content-better-accessibility-53456.html</a>
                                </p>
                            </div>
                        </div>
                    </div> <!-- /ARIA -->

                    <div id="hd2" class="hd" tabindex="-1">
                        <h2><span id="h-2">Accessible Component Modules</span></h2>
                    </div>
                    <div class="intro important">
                        <p> <strong>IMPORTANT:</strong> All of the HTML markup syntax examples found within the expandable Accessible Component Module sections represent the minimal code necessary for using the associated JavaScript module included with the AccDC API, though the actual markup is flexible when implemented.</p>
                        <p> Since the associated JavaScript module handles key attributes such as tabindex, amongst relevant ARIA state and property attributes, these are not included within the HTML markup syntax examples, since assigning these manually would complicate the scripting setup process for each module.</p>
                        <p> To see how tabindex and relevant ARIA attributes are handled, use a DOM viewer utility to examine the rendered output of each live demo within the Coding Arena, where dynamic behaviors can be observed.</p>
                    </div>
                    <div class="expand-collapse">
                        <p><button aria-labelledby="h-2 col-2-lbl" id="col-2"><span id="col-2-lbl"> Collapse All</span></button>
                            <button aria-labelledby="h-2 exp-2-lbl" id="exp-2"><span id="exp-2-lbl"> Expand All</span></button></p>
                    </div>
                    <div class="Modules">
                        <div class="panel">
                            <h3 class="control" ><button id="accordions">Accordions</button></h3>
                            <div class="content hdn">
                                <p> Accordions are a fairly simple control type that are easy to make accessible.</p>
                                <p> Though similar in both concept and execution to Tab Controls, they are not the same.</p>
                                <p> A Tab Control has a series of grouped triggering elements that expand and collapse, the rendered content
                                    of which is inserted directly after the triggering element group when opened.
                                    The container element insertion point for all Tab Control triggering elements is shared between them.
                                    Also, the group of triggering elements in a Tab Control has only one tab stop. The arrow keys are then used
                                    to switch focus between each Tab, and the <kbd>Enter</kbd> or <kbd>Space</kbd> key is used to expand the desired Tab content panel.</p>
                                <p> In contrast, an Accordion has a series of triggering elements that expand and collapse, the rendered content
                                    of which is inserted directly after the triggering element when opened.
                                    The container element insertion points for Accordions are not shared.
                                    Also, all Accordion links appear in the tab order.
                                    The reason why ARIA attributes such as <code>role="tablist"</code> and <code>role="tab"</code> are not included within accordions, is
                                    because the insertion of inline content would place dynamic content sections within the same Tablist container,
                                    making it impossible to determine the order of nested Tab controls when present within the inserted content.</p>
                                <p> The chosen implementation should always match the UI that it's being applied to, to prevent confusion.</p>
                                <p> The Accordion Module automates these processes by adding all related event handlers and managing all related rendering procedures.</p>
                                <ul>
                                    <li> Accordion with offscreen text to indicate role and state, <code>aria-controls</code>, <code>role=region</code>, and <code>aria-labelledby</code>:
                                        <a target="ca" href="Coding Arena/ARIA and Non-ARIA Accordions/Accordion (Internal Content)/demo.htm">Demo</a>
                                    </li>
                                    <li> Accordion with ARIA <code>role=button</code>, <code>aria-pressed</code>, <code>aria-controls</code>, <code>role=region</code>, and <code>aria-labelledby</code>:
                                        <a target="ca" href="Coding Arena/ARIA and Non-ARIA Accordions/ARIA Accordion (Internal Content)/demo.htm">Demo</a>
                                    </li>
                                    <li> Accordion with ARIA <code>role=link</code>, <code>aria-expanded</code>, <code>aria-controls</code>, <code>role=region</code>, and <code>aria-labelledby</code>:
                                        <a target="ca" href="Coding Arena/ARIA and Non-ARIA Accordions/ARIA Accordion (Internal Content)/demo2.htm">Demo</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <p> <strong>Referencing external content:</strong></p>
                                <pre class="brush: html;">
&lt;div class="accordionGroup">
&lt;a href="#" class="accAccordion" data-src="files/accordions.html#containerId1" data-insert="sectId1" data-defaultopen="true"  id="accordionId1">
Triggering Element One Name
&lt;/a>
&lt;div id="sectId1">&lt;!--
(accordionId1 content will be inserted here when opened)
-->&lt;/div>
&lt;a href="#" class="accAccordion" data-src="files/accordions.html#containerId2" data-insert="sectId2" id="accordionId2">
Triggering Element Two Name
&lt;/a>
&lt;div id="sectId2">&lt;!--
(accordionId2 content will be inserted here when opened)
-->&lt;/div>
&lt;/div>
</pre>
                                <p> <strong>Or referencing internal content:</strong></p>
                                <pre class="brush: html;">
&lt;div class="accordionGroup2">
&lt;a href="#" class="accAccordion" data-internal="containerId1" data-insert="x-sectId1" data-defaultopen="true"  id="x-accordionId1">
Triggering Element One Name
&lt;/a>
&lt;div id="x-sectId1">&lt;!--
(x-accordionId1 content will be inserted here when opened)
-->&lt;/div>
&lt;a href="#" class="accAccordion" data-internal="containerId2" data-insert="x-sectId2" id="x-accordionId2">
Triggering Element Two Name
&lt;/a>
&lt;div id="x-sectId2">&lt;!--
(x-accordionId2 content will be inserted here when opened)
-->&lt;/div>
&lt;/div>
</pre>
                                <p> HTML5 <code><code>"data-"</code></code> attributes are used to configure specific functionality for each accordion expand/collapse link. These include the following:</p>
                                <ul>
                                    <li> <strong>data-src</strong> : The resource path and pointer to the ID attribute of the accordion content container element.
                                        If set, data-internal should be blank or not included. </li>
                                    <li> <strong>data-internal</strong> : The ID attribute of the accordion content container element within the same document.
                                        If data-internal is set, data-src should be blank or not included. </li>
                                    <li> <strong>data-insert</strong> : The ID attribute of the container element where the accordion content will be inserted when rendered. (This must not be inside the triggering element)</li>
                                    <li> <strong>data-defaultopen="true"</strong> : Specifies that the referenced accordion node will open automatically. Only one accordion node per group should include this
                                        attribute. </li>
                                </ul>
                                <p> <strong>Required attributes:</strong></p>
                                <ul>
                                    <li> All accordion triggering elements must include unique ID attribute values.</li>
                                </ul>
                                <p> <strong>Important:</strong> The insertion point where accordion content is rendered must be inline with (meaning directly after) the triggering element, to ensure accessibility for screen reader and keyboard only users. (No other active elements or page content should separate them.)</p>
                                <p> The examples above use DIV tags as container elements, but it doesn't really matter what the container element is, as long as the IDs match up. For instance, the interactive samples in the Coding Arena use DL tags as the main container, DTs to hold the triggering element, and DDs to act as the insertion points, which works well and is easy to format.</p>
                                <p> <strong>Container Element HTML Syntax</strong></p>
                                <pre class="brush: html;">
&lt;div id="containerId1">
Accordion panel 1 content goes here.
&lt;/div>

&lt;div id="containerId2">
Accordion panel 2 content goes here.
&lt;/div>
</pre>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
$A.generateAccordion( 'div.accordionGroup a.accAccordion' , {
// Configuration key / value mappings
}, document , callbackFunction(dc){
// Run every time an accordion expand/collapse link is toggled
// 'dc' is the registered Accordion AccDC Object
// dc.triggerObj is the triggering element
// dc.containerDiv is the DOM node where all accordion panel content is rendered
// dc.loaded reflects whether the accordion panel is currently open
} );
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter is a CSS Selector that specifies all accordion expand/collapse links
                                            that are part of the same accordion group.</p>
                                        <p> If multiple accordions are present on the same page,
                                            each accordion should be declared separately using the above statement, and the CSS Selector should
                                            only reference the expand/collapse node links that apply to that particular accordion, and to no other.</p>
                                        <p> The reason for this is simple. When an accordion is active, it will close all open accordion nodes when an
                                            expand link is activated. So if you don't want all of the nodes of every other accordion on the page to be closed
                                            at the same time as well, then you should separate them using unique CSS Selectors for each group.</p>
                                    </li>
                                    <li>
                                        <p> The second parameter is used to configure accordion functionality using key / value map overrides.</p>
                                        <p> <strong>Example:</strong></p>
                                        <pre class="brush: js;">
{

// Set the hidden text role and state that will be added to the triggering element for screen reader users
accordionRole: 'Accordion',
accordionState: 'Expanded',

// Set the accordion AccDC Object to render literal content
// (only when pulling content from within the same page, remove otherwise)
mode: 0,

// Preload HTML markup to speed rendering
// (only when pulling content from an external page, remove otherwise)
preload: true,

// Preload images to speed rendering
// (only when pulling content from an external page, remove otherwise)
preloadImages: true,

// Set the class name that will be added to the triggering element of the currently open accordion
toggleClass: 'open',

// Choose whether or not to make accordion expand/collapse links toggles as well
isToggle: false

// Additional AccDC API properties and methods may be applied here as well if desired.

}
</pre>
                                    </li>
                                    <li>
                                        <p> The third parameter (<code>contextDOM_Node</code>) specifies the container DOM node where the accordion is contained,
                                            which confines the CSS Selector to the contents of this node.
                                            This can also be used to reference accordion groups contained within iFrame documents.</p>
                                    </li>
                                    <li>
                                        <p> The fourth parameter is a callback function that can be used to configure additional functionality
                                            whenever an accordion is opened or closed.</p>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> Every accordion node is registered as an AccDC Object, the ID of which matches the ID attribute value on
                                    the accordion expand/collapse link. For this reason, all accordion expand/collapse links must have unique ID attribute values.</p>
                                <p> This means that you can programmatically control each accordion node using JavaScript if desired, like so:</p>
                                <pre class="brush: js;">
// Get a reference to the accordion AccDC Object for the accordion expand/collapse link with id="uniqueId"
var dc = $A.reg['uniqueId'];

// Now invoke the object
dc.open();

// Or close it
dc.close();

// All other AccDC API properties and methods can be applied here as well.
</pre>
                                <div class="hd">
                                    <h4><span> Triggering Element Requirements</span></h4>
                                </div>
                                <p> Regarding the triggering element for expand/collapse links, you should always use an active element
                                    for this purpose to ensure accessibility for both screen reader and keyboard only users.</p>
                                <p> Within the Coding Arena samples, these are standard links (A tags with an Href attribute), which includes
                                    a SPAN tag with a changeable background image. However, you can use whatever type of triggering element you wish,
                                    a standard link, button, or image link, with any type of styling. There must be an active element as a triggering
                                    element though, to ensure accessibility.</p>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample accordions in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually
                                    matter what they look like. This is demonstrated within the "Shell" folders, where there is no CSS styling for the
                                    accordion. This is also useful as a practice template for trying out different styling designs with custom content.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a
                                    focus outline clearly shows which elements have focus, and your newly styled accordion will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Bootstrapping</span></h4>
                                </div>
                                <p> Bootstrapping is designed to handle common control types that span multiple pages with similar setup configurations.</p>
                                <p> The accordions within the Bootstrap folders are configured using HTML5 <code><code>"data-"</code></code> attributes within the HTML markup.</p>
                                <p> When the Bootstrap Module (<em>"accdc_bootstrap.js"</em>) is executed, it parses the newly loaded DOM, recognizes the
                                    class <code>"accAccordion"</code>, then configures the same module declaration as previously described using these HTML5 attributes.</p>
                                <p> <strong>Available HTML5 attributes for the triggering element:</strong></p>
                                <ul>
                                    <li> <strong>data-src</strong> : The resource path and pointer to the ID attribute of the accordion content container element.
                                        If set, data-internal should be blank or not included. </li>
                                    <li> <strong>data-internal</strong> : The ID attribute of the accordion content container element within the same document.
                                        If <code>data-internal</code> is set, <code>data-src</code> should be blank or not included. </li>
                                    <li> <strong>data-defaultopen="true"</strong> : Specifies that the referenced accordion node will
                                        open automatically. Only one accordion node per group should include this
                                        attribute. </li>
                                    <li> <strong>data-role</strong> : The role name that is conveyed to screen reader users within the accordion
                                        link. <code>Accordion</code> is set by default if no value is specified. </li>
                                    <li> <strong>data-openstate</strong> : The open state text that is conveyed to screen reader users within
                                        the accordion link when open. <code>Expanded</code> is set by default if no value
                                        is specified. </li>
                                    <li> <strong>data-insert</strong> : The ID attribute of the container element where accordion node content
                                        will be inserted. The referenced container element must not be included
                                        within the accordion link node. </li>
                                    <li> <strong>data-group</strong> : The shared group name for all related nodes within an accordion. This is
                                        used to differentiate separate accordion groups within the same
                                        document. </li>
                                </ul>
                                <p> Additional HTML5 attributes can be added to enhance functionality by editing the file <em>"accdc_bootstrap.js"</em>.</p>
                                <p> <strong>Required attributes for the triggering element:</strong></p>
                                <ul>
                                    <li> <strong>class="accAccordion"</strong> : The bootstrap class name that specifies an accessible accordion node. </li>
                                    <li> <strong>id</strong> : The unique ID of the element. This value is also registered as the ID of the individual
                                        accordion node AccDC Object, making it possible to invoke the object programmatically.
                                        <br />
                                        E.G $A.reg.uniqueID.open();
                                        <br />
                                        // All other AccDC API properties and methods are similarly available.
                                    </li>
                                </ul>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" ><button id="tabs">ARIA Tabs</button></h3>
                            <div class="content hdn">
                                <p> Tabs are a fairly simple control type that are easy to make accessible.</p>
                                <p> Though similar in both concept and execution to Accordions, they are not the same.</p>
                                <p> An Accordion has a series of triggering elements that expand and collapse, the rendered content of which is
                                    inserted directly after the triggering element when opened.
                                    The container element insertion points for Accordions are not shared.
                                    Also, all Accordion links appear in the tab order.
                                    The reason why ARIA attributes such as <code>role="tablist"</code> and <code>role="tab"</code> are not included
                                    within accordions, is because the insertion of inline content would place dynamic content sections within the
                                    same Tablist container, making it impossible to determine the order of nested Tab controls when present within the inserted content.</p>
                                <p> In contrast, a Tab Control has a series of grouped triggering elements that expand and collapse, the rendered
                                    content of which is inserted directly after the triggering element group when opened.
                                    The container element insertion point for all Tab Control triggering elements is shared between them.
                                    Also, the group of triggering elements in a Tab Control has only one tab stop. The arrow keys are then
                                    used to switch focus between each Tab, and the <kbd>Enter</kbd> or
                                    <kbd>Space</kbd> key is used to expand the desired Tab content panel.</p>
                                <p> The chosen implementation should always match the UI that it's being applied to, to prevent confusion.</p>
                                <p> The Tab Module automates these processes by adding all related event handlers and managing all related rendering procedures.</p>
                                <ul>
                                    <li> Tab group with ARIA <code>role=tablist, role=tab, aria-posinset, aria-setsize,
                                            aria-expanded, aria-selected, aria-controls, role=tabpanel, aria-labelledby</code>, and <code>aria-owns</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA and Non-ARIA Tabs/ARIA Tabs (Internal Content)/demo.htm"> Coding Arena/ARIA and Non-ARIA Tabs/ARIA Tabs (Internal Content)/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <p> <strong>Referencing external content:</strong></p>
                                <pre class="brush: html;">
&lt;div role="tablist" id="tabList1">
&lt;div>
&lt;a href="#" class="accTab" data-src="files/tabs.html#containerId1" data-insert="tabPanelId" data-defaultopen="true"  id="tabId1" role="tab">
&lt;span>Triggering Element One Name&lt;/span>
&lt;/a>
&lt;/div>
&lt;div>
&lt;a href="#" class="accTab" data-src="files/tabs.html#containerId2" data-insert="tabPanelId" id="tabId2" role="tab">
&lt;span>Triggering Element Two Name&lt;/span>
&lt;/a>
&lt;/div>
&lt;/div>

&lt;div id="tabPanelId">&lt;!--
(All Tab panel content will be inserted here when a Tab is opened)
-->&lt;/div>
</pre>
                                <p> <strong>Or referencing internal content:</strong></p>
                                <pre class="brush: html;">
&lt;div role="tablist" id="tabList2">
&lt;div>
&lt;a href="#" class="accTab" data-internal="containerId1" data-insert="tabPanelId2" data-defaultopen="true"  id="x-tabId1" role="tab">
&lt;span>Triggering Element One Name&lt;/span>
&lt;/a>
&lt;/div>
&lt;div>
&lt;a href="#" class="accTab" data-internal="containerId2" data-insert="tabPanelId2" id="x-tabId2" role="tab">
&lt;span>Triggering Element Two Name&lt;/span>
&lt;/a>
&lt;/div>
&lt;/div>

&lt;div id="tabPanelId2">&lt;!--
(All Tab panel content will be inserted here when a Tab is opened)
-->&lt;/div>
</pre>
                                <p> HTML5 <code><code>"data-"</code></code> attributes are used to configure specific functionality for each Tab expand/collapse link. These include the following:</p>
                                <ul>
                                    <li> <strong>data-src</strong> : The resource path and pointer to the ID attribute of the Tab content container element.
                                        If set, data-internal should be blank or not included. </li>
                                    <li> <strong>data-internal</strong> : The ID attribute of the Tab content container element within the same document.
                                        If data-internal is set, data-src should be blank or not included. </li>
                                    <li> <strong>data-insert</strong> : The ID attribute of the container element where the Tab content will be inserted when rendered. (This must not be inside the triggering element, and must be the same for all Tab links within the same group)</li>
                                    <li> <strong>data-defaultopen="true"</strong> : Specifies that the referenced Tab panel will open automatically. (Only one Tab link per group should include this attribute.)</li>
                                </ul>
                                <p> <strong>Required attributes:</strong></p>
                                <ul>
                                    <li> <code>role="tablist"</code> must be included within the container element (where all Tab links are contained).</li>
                                    <li> <code>role="tab"</code> must be included within all Tab links.</li>
                                    <li> Both the Tablist container element (with <code>role="tablist"</code>) and all Tab links (with <code>role="tab"</code>) must include unique ID attribute values.</li>
                                </ul>
                                <p> <strong>Important:</strong> The insertion point where Tab panel content is rendered must be inline with (meaning directly after) the Tablist group, to ensure accessibility for screen reader and keyboard only users. (No other active elements or page content should separate them.)</p>
                                <p> The examples above use DIV tags as container elements, but it doesn't really matter what the container element is, as long as the IDs match up. For instance, the interactive samples use standard list markup to group related Tab links, which works well and is easy to format.</p>
                                <p> <strong>Container Element HTML Syntax</strong></p>
                                <pre class="brush: html;">
&lt;div id="containerId1">
Tab panel 1 content goes here.
&lt;/div>

&lt;div id="containerId2">
Tab panel 2 content goes here.
&lt;/div>
</pre>
                                <p> The following attributes are handled automatically by the Tab Module:</p>
                                <ul>
                                    <li> <code>tabindex</code></li>
                                    <li> <code>aria-label</code></li>
                                    <li> <code>aria-owns</code></li>
                                    <li> <code>aria-selected</code></li>
                                    <li> <code>aria-expanded</code></li>
                                    <li> <code>aria-posinset</code></li>
                                    <li> <code>aria-setsize</code></li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
$A.setTabs( 'div.tabGroup a.accTab' , {
// Configuration key / value mappings
}, useARIA? , document ,
function(dc){
// Optional callback to execute after a Tab panel opens
// 'this' is the same as dc.triggerObj, and is the DOM node for the triggering element
// dc.containerDiv is the DOM container node that contains the newly loaded Tab panel content.
} );
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p>The first parameter is a CSS Selector that specifies all Tab expand/collapse links that are part
                                            of the same Tablist group.</p>
                                        <p> If multiple Tablist groups are present on the same page,
                                            each Tablist should be declared separately using the above statement, and the CSS Selector
                                            should only reference the expand/collapse node links that apply to that particular Tablist,
                                            and to no other.</p>
                                        <p> The reason for this is simple. When a Tab panel is opened, it will
                                            close all other Tab panels when an expand link is activated. So if you don't want all of
                                            the nodes of every other Tablist group on the page to be closed at the same time as well,
                                            then you should separate them using unique CSS Selectors for each group.</p>
                                    </li>
                                    <li>
                                        <p>The second parameter is used to configure Tab functionality using key / value map overrides.</p>
                                    </li>
                                </ol>
                                <p><strong> Example:</strong></p>
                                <pre class="brush: js;">
{

// Set the Tab panel boundary text that will be conveyed to screen reader users
role: 'Tab',
accStart: 'Start',
accEnd: 'End',

// Set the Tab AccDC Object to render literal content
// (only when pulling content from within the same page, remove otherwise)
mode: 0,

// Preload HTML markup to speed rendering
// (only when pulling content from an external page, remove otherwise)
preload: true,

// Preload images to speed rendering
// (only when pulling content from an external page, remove otherwise)
preloadImages: true,

// Set a className that will be added to the triggering element for the currently active tab
toggleClass: 'active',

// Choose whether or not to make Tab expand/collapse links toggles as well
isToggle: false

// Additional AccDC API properties and methods may be applied here as well if desired.

}
</pre>
                                </li>
                                <li>
                                    <p> The third parameter (<code>useARIA?</code>) is a Boolean (true or false), that specifies whether
                                        the Tab Control will be configured as an ARIA Tab widget.
                                        <br />
                                        If true, <code>role="tablist"</code> and <code>role="tab"</code> must be present within the markup in the correct locations.
                                        <br />
                                        If false, <code>role="tablist"</code> and <code>role="tab"</code> must not be included within the markup.
                                    </p>
                                    <p> <strong>Important:</strong> The ARIA attributes <code>role="tablist"</code> and <code>role="tab"</code> must only be used on client side widgets that don't require a page refresh or navigate to another page.
                                        <br />
                                        The reasons why are fully discussed in the article at <a href="http://lnkd.in/5nPudh" target="_blank">http://lnkd.in/5nPudh</a>
                                    </p>
                                </li>
                                <li>
                                    <p> The fourth parameter (<code>contextDOM_Node</code>) specifies the container DOM node where the Tablist markup
                                        is contained, which confines the CSS Selector to the contents of this node.
                                        This can also be used to reference Tab groups contained within iFrame documents.</p>
                                </li>
                                <li>
                                    <p> The fifth parameter is a callback function that can be used to configure additional functionality whenever a Tab panel finishes rendering.</p>
                                </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> Every Tab panel is registered as an AccDC Object, the ID of which matches the ID attribute value on the Tab expand/collapse link. For this reason,
                                    all Tab expand/collapse links must have unique ID attribute values.</p>
                                <p> This means that you can programmatically control each Tab panel using JavaScript if desired, like so:</p>
                                <pre class="brush: js;">
// Get a reference to the Tab AccDC Object for the Tab expand/collapse link with id="uniqueId"
var dc = $A.reg['uniqueId'];

// Now invoke the object
dc.open();

// Or close it
dc.close();

// All other AccDC API properties and methods can be applied here as well.
</pre>
                                <div class="hd">
                                    <h4><span> Triggering Element Requirements</span></h4>
                                </div>
                                <p> Regarding the triggering element for expand/collapse links, you should always use an active element for this purpose to ensure
                                    accessibility for both screen reader and keyboard only users.</p>
                                <p> Within the Coding Arena samples, these are standard links (<code>A</code> tags with an <code>href</code> attribute). However,
                                    you can use whatever type of triggering element you wish, a standard link, button, or image link, with any type of styling.
                                    There must be an active element as a triggering element though, to ensure accessibility.</p>
                                <p> If using an image link however, the <code>img</code> tag must have a null <code>alt</code> attribute (<code>alt=""</code>)
                                    to hide it from screen reader users, and offscreen text must be included if no visible screen text is present.
                                    This will ensure the highest level of accessibility for the highest percentage of screen reader users across all platforms.</p>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample Tabs in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter
                                    what they look like. This is demonstrated within the "Shell" folders, where there is no CSS styling for the Tablist.
                                    This is also useful as a practice template for trying out different styling designs with custom content.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a
                                    focus outline clearly shows which elements have focus, and your newly styled Tablist will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Bootstrapping</span></h4>
                                </div>
                                <p> Bootstrapping is designed to handle common control types that span multiple pages with similar setup configurations.</p>
                                <p> The Tablists within the Bootstrap folders are configured using HTML5 <code><code>"data-"</code></code> attributes within the HTML markup.</p>
                                <p> When the Bootstrap Module (<em>"accdc_bootstrap.js"</em>) is executed, it parses the newly loaded DOM, recognizes the class <code>"accTab"</code>,
                                    then configures the same module declaration as previously described using these HTML5 attributes.</p>
                                <p> Available HTML5 attributes for the triggering element:</p>
                                <ul>
                                    <li> <strong>data-src</strong> : The resource path and pointer to the ID attribute of the tab content container element.
                                        If set, <code>data-internal</code> should be blank or not included.</li>
                                    <li> <strong>data-internal</strong> : The ID attribute of the tab panel container element within the same document.
                                        If <code>data-internal</code> is set, <code>data-src</code> should be blank or not included. </li>
                                    <li> <strong>data-defaultopen="true"</strong> : Specifies that the referenced tab will open automatically. Only one tab per group should include this attribute. </li>
                                    <li> <strong>data-role</strong> : The role name that is conveyed to screen reader users as beginning and ending boundary text for the tab panel content. "Tab" is set by default if no value is specified. </li>
                                    <li> <strong>data-insert</strong> : The ID attribute of the container element where tab panel content will be inserted. </li>
                                    <li> <strong>data-group</strong> : The shared group name for all related tabs. This is used to differentiate separate tab groups within the same document. </li>
                                    <li> <strong>data-headinglvl</strong> : The heading level of the tab panel section for screen reader users. This
                                        should reflect proper nesting. If the tab panel content is inserted within an H1, <code>data-headinglvl</code>
                                        should be set to '2', and so on. If no value is specified, and if no override is
                                        set within <em>accdc_bootstrap.js</em> via <code>ariaLevel:#</code>, '3' will be set by default. </li>
                                </ul>
                                <p> Additional HTML5 attributes can be added to enhance functionality by editing the file <em>"accdc_bootstrap.js"</em>.</p>
                                <p> <strong>Required attributes for the triggering element:</strong></p>
                                <ul>
                                    <li> <code>role="tablist"</code> : The ARIA role that specifies a group of tab controls. This must only be included within the element that contains all individual tabs.</li>
                                    <li> <code>role="tab"</code> : The ARIA role that specifies an individual tab control. To ensure accessibility, this element must not contain any other active elements.</li>
                                    <li> <code>class="accTab"</code> : The bootstrap class name that specifies an accessible Tab link.</li>
                                    <li> <code>id</code> : The unique ID of the element. This value is also registered as the ID of the individual Tab AccDC Object, making it possible to invoke the object programmatically.
                                        <br />
                                        E.G $A.reg.uniqueID.open();
                                        <br />
                                        // All other AccDC API properties and methods are similarly available.
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> Implementation Notes</span></h4>
                                </div>
                                <p> As an ARIA widget implementation, the Tablist container element must include the attribute <code>role="tablist"</code>, and all Tab item links must include
                                    the attribute <code>role="tab"</code> to ensure accessibility for screen reader users. </p>
                                <p> Both the Tablist container element and all Tab item links must include unique ID attribute values.</p>
                                <p> The innerHTML for each Tab item link must contain a textual label, which may be positioned offscreen to hide it visually if desired.
                                    (This textual label is necessary so that screen reader users will be able to identify the purpose of the node, and also to ensure proper feedback in iOS devices when using VoiceOver.)</p>
                                <p> Images may also be used within Tab item links if desired, however, they must include the attribute <code>alt=""</code> to hide them from screen reader users.</p>
                                <p> To add tooltips for sighted users, use the Title attribute instead, and make sure that the tooltip text matches the text contained within the textual label if positioned offscreen to hide it visually.</p>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" ><button id="comboboxes">ARIA Comboboxes</button></h3>
                            <div class="content hdn">
                                <p> ARIA Comboboxes are used to trigger dynamic lists of related options, such as with auto-suggest filters and custom dropdowns.</p>
                                <p> <strong>Expected behaviors:</strong></p>
                                <ul>
                                    <li> All Combobox controls are keyboard focusable unless explicitly disabled, and must include an accessible close or toggle icon for sighted mouse and mobile touch device users when applicable.</li>
                                    <li> Interactive editable Combobox controls that use an <code>Input+type=text</code> element,
                                        open using the <kbd class="down">Down</kbd> arrow, are navigated using <kbd class="up">Up</kbd>
                                        and <kbd class="down">Down</kbd>, are saved and closed by pressing <kbd><kbd>Alt</kbd>+<kbd>Up</kbd></kbd> or <kbd>Enter</kbd>,
                                        are canceled and closed by pressing <kbd>Escape</kbd>, and support uninterrupted editability when
                                        <kbd class="left">Left</kbd> or <kbd class="right">Right</kbd> or any other non-control key is pressed.</li>
                                    <li> Interactive readonly Combobox controls that use an <code>Input+type=text</code>
                                        element, open using the <kbd class="down">Down</kbd> arrow, are navigated using
                                        <kbd class="up">Up</kbd> and <kbd class="down">Down</kbd>, are saved and closed by
                                        pressing <kbd><kbd>Alt</kbd>+<kbd>Up</kbd></kbd> or <kbd>Enter</kbd>, are canceled and closed by pressing <kbd>Escape</kbd>, and
                                        require a toggleable triggering element for sighted mouse and mobile touch device users.</li>
                                    <li> Interactive Combobox controls that use simulated active elements such as Divs
                                        or Spans, open using the <kbd class="down">Down</kbd> arrow or <kbd>Enter</kbd> key,
                                        are navigated using <kbd class="up">Up</kbd> and <kbd class="down">Down</kbd>, are
                                        saved and closed by pressing <kbd><kbd>Alt</kbd>+<kbd>Up</kbd></kbd> or <kbd>Enter</kbd>, are canceled and closed by
                                        pressing <kbd>Escape</kbd>, and act as their own actionable toggle control.</li>
                                </ul>
                                <p> The ARIA Combobox Module automates these processes by adding all related event handlers.</p>
                                <ul>
                                    <li> Startstring Editable and Readonly Comboboxes with ARIA <code>role=combobox, aria-activedescendant, aria-expanded, aria-controls, aria-autocomplete</code>, and <code>aria-describedby</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Comboboxes/ARIA Comboboxes (Native Inputs, Editable and Readonly)/demo.htm"> Coding Arena/ARIA Comboboxes/ARIA Comboboxes (Native Inputs, Editable and Readonly)/demo.htm</a>
                                    </li>
                                    <li> Substring Editable Combobox with ARIA <code>role=combobox, aria-activedescendant, aria-expanded, aria-controls, aria-autocomplete</code>, and <code>aria-describedby</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Comboboxes/ARIA Comboboxes (Native Inputs, Editable with Substring Match)/demo.htm"> Coding Arena/ARIA Comboboxes/ARIA Comboboxes (Native Inputs, Editable with Substring Match)/demo.htm</a>
                                    </li>
                                    <li> Substring Multiselect Editable Combobox with ARIA <code>role=combobox, aria-activedescendant, aria-expanded, aria-controls, aria-autocomplete</code>, and <code>aria-describedby</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Comboboxes/ARIA Comboboxes (Native Inputs, Multiselect Editable with Substring Match)/demo.htm"> Coding Arena/ARIA Comboboxes/ARIA Comboboxes (Native Inputs, Multiselect Editable with Substring Match)/demo.htm</a>
                                    </li>
                                    <li> Wordmatch Editable Combobox with ARIA <code>role=combobox, aria-activedescendant, aria-expanded, aria-controls, aria-autocomplete</code>, and <code>aria-describedby</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Comboboxes/ARIA Comboboxes (Native Inputs, Editable with Word Match)/demo.htm"> Coding Arena/ARIA Comboboxes/ARIA Comboboxes (Native Inputs, Editable with Word Match)/demo.htm</a>
                                    </li>
                                    <li> Simulated Combobox with ARIA <code>role=combobox, aria-activedescendant, aria-expanded, aria-controls, aria-autocomplete</code>, and <code>aria-describedby</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Comboboxes/ARIA Comboboxes (Simulated, Readonly)/demo.htm"> Coding Arena/ARIA Comboboxes/ARIA Comboboxes (Simulated, Readonly)/demo.htm</a>
                                    </li>
                                    <li> Simulated Multiselect Combobox with ARIA <code>role=combobox, aria-activedescendant, aria-expanded, aria-controls, aria-autocomplete</code>, and <code>aria-describedby</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Comboboxes/ARIA Comboboxes (Simulated, Readonly Multiselect)/demo.htm"> Coding Arena/ARIA Comboboxes/ARIA Comboboxes (Simulated, Readonly Multiselect)/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <p> The HTML syntax varies depending on which type of implementation is desired.</p>
                                <p> Editable Input</p>
                                <pre class="brush: html;">
&lt;input role="combobox" type="text" title="Explicit label text" />
</pre>
                                <p> Readonly Input</p>
                                <pre class="brush: html;">
&lt;input role="combobox" type="text" readonly title="Explicit label text" />
</pre>
                                <p> Simulated Active Element</p>
                                <pre class="brush: html;">
&lt;span title="Explicit label text" role="combobox" tabindex="0" class="focusableElement" >
&lt;span class="childContainerToUpdate">&lt;/span>
&lt;/span>
</pre>
                                <ul>
                                    <li> The markup structure for simulated active elements doesn't require the use of Spans, and may consist
                                        of any HTML container markup with embedded tags.</li>
                                    <li> The tabindex attribute is required on the same container element that includes <code>role=combobox</code> to
                                        ensure keyboard accessibility, and an empty child container element must be included where dynamically saved values will be inserted.</li>
                                </ul>
                                <p> All Combobox controls are bound to a standard Select element instance, which may be hidden within the page using CSS, or
                                    dynamically generated using JavaScript to support dynamic population via AJAX.</p>
                                <p> To enable multiselect functionality, add the attribute multiple="multiple" to the hidden select element. (Only available when using the ARIA Combobox Module R2.0 or greater.)</p>
                                <pre class="brush: html;">
&lt;select name="control-name">
&lt;option value="value-1"> Value 1 name &lt;/option>
&lt;option value="value-2"> Value 2 name &lt;/option>
&lt;option value="value-3"> Value 3 name &lt;/option>
&lt;/select>
</pre>
                                <p> To set a default value for the Combobox other than <code>index[0]</code>, add the <code>selected</code> attribute to the default option.</p>
                                <p> The following attributes are handled automatically by the Combobox Module:</p>
                                <ul>
                                    <li> <code>aria-activedescendant</code></li>
                                    <li> <code>aria-expanded</code></li>
                                    <li> <code>aria-controls</code></li>
                                    <li> <code>aria-autocomplete</code></li>
                                    <li> <code>aria-describedby</code></li>
                                    <li> <code>role=listbox</code></li>
                                    <li> <code>role=option</code></li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
// Create a new Combobox instance and bind the relevant elements

var myCombobox = new $A.Combobox( selectElementDOM-Node , inputDOM-Node , optionalChildDOM-Node );

// Configure settings here prior to invocation

// Then invoke the Combobox for auto-rendering

myCombobox.start();
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter is the hidden Select element DOM node that will be bound to the Combobox control.</p>
                                    </li>
                                    <li>
                                        <p> The second parameter is the focusable <code>role=combobox</code> element that will be bound to the hidden Select element.</p>
                                    </li>
                                    <li>
                                        <p> The third parameter is the embedded child container element that will be bound to the <code>role=combobox</code>
                                            element, which is only applicable if the <code>role=combobox</code> element is not a standard Input or Textarea element.</p>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> After a Combobox control is instantiated, the following public properties and methods are available.</p>
                                <p><strong> Methods:</strong></p>
                                <pre class="brush: js;">
// Set the listbox to render all Select Options regardless of the current value
myCombobox.setShowAll(Boolean); // Default: False

// Set the listbox to render only Select Options that match the substring value
myCombobox.setSubstringMatch(Boolean); // Default: False

// Set the listbox to render only Select Options that include all of the space delimited words in the current value
myCombobox.setWordMatch(Boolean); // Default: False

// Set the Combobox to automatically display the currently selected value within the hidden Select element onStart
myCombobox.setDefault(Boolean); // Default: True

// Set the currently selected listbox value to automatically be saved when focus moves away from the Combobox control
myCombobox.setAutoComplete(Boolean); // Default: False

// Set the parent/child tag markup structure for the dynamically rendered listbox
myCombobox.setTags({
parentTag: 'ul',
childTag: 'li'
});

// Set dynamic class names
myCombobox.setClassNames({
toplevelClass: 'toplevel-div clearfix', // Top level Div class of Combobox listbox
middleClass: 'middle-div clearfix', // Mid level Div class of Combobox listbox
listboxClass: 'listbox clearfix', // // parentTag class
optionClass: 'option clearfix', // childTag class
activeClass: 'active', // Currently active Combobox listbox option
toggleClass: 'pressed' // Pressed state class of the altTrigger element
});

// Set CSS autopositioning relative to the triggering Combobox element.
// Accepted AccDC API values between 0-disabled-default and 12
// For details, see WhatSock.com > Core API > CSS > .autoPosition
myCombobox.setAutoPosition(Number); // Default: 0

	// Set a positive or negative top/left offset to be applied to the autoPosition property calculation
myCombobox.setOffset({
top: Number,
left: Number
});

// Set the number of listbox options to render when displayed
myCombobox.setSize(Number); // Default: 5

// Set a different element to act as an autoPosition focus element instead of the Combobox control
myCombobox.setPosAnchor(alternateDOM-Node); // Will not change the DOM insertion point and reading order

// Set a different element to act as an insertion point and autoPosition focus element instead of the Combobox control
myCombobox.setTargetObj(alternateDOM-Node); // Will change the DOM reading order

// Invoke the Combobox control and apply all saved settings
myCombobox.start();

// Close the Combobox control and pause functionality
myCombobox.stop();

// Manually open the Combobox listbox using all applied settings
myCombobox.open();

// Set a handler to execute every time the Combobox listbox is rendered
myCombobox.onOpen(function(dc){
// this = the Combobox control
// dc = the AccDC Object instance for the Combobox listbox
});

// Manually close the Combobox listbox
myCombobox.close();

// Set a handler to execute every time the Combobox listbox is closed
myCombobox.onClose(function(dc){
// this = the Combobox control
// dc = the AccDC Object instance for the Combobox listbox
});

// Set a toggle control to open or close the Combobox listbox
// Must always be set when implementing readonly Input+type=text elements to ensure sighted mouse and mobile touch device support
myCombobox.setAltTrigger(toggleElementDOM-Node);

// Set a handler to execute every time the toggle altTrigger element is activated
myCombobox.onTriggerChange(function(altTriggerElement, toggleState){
// this = altTriggerElement
// toggleState = true or false
});

// Set a handler to execute every time a new value is saved to the Combobox control
// This will override the default functionality
myCombobox.onSelect(function(optionName, optionValue, comboboxControl, selectElement){
// this = comboboxControl
// optionName = the visible string for the hidden Select option that is highlighted.
// optionValue = the value attribute for the hidden Select option that is selected. This parameter changes to an array of selected option nodes when multiple is set instead. (Only available when using the ARIA Combobox Module R2.0 or greater.)
// comboboxControl = the Combobox control element
// selectElement = the hidden Select element
// Save the new value accordingly
// then return the saved string to prevent auto reopening of the Combobox listbox
return 'saved string';
});

// Set multiple divider to break up list item markup properly when updated.
// Automatically becomes available when the multiple attribute is set on the hidden select element. (Only available when using the ARIA Combobox Module R2.0 or greater.)
myCombobox.setMultipleDivider(function(values){
// 'values' is an array of string names for the selected option nodes.
return values.join('	');
});

// Clear all selected options when multiple is set on the hidden select element.
// (Only available when using the ARIA Combobox Module R2.0 or greater.)
myCombobox.clearAll();

// Set a character minimum when typing into an editable combobox before autosuggested options are rendered.
// (Only available when using the ARIA Combobox Module R2.0 or greater.)
myCombobox.setCharMin(#); // Default = 0

// Get the current value of the hidden select element
// Returns a value property string for single select elements, or an array of selected option DOM nodes when the multiple attribute is set on the select element.
// (Only available when using the ARIA Combobox Module R2.0 or greater.)
myCombobox.getValue();

// Manually resynchronize the hidden Select to rebuild available Options for the Combobox listbox
// This can be used to repopulate rendered options after remote API queries via AJAX cause the hidden Select to contain new Options
myCombobox.update();

// Set a string to be announced to screen reader users when the Combobox control receives focus
myCombobox.setPromptText(String); // Default: ''

// Set a name for the offscreen Close link for screen reader users
// Necessary for non-sighted touch screen device users to detect the end of the Combobox listbox when rendered
// To disable the offscreen Close link when needed, pass a null value ("") to the method.
myCombobox.setCloseText(String); // Default: 'Close Popup'
</pre>
                                <p> <strong>Properties:</strong></p>
                                <pre class="brush: js;">
// Access the hidden Select element DOM node
myCombobox.select

// Access the role=combobox element DOM node
myCombobox.combobox

// Access the dynamically rendered listbox AccDC Object, including all AccDC API properties and methods
// View the Core API tab at WhatSock.com for a full index of available AccDC API properties and methods.
myCombobox.dc
</pre>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The samples in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what they look like.</p>
                                <p> You can change the styling however you wish to fit the layout of any UI, and the comboboxes will still be accessible
                                    to both screen reader and keyboard only users regardless.
                                    Simply ensure that sufficient color contrast is observed for low vision users, and a focus outline clearly shows which elements have focus.</p>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" ><button id="grids">ARIA Data Grids</button></h3>
                            <div class="content hdn">
                                <p> An ARIA Data Grid is one of the most complicated of ARIA Widget types to make accessible, since it involves many different types of user interaction.</p>
                                <p> Expected behaviors: The entire grid should have only one tab stop, one cell should be focusable at a time, the arrow keys should move focus between cells,
                                    <kbd class="home">Home</kbd> and <kbd class="end">End</kbd> should move focus to the beginning or end of a row, <kbd>PageUp</kbd> and <kbd>PageDown</kbd>
                                    should open the previous or next page of the grid, <kbd><kbd>Alt</kbd>+<kbd>PageUp</kbd></kbd> and
                                    <kbd><kbd>Alt</kbd>+<kbd>PageDown</kbd></kbd> should move focus to the first or last page in the grid, <kbd>Space</kbd> and <kbd>Enter</kbd> should
                                    activate the current cell or row, and textual
                                    equivalents should indicate the role and state of each interactive control type for screen reader users.</p>
                                <p> The Data Grid Module automates these processes by adding all related event handlers and managing all related rendering procedures.</p>
                                <ul>
                                    <li> Grid control with ARIA
                                        <code>role=grid, role=rowgroup, role=row, role=gridcell, role=rowheader, role=columnheader, aria-describedby, aria-selected, aria-owns</code>,
                                        and <code>aria-labelledby</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Data Grids/ARIA Data Grid (Dynamic)/demo.htm"> Coding Arena/ARIA Data Grids/ARIA Data Grid (Dynamic)/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <pre class="brush: html;">
&lt;div id="gridContainerId" >&lt;/div>
</pre>
                                <p> The following attributes are handled automatically by the Data Grid Module:</p>
                                <ul>
                                    <li> <code>tabindex</code></li>
                                    <li> <code>aria-owns</code></li>
                                    <li> <code>role=grid</code></li>
                                    <li> <code>role=rowgroup</code></li>
                                    <li> <code>role=row</code></li>
                                    <li> <code>role=gridcell</code></li>
                                    <li> <code>role=columnheader</code></li>
                                    <li> <code>role=rowheader</code></li>
                                    <li> <code>aria-rowindex</code></li>
                                    <li> <code>aria-colindex</code></li>
                                    <li> <code>aria-labelledby</code></li>
                                    <li> <code>aria-describedby</code></li>
                                    <li> <code>aria-selected</code></li>
                                    <li> <code>title</code></li>
                                    <li> <code>aria-hidden</code></li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
var grid = new $A.DataGrid( ContainerNodeOrID );
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter specifies the container element where the data grid will be rendered, and may be a DOM node or an ID string.</p>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <pre class="brush: js;">
// Set the registered columns including unique IDs and label text
// The order of items in the array will dictate the default column ordering when rendered

grid.mapColumnNames([
{
// ID that is associated with all cells in the column
id: 'col1id',
// The text that will be rendered as the column header
lbl: 'User Name',
// Set an optional class to be added to all cells within the column
colClass: 'col1'
},
{
id: 'col2id',
lbl: 'Email Address',
colClass: 'col2'
},
{
id: 'col3id',
lbl: 'Publish Record',
colClass: 'col3'
}
]);

// Programmatically change the order of rendered columns
// This method rearanges the array order of the objects passed to grid.mapColumnNames(ObjArray)
// Which is used to determine rendering order
// This must be followed by grid.open() to rerender the grid after a change is made

// E.G Change the third column to the first column
grid.changeColumnOrder(2, 0);

// Enable row headers and specify the column ID to be used for this purpose
// This must be followed by grid.open() to rerender the grid after a change is made

grid.enableRowHeaders(true, 'col1id');
// Or disable
grid.enableRowHeaders(false);

// Set a maximum number of rows to render before pagination is applied
// If set to 0, all records will render and no pagination will occur
// This must be followed by grid.open() to rerender the grid after a change is made

grid.setRowMax(25);

// Enable or disable editability for grid cells
// This will render an edit field for strings or handle toggle events for buttons.
// This must be followed by grid.open() to rerender the grid after a change is made

grid.editable(true);
// Or to disable
grid.editable(false);

// Add rows to a grid instance

grid.add(rowObject_or_rowObjectArray);

// Each row must adhere to the following object literal format:

{

id: 'uniqueRowId',

cells: {

'col1id': {
// Set the cell type, may be either 'text' or 'toggle'
// Defaults to 'text' if omitted
type: 'text',
// Set an optional readonly flag to disable editability if the grid is editable
// Defaults to false if omitted
readonly: true,
// Set the initial value of the cell
value: 'My User Name'
},

'col2id': {
value: 'email_address@whatever.com'
},

'col3id': {
type: 'toggle',
readonly: false,
value: true,
// For toggles, set the name property to specify a visual textual label
name: 'Published',
// For toggles, specify an optional class to be added when the toggle is set to true
// This will override the general toggle class specified within grid.setStaticClasses
toggleClass: 'toggle-button-pressed'
}

}

}

// Set a value changed listener for handling serverside posting when cell values change

grid.setChangeListener(function(originalCellObject, newValue, rowObject, gridInstance){
// rowObject reflects the same object passed to grid.add
// so that rowObject.id reflects the original unique row ID
// originalCellObject reflects the cell object instance passed within 'cells' when passed to grid.add
// and cellObject.id reflects the column ID, so that rowObject.id and cellObject.id can be used as X Y coordinates to identify the correct cell in the grid.
// Compare originalCellObject.value with newValue to perform input validation or other processes.
// To prevent rendering the changed input or new toggle state, simply return false
});

// Enable or disable double click or single click mouse interaction for selectable rows and editable cells
// This must be followed by grid.open() to rerender the grid after a change is made
// When set to false, a single mouse click will toggle selectability or trigger an edit action

grid.useDblClick(false);

// Enable or disable row selectability
// This must be followed by grid.open() to rerender the grid after a change is made
// When set to true, editability will automatically be set to false to prevent functionality and keyboard accessibility conflicts

grid.setSelect({
enable: true,
// Set a class to be added to the TR node every time a row is selected
toggleClass: 'selected',
// Set single or multiSelect
multiSelect: false,
// Use ARIA for selection or cross-platform offscreen text instead
// Important: The use of aria-selected for row selection is not well supported by screen readers at this time
ariaSelect: false,
// Choose whether rendering another page will automatically unselect previously selected rows
// Set to false to unselect rows automatically, or true to keep selection active
preserve: false,
// Set a callback to execute every time a row is toggled
callback: function(rowObject, state, prevSelectedRowsArray, gridInstance){
// rowObject is the activated row object.
// rowObject.rowNode is the TR DOM node for the toggled row.
// 'state' reflects the proposed state change, which is the opposite of rowObject.selected.
// prevSelectedRowsArray is an array of all previously selected rowObjects, not counting the current rowObject.
// To cancel the toggle action, return false
}
});

// Or pass single properties to set functionality

grid.setSelect({
enable: false
});

// Unselect all previously selected rows

grid.unselectAll();

// Select all rows on the currently rendered page

grid.selectAll();

// Get an array of all currently selected rowObjects
// Each rowObject reflects the same object literal passed in grid.add()

// Get an array of selected rowObjects
var selected = grid.getSelected(),
// Get the row ID for the first selected row
rowId = selected[0].id,
// Or get the TR DOM node of the first selected row
rowNode = selected[0].rowNode;

// Programmatically select one or more rows using an array of row IDs

grid.select(['rowId1', 'rowId2']);

// Enable or disable row deletion
// This must be followed by grid.open() to rerender the grid after a change is made
// When enabled, the Delete key will delete all currently selected rows from the grid and destroy their rowObjects in the cache
// Selectability must be set to true for this functionality to be used

grid.setDelete({
enable: true,
// Set a function to execute prior to deletion
runBefore: function(selectedRowIDs_array){
// Return false to cancel deletion
},
// Set a callback to execute on every row that is deleted
callback: function(rowObject, gridInstance){
// rowObject.id is the table row ID that is being deleted
// alert(rowObject.id);
// return false to cancel deletion from the grid
},
// Set a function to execute after deletion is completed
runAfter: function(deletedRowIDs_array){
// Do something
}
});

// Or to disable

grid.setDelete({
enable: false
});

// Programmatically delete all currently selected rows and destroy their rowObjects in the cache

grid.deleteRows();

// Programmatically delete one or more rows and destroy their rowObjects in the cache using an array of row IDs

grid.deleteRows(['rowId1', 'rowId2']);

// Programmatically delete all rows in the grid instance and destroy their rowObjects in the cache

grid.deleteAllRows();

// set accessible text for screen reader users

grid.setAccessibleText({
// Set offscreen and tooltip text for toggle cells
toggleButtonRole: 'Toggle Button',
toggleButtonState: 'Pressed',
disabledText: 'Disabled',
// Set the page text to be announced to screen reader users during infinite scrolling. E.G "Page 2", "Page 3", etc.
pageRole: 'Page',
// Set the active state and help tooltip text for mouse users
selectState: 'Selected',
editLinkAction: 'Editable',
dblClickTitle: 'Click to activate',
// Set the title text for the edit field
editFieldTitle: 'Press Enter to save, or Escape to cancel.'
});

// Set static classes

grid.setStaticClasses({
// General Table element class for the grid
gridClass: 'data-grid',
// Additional Table element class when the grid is set to Readonly
gridReadOnlyClass: 'data-grid-readonly',
// Additional Table element class when the grid is set to Editable
gridEditableClass: 'data-grid-editable',
// Additional Table element class when the grid is set to Selectable
gridSelectableClass: 'data-grid-selectable',
// General TR element class for the grid
gridRowClass: 'data-grid-row',
// Additional TR element class when a grid row has focus
gridRowFocusedClass: 'data-grid-row-focused',
// General TH and TD element class for the grid
gridCellClass: 'data-grid-cell',
// Additional TD element class when a grid cell is set to Readonly
cellReadOnlyClass: 'data-grid-cell-readonly',
// Additional TD element class when a grid cell has focus
gridCellFocusedClass: 'data-grid-cell-focused',
// General STRONG element class for grid text cells
gridCellLinkClass: 'data-grid-cell-link',
// General STRONG element class for grid toggle cells
gridCellToggleClass: 'data-grid-cell-toggle',
// Additional STRONG element class for grid toggle cells when set to True
gridCellTogglePressedClass: 'data-grid-cell-toggle-pressed',
// General DIV and INPUT element class for grid edit field popups
editFieldClass: 'data-grid-cell-link-edit'
});

// Get the total number of rows in the grid instance

grid.totalRows();

// Pagination: Get the current page number

grid.currentPage();

// Pagination: Get the total number of pages in the grid instance

grid.totalPages();

// Set a page index changed listener to execute every time the current or total number of pages changes within the grid instance

grid.setPageIndexChangeListener(function(currentPage, totalPages, gridInstance){
// Do something
});

// Open a specific page without rerendering the parent grid

grid.openPage(number);

// Open the first page in the grid

grid.firstPage();

// Open the previous page in the grid

grid.prevPage();

// Open the next page in the grid

grid.nextPage();

// Open the last page in the grid

grid.lastPage();

// Execute listener every time a grid object is opened in the DOM

grid.setOpenListener(function(container, dc, gridInstance){
// 'dc' is the grid AccDC Object
});

// Execute listener every time a grid object is closed in the DOM

grid.setCloseListener(function(container, dc, gridInstance){
// 'dc' is the grid AccDC Object
});

// Execute listener every time a grid TR object is rendered in the DOM

grid.setAddListener(function(rowObject, dc, gridInstance){
// rowObject.id is the unique row ID as passed in grid.add()
// rowObject.rowNode is the rendered TR DOM node
// 'dc' is the grid AccDC Object
});

// Execute listener every time a grid TR object is removed from the DOM

grid.setRemoveListener(function(rowObject, dc, gridInstance){
// rowObject.id is the unique row ID as passed in grid.add()
// rowObject.rowNode is the rendered TR DOM node
// 'dc' is the grid AccDC Object
});

// Execute listener every time a grid TD node receives focus

grid.setMoveListener(function(newCell, oldCell, dc, gridInstance){
// 'newCell' is the TD DOM node that has been given focus
// 'oldCell' is the TD DOM node that used to have focus
// 'dc' is the grid AccDC Object
});

// Assign a character maxLength value for the edit text popup

grid.setEditMaxLength(255);

// Set a positioning override for the placement of the edit text popup
// Must return an object literal that contains the following properties: top, left, width, height

grid.setEditOffset(function(cellObject){
// cellObject.cellNode is the DOM node for the TD element that has focus
// cellObject.cellNodeA is the DOM node for the STRONG element contained within the TD element that has focus
var o = $A.xOffset(cellObject.cellNodeA); // Get top and left properties
o.height = $A.xHeight(cellObject.cellNodeA); // Add height
o.width = $A.xWidth(cellObject.cellNodeA); // Add width
return o;
});

// Set an edit field load listener to execute every time the string edit field is opened for a cell

grid.setEditLoadListener(function(editFieldNode, cellObject){
// editFieldNode is the rendered edit Input element
// cellObject is the cellObject that was triggered, providing access to all data associated with that cell
// E.G
// cellObject.cellNode is the actionable TD node that was activated
// cellObject.value is the original value of the cell
// cellObject.id is the column id for that cell
// cellObject.rowObject.id is the unique row ID for that row
// cellObject.rowObject.rowNode is the TR node for that row
});

// Set the value of a specific cell in the grid using its unique row ID and column ID as X Y coordinates
// Row ID refers to the same value stored within rowObject.id, and col ID refers to the same value stored within cellObject.id

grid.setValue('rowID', 'colID', value);

// Get the value of a specific cell in the grid using its unique row ID and column ID as X Y coordinates
// Row ID refers to the same value stored within rowObject.id, and col ID refers to the same value stored within cellObject.id

grid.getValue('rowID', 'colID');

// Programmatically store data within a specific cell in the grid using its unique row ID and column ID as X Y coordinates
// Row ID refers to the same value stored within rowObject.id, and col ID refers to the same value stored within cellObject.id
// When set, the data is alternatively available within the cellObject via cellObject.data['keyname']

grid.setData('rowID', 'colID', 'keyname', data);

// Programmatically retrieve data within a specific cell in the grid using its unique row ID and column ID as X Y coordinates
// Row ID refers to the same value stored within rowObject.id, and col ID refers to the same value stored within cellObject.id

grid.getData('rowID', 'colID', 'keyname');

// Open a grid instance and render a page within the DOM
// If no page number is passed as the first parameter, then 1 is inferred by default

grid.open();
// Or to open a specific page
grid.open(number);

// Close a grid instance and remove it from the DOM
// This will not delete any of the cached rowObjects that were added via grid.add()

grid.close();

// Programmatically set focus to the grid
// This always references the TD node that is currently active

grid.focus();

// Access the grid AccDC Object instance for optional modification

var dc = getAccDCObject();

// Access the container DOM node

var myContainer = grid.container;
</pre>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample data grids in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what they look like.</p>
                                <p> You can change the styling however you wish to fit the layout of any UI, and the data grids will still be accessible to both
                                    screen reader and keyboard only users regardless.</p>
                                <p> Simply ensure that sufficient color contrast is observed for low vision users, and a focus outline clearly shows which elements
                                    have focus, and your newly styled data grid will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Implementation Notes</span></h4>
                                </div>
                                <h5> Notes about keyboard interactivity</h5>
                                <p> A focusable ARIA Grid is a complicated concept, and there are only a certain number of keyboard commands
                                    available that don't directly conflict with the screen reader or browser. The following keyboard commands should not be used for this reason:</p>
                                <ul>
                                    <li> <kbd>Control</kbd>+<kbd>PageUp/PageDown</kbd></kbd>: Is automatically intercepted by JAWS and never gets passed through to the grid.</li>
                                    <li> <kbd>Control</kbd>+<kbd>Up/Down</kbd></kbd>: Is automatically intercepted by JAWS and never gets passed through to the grid.</li>
                                    <li> <kbd>Alt</kbd>+<kbd>Home</kbd></kbd>: Automatically loads the home page in the browser.</li>
                                    <li> <kbd>Alt</kbd>+<kbd>Left/Right</kbd></kbd>: Automatically activates the Back and Forward buttons in the browser.</li>
                                </ul>
                                <h5> Notes about mouse interactivity</h5>
                                <p> When activating a selectable row or editable cell using the mouse, double click must be used. If a single click is used to0
                                    invoke this functionality, it will conflict with screen reader behavior. For example, when browsing the page using JAWS in
                                    Virtual Cursor mode, it is necessary to press Enter on the desired grid cell to enter Applications Mode.
                                    When JAWS does this, it automatically activates the click event, which automatically invokes selection or editing for that cell.</p>
                                <p>When double click is used instead, this conflict does not occur. Single tapping of a selectable or editable cell using a
                                    touch screen device however, works using one click.</p>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" ><button id="date-pickers">ARIA Date Pickers</button></h3>
                            <div class="content hdn">
                                <p> The ARIA Date Picker is a complex control type with a simple implementation.</p>
                                <p> <strong>Expected behaviors:</strong> The associated INPUT field should not include readonly, an external triggering element should activate the
                                    date picker, the arrow keys should move between calendar cells and the calendar should scroll automatically between months,
                                    <kbd>PageUp/PageDown</kbd> should switch between months, <kbd><kbd>Alt</kbd>+<kbd>PageUp/PageDown</kbd></kbd> should switch between years,
                                    <kbd>Enter</kbd> should activate the selected date,
                                    and pressing <kbd>Escape</kbd> or <kbd>Tab</kbd> should close the calendar and return focus to the triggering element.</p>
                                <p> The Calendar Module automates these processes by adding all related event handlers and managing all related rendering procedures.</p>
                                <ul>
                                    <li> Basic compound component date picker control with ARIA <code>role=button, role=link, aria-label, role=dialog</code>, and <code>role=application</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Date Pickers/ARIA Date Picker (Basic)/demo.htm">ARIA Date Picker (Basic)</a>
                                    </li>
                                    <li> Basic Editable Auto Open compound component date picker control with ARIA <code>role=button, role=link, aria-label, role=dialog</code>, and <code>role=application</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Date Pickers/ARIA Date Picker (Basic, Auto Open)/demo.htm">ARIA Date Picker (Basic, Auto Open)</a>
                                    </li>
                                    <li> Basic ReadOnly Auto Open compound component date picker control with ARIA <code>role=button, role=link, aria-label, role=dialog</code>, and <code>role=application</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Date Pickers/ARIA Date Picker (Basic, ReadOnly Auto Open plus Disabled Ranges)/demo.htm">ARIA Date Picker (Basic, ReadOnly Auto Open plus Disabled Ranges)</a>
                                    </li>
                                    <li> Disabled date range compound component date picker control with ARIA <code>role=button, role=link, aria-label, aria-disabled, role=dialog</code>, and <code>role=application</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Date Pickers/ARIA Date Picker (with Disabled Weekends)/demo.htm">ARIA Date Picker (with Disabled Weekends)</a>
                                    </li>
                                    <li> Comment enabled compound component date picker control with ARIA <code>role=button, role=link, aria-label, role=dialog</code>, and <code>role=application</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Date Pickers/ARIA Date Picker (with Tooltip Comments)/demo.htm">ARIA Date Picker (with Tooltip Comments)</a>
                                    </li>
                                    <li> Editable comments compound component date picker control with ARIA <code>role=button, role=link, aria-label, role=dialog</code>, and <code>role=application</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Date Pickers/ARIA Date Picker (with Editable Tooltip Comments)/demo.htm">ARIA Date Picker (with Editable Tooltip Comments)</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <pre class="brush: html;">
&lt;input type="text" id="dateInputId" title="Label text if no Label element is associated" />

&lt;a href="#" id="datePickerId"> Calendar Icon Name &lt;/a>
</pre>
                                <h5>Form field HTML markup requirements:</h5>
                                <ul>
                                    <li> The INPUT field must not be set to readonly, so that users can manually edit date string entries.</li>
                                    <li> Form field constraints, such as the desired date string format, must also be included with the form field label to maximize clarity. E.G "MM/DD/YYYY"</li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
$A.setCalendar( 'UniqueCalendarId' , $A.getEl('datePickerId'), $A.getEl('dateInputId'), EnableComments&lt;true/false> ,
clickHandlerCallbackFunction(ev, dc, targetElementObj){
// Configure date string and save it within targetElementObj
targetElementObj.value = dc.range.wDays[dc.range.current.wDay].lng + ' ' + dc.range[dc.range.current.month].name + ' '
+ dc.range.current.mDay + ', ' + dc.range.current.year;
// Then close the calendar
dc.close();
}, {
// Configuration key / value map overrides
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter must be unique for every calendar declaration, since this is registered as the ID of the Calendar AccDC Object when instantiated.</p>
                                    </li>
                                    <li>
                                        <p> The second parameter is the DOM object for the triggering element.</p>
                                    </li>
                                    <li>
                                        <p> The third parameter is the DOM object for the target INPUT element.</p>
                                    </li>
                                    <li>
                                        <p> The fourth parameter is a Boolean that determines whether comments will be displayed when associated with dates. False is set by default if no value is specified.
                                        </p>
                                    </li>
                                    <li>
                                        <p> The fifth parameter specifies a callback function where the returned date string can be customized.</p>
                                    </li>
                                    <li>
                                        <p> The sixth parameter is a key / value map where overrides can be declared to further customize functionality.</p>
                                        <p> <strong>Example:</strong></p>
                                        <pre class="brush: js;">
{

    // Configure optional overrides

    // If not included, all of the below values are set by default

    // Set role name text for screen reader users
    role: 'Calendar',

    // Short help text message that is automatically announced to screen reader users when the calendar first opens.
    helpTextShort: 'Press H for help.',

    // Set screen reader text to automatically be announced when H is pressed.
    // This is also set within the data-helptext attribute in the top level div element of the calendar for CSS pseudo element referencing via attr(data-helptext) for sighted keyboard only users if desired.
    helpText: 'Press the arrow keys to navigate by day, PageUp and PageDown to navigate by month, Alt+PageUp and Alt+PageDown to navigate by year, or Escape to cancel.',

    // Set tooltip text
    tooltipTxt: 'Press Escape to cancel',
    disabledTxt: 'Disabled',
    markedTxt: 'Selected',
    commentedTxt: 'Has Comment',
    prevTxt: 'Previous',
    nextTxt: 'Next',
    monthTxt: 'Month',
    yearTxt: 'Year',

    // Set month names
    months: [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December'
    ],

    // Set short and long weekday names
    days: [
        {
            s: 'S',
            l: 'Sunday'
        },
        {
            s: 'M',
            l: 'Monday'
        },
        {
            s: 'T',
            l: 'Tuesday'
        },
        {
            s: 'W',
            l: 'Wednesday'
        },
        {
            s: 'T',
            l: 'Thursday'
        },
        {
            s: 'F',
            l: 'Friday'
        },
        {
            s: 'S',
            l: 'Saturday'
        }
    ],

    // Switch the behaviour when the PageUp or PageDown keys are pressed to a "natural" behaviour
    // (PageUp goes to previous month, PageDown goes to next month)
    pageUpDownNatural: false,

    // Append a "dayToday" CSS class to the current day cell element - this allows styling to be targeted to this specific element
    highlightToday: true,

    // Fill in the day cells outside of the current month so that the calendar grid is always filled with day cells
    drawFullCalendar: true,

    // Run custom functions at the end of the code within the following component functions.
    // Receives a single parameter "dc", which provides access to the Datepicker object.
    runBefore: function (dc) {
        console.log('runBefore');
        console.log(dc);
    },
    runAfterClose: function (dc) {
        console.log('runAfterClose');
        console.log(dc);
    },

    // Override the character used on the month / year change buttons
    leftButtonYearText: '&lt;',
    rightButtonYearText: '&gt;',
    leftButtonMonthText: '&lt;',
    rightButtonMonthText: '&gt;',

    // Specify if the calendar should open when the input field receives focus.
    // If true, the Down arrow must be pressed to move focus from the input field into the calendar for manual traversal, and Escape will collapse the calendar.
    openOnFocus: false,
    openOnFocusHelpText: 'Press Down arrow to browse the calendar, or Escape to close.',

    // Display a Close button
    showEscBtn: true,
    escBtnName: 'Close',
    escBtnIcon: '&times;',

    // Set specific start / end boundaries of a date range. Can be Date objects (absolute boundaries), or positive/negative integers (relative boundaries).
    // If undefined, no date range will be enforced.
    minDate: undefined,
    maxDate: undefined,

    // Using a token system, set a specific date string format to be used when setting the selected value into the calendar input box
    // 'YYYY': 4 digit year, 2019
    // 'MMMM': Full name of month, January, etc.
    // 'dddd': Full name of weekday, Monday, etc.
    // 'MM': 2 digit month, 01, etc.
    // 'DD': 2 digit day, 01, etc.
    // 'Do': getDateOrdinalSuffix, 1st, 2nd, 3rd.
    // 'M': 1 or 2 digit month, 1 through 12
    // 'D': 1 or 2 digit day, 1 through 31.

    inputDateFormat: 'MM/DD/YYYY',

    // Using a token system, set a specific date string format to be read out to screen reader users
    audibleDateFormat: 'D, dddd MMMM YYYY',

    // Allow a date that isn't today to be set as the initial date. If unset, this value is initialised to today's date
    initialDate: new Date(),

    // Disable weekdays from selection
    disableWeekdays: false,

    // Disable weekends from selection
    disableWeekends: false,

    // Set positive or negative offset for differing column arrangements, or 0 for none
    wdOffset: 0,

    // Set CSS positioning calculation for the calendar
    // Set to 0 to disable auto positioning
    autoPosition: 9,

    // Customize with positive or negative offsets
    offsetTop: 0,
    offsetLeft: 0,

    // Set class for the calendar container
    className: 'calendar',

    // Set custom CSS styling for the calendar container when rendered
    cssObj: {
        position: 'absolute',
        zIndex: 1
    },

    // Choose a different insertion point in the DOM; must be a DOM node; defaults to the triggering element if not specified.
    targetObj: null,

    // Choose a different focus element in the DOM for CSS autoPositioning; may be a DOM node or CSS Selector; defaults to the triggering element if not specified.
    posAnchor: '',

    // Reset date to the current calendar date every time the date picker opens
    resetCurrent: false,

    // Configure the Comments tooltip pane
    comments: {
        role: 'Comment',
        autoPosition: 1,
        offsetTop: 0,
        offsetLeft: 0,
        className: 'commentTooltip'
    },

    // Configure the editor form pane
    editor: {
        // Choose to show the form, defaults to false
        show: false,
        // Set the section name, and the Edit button text
        role: 'Edit',
        autoPosition: 6,
        offsetTop: 0,
        offsetLeft: 0,
        className: 'commentAdd',
        // Set the Save button text
        action1: 'Save'
    },

    // Condense the year display by removing the year nav buttons. Requires the Calendar Module version 1.25 or greater.
    condenseYear: false,

    // Manually configure the calendar using AJAX or a customization script
    ajax: function(dc, save){
        // 'save' is true when closing the Editor, false otherwise for fetching content when the calendar is opened.

        // If save is false, execute load script

        if (!save){
            // Optionally load custom values into the dc.range associative array.

            // And optionally prevent this script from running again
            // dc.stopAjax = true;

            // Then open the calendar after processing is finished
            dc.open();
        }

        else{
            // Otherwise do something with the newly saved values within the dc.range associative array.
        }
    }
}
</pre>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> Every Date Picker is registered as an AccDC Object, the ID of which matches the ID string declared in the first parameter of the invocation statement.</p>
                                <p> This also makes it possible to control the calendar programmatically using JavaScript, like so:</p>
                                <pre class="brush: js;">
var dc = $A.reg['UniqueCalendarId'];

// Which you can then open

dc.open();

// Or close

dc.close();

// All other AccDC API properties and methods can be applied here as well.
</pre>
                                <div class="hd">
                                    <h4><span> Triggering Element Requirements</span></h4>
                                </div>
                                <p> Regarding the triggering element, you should always use an active element for this purpose to ensure accessibility for both
                                    screen reader and keyboard only users.</p>
                                <p> Within the Coding Arena samples, these are standard image links (A tags with an Href attribute and an embedded IMG tag with
                                    an informative Alt attribute). However, you can use whatever type of triggering element you wish, a standard link, button, or
                                    image link, with any type of styling. There must be an active element as a triggering element though, to ensure accessibility.</p>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample calendars in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what they look like.</p>
                                <p> You can change the styling however you wish to fit the layout of any UI, and the calendars will still be accessible to both screen
                                    reader and keyboard only users regardless.</p>
                                <p> Simply ensure that sufficient color contrast is observed for low vision users, and a focus outline clearly shows which elements
                                    have focus, and your newly styled calendar will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Bootstrapping</span></h4>
                                </div>
                                <p> Bootstrapping is designed to handle common control types that span multiple pages with similar setup configurations.</p>
                                <p> The calendars within the Bootstrap folders are configured using HTML5 <code>"data-"</code> attributes within the HTML markup.</p>
                                <p> When the Bootstrap Module (<em>"accdc_bootstrap.js"</em>) is executed, it parses the newly loaded DOM, recognizes the class <code>accCalendar</code>,
                                    then configures the same module declaration as previously described using these HTML5 attributes.</p>
                                <p> <strong>Available HTML5 attributes for the triggering element:</strong></p>
                                <ul>
                                    <li> <strong>data-name</strong> : The name value for the calendar picker. The Name attribute of the accompanying text field must match the <code>data-name</code>
                                        attribute value. The selected date will then be inserted into the text field. (Must be on the triggering element.)</li>
                                </ul>
                                <p> Additional HTML5 attributes can be added to enhance functionality by editing the file <em>"accdc_bootstrap.js"</em>.</p>
                                <p> <strong>Required attributes:</strong></p>
                                <ul>
                                    <li> <strong>name="<i>whatever</i>"</strong> : The Input field name attribute that matches the value of <code>data-name</code>.
                                        (Must be on the Input field with <code>type="text"</code>)</li>
                                    <li> <strong>class="accCalendar"</strong> : The bootstrap class name that specifies an accessible calendar picker. (Must be on the triggering element.)</li>
                                    <li> <strong>id</strong> : The unique ID of the element. This value is also registered as the ID of the calendar AccDC Object, making it possible to
                                        invoke the object programmatically. (Must be on the triggering element.)</li>
                                </ul>
                                <div class="hd">
                                    <h4><span> Implementation Notes</span></h4>
                                </div>
                                <p> The date string format is configurable within the callback function, or within the <em>"accdc_bootstrap.js"</em> module if bootstrapped.</p>
                                <p> <strong>The variables to reference are as follows:</strong></p>
                                <pre class="brush: js;">
var weekDay = dc.range.wDays[dc.range.current.wDay].lng; // 'Friday'

var monthName = dc.range[dc.range.current.month].name; // 'November'
// or
(dc.range.current.month+1) = numerical month string

var monthDay = dc.range.current.mDay; // '30'

var year = dc.range.current.year; // '2012'
</pre>
                                <p> The returned values will reflect the date selected.</p>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control" ><button id="listboxes">ARIA Listboxes</button></h3>
                            <div class="content hdn">
                                <p> The ARIA Listbox is a simple concept, turned into a powerful component.</p>
                                <p> Expected behaviors: ARIA Listboxes should only receive one tab stop, the Up/Down/Home/End keys should move
                                    focus appropriately, and every listbox and listbox option should be explicitly labeled.</p>
                                <p> The Listbox Module automates these processes by adding all related event handlers and managing all related rendering procedures.</p>
                                <ul>
                                    <li> Basic simulated Listbox control with ARIA <code>role=listbox, role=option, aria-posinset, aria-setsize, aria-selected, aria-label</code>, and <code>aria-owns</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Listboxes/Standard/demo.htm"> Coding Arena/ARIA Listboxes/Standard/demo.htm</a>
                                    </li>
                                    <li> Multiselectable simulated Listbox control with ARIA <code>role=listbox, role=option, aria-posinset, aria-setsize, aria-selected, aria-label, aria-multiselectable</code>, and <code>aria-owns</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Listboxes/Multiselect/demo.htm"> Coding Arena/ARIA Listboxes/Multiselect/demo.htm</a>
                                    </li>
                                    <li> Basic popup simulated Listbox control with ARIA <code>role=listbox, role=option, aria-posinset, aria-setsize, aria-selected, aria-label</code>, and <code>aria-owns</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Listboxes/Popup Listbox (Internal Content)/demo.htm"> Coding Arena/ARIA Listboxes/Popup Listbox (Internal Content)/demo.htm</a>
                                    </li>
                                    <li> Dynamic multiselectable simulated Listbox control with ARIA <code>role=listbox, role=option, aria-posinset, aria-setsize, aria-selected, aria-label, aria-multiselectable</code>, and <code>aria-owns</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Listboxes/Redistributable/demo.htm"> Coding Arena/ARIA Listboxes/Redistributable/demo.htm</a>
                                    </li>
                                    <li> Re-sortable simulated Listbox control with ARIA <code>role=listbox, role=option, aria-posinset, aria-setsize, aria-selected, aria-label, aria-owns, aria-grabbed</code>, and <code>aria-dropeffect</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Listboxes/Sortable/demo.htm"> Coding Arena/ARIA Listboxes/Sortable/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <pre class="brush: html;">
&lt;ul role="listbox" id="uniqueId1" >
&lt;li>
&lt;a href="#" role="option" id="uniqueId2" >
&lt;span class="lbl"> Option One Name &lt;/span>
&lt;/a>
&lt;/li>
&lt;li>
&lt;a href="#" role="option" id="uniqueId3" >
&lt;span class="lbl"> Option Two Name &lt;/span>
&lt;/a>
&lt;/li>
&lt;li>
&lt;a href="#" role="option" id="uniqueId4" >
&lt;span class="lbl"> Option Three Name &lt;/span>
&lt;/a>
&lt;/li>
&lt;/ul>
</pre>
                                <p> <strong>Required attributes:</strong></p>
                                <ul>
                                    <li> <strong>role="listbox"</strong> : Specifies a Listbox group container for screen reader users.
                                        (Must be on the container element that surrounds the list items.)</li>
                                    <li> <strong>role="option"</strong> : Specifies a Listbox Option node for screen reader users.
                                        (Must be on the keyboard focusable link elements that comprise the listbox option elements.)</li>
                                    <li> <strong>ID</strong> : Specifies unique ID attribute values for both the listbox container element and all list option links.</li>
                                    <li> <strong>Href</strong> : Included within every list option A tag, this ensures keyboard accessibility.</li>
                                </ul>
                                <p> <strong>The following attributes are handled automatically by the Listbox Module:</strong></p>
                                <ul>
                                    <li> <code>tabindex</code></li>
                                    <li> <code>aria-label</code></li>
                                    <li> <code>aria-owns</code></li>
                                    <li> <code>aria-setsize</code></li>
                                    <li> <code>aria-posinset</code></li>
                                    <li> <code>aria-selected</code></li>
                                    <li> <code>aria-checked</code> (if applicable)</li>
                                    <li> <code>aria-grabbed</code> (if applicable)</li>
                                    <li> <code>aria-dropeffect</code> (if applicable)</li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
var myListbox = new $A.Listbox( $A.getEl('uniqueId1'), {
// Configuration key / value mappings
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter is the DOM node for the listbox container element that includes <code>role="listbox"</code>.</p>
                                    </li>
                                    <li>
                                        <p> The second parameter is the object literal used to configure listbox functionality using key / value map overrides.</p>
                                        <p> <strong>Example:</strong></p>
                                        <pre class="brush: js;">
{

// Set the initial list option node to be selected
defaultIndex: 0,

// Set a label for screen reader users
label: 'Unique field label text',

// Choose whether the Listbox is single or multiselect (multiselect is ignored when isSortable=true)
isMultiselect: false,

// Choose whether the Listbox is sortable
isSortable: false,

// Choose whether the Delete key can be used to remove list option nodes
allowDelete: false,

// Help messages that are announced to screen reader users when isSortable=true
grabInstruct: 'Press Space to grab',
dropInstruct: 'Press Space to drop',
grabMsg: 'Grabbed',
dropMsg: 'Moved',
cancelDrop: 'Grab canceled',

// Do stuff whenever the selection changes
callback: function(optionNode, optionsArray){
// this.val() returns the current value of the Listbox control, a string if single-select or an array of strings if multiselect
}

}
</pre>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> Since the Listbox control is an instantiated object, all of the following public properties and methods are available:</p>
                                <pre class="brush: js;">
myListbox.container; // The Listbox DOM node for the element with role="listbox"

myListbox.options; // The array of list option DOM nodes that contain role="option"

myListbox.index; // The array index number for the currently selected list option element (relative to myListbox.options)

myListbox.grabbed; // The ID string value of the currently grabbed list option DOM node (when isSortable=true)

myListbox.val(); // Returns the current value of the Listbox control: An ID string when the listbox is single-select; an array of ID strings when the Listbox is a multiselect.

myListbox.val(indexValue); // Sets the current Listbox selection to the specified array index value (relative to myListbox.options)

myListbox.val('IdString'); // Sets the current Listbox selection to the specified list option DOM node that matches this ID (contained within myListbox.options)

myListbox.val(['IdString1', 'IdString2']); // Sets the current Listbox selection to all of the list option DOM nodes that match the ID strings in the array (when isMultiselect=true and contained within myListbox.options)

myListbox.val([]); // Clears all previously 'grabbed' or 'checked' list options if either isSortable or isMultiselect is set to True.

myListbox.rem(indexValue); // Removes the list option DOM node from myListbox.options at the specified array index value, and returns the removed A tag DOM node.

myListbox.rem('IdString'); // Removes the list option DOM node from myListbox.options by matching the ID, and returns the removed A tag DOM node.

myListbox.rem(['IdString1', 'IdString2']); // Removes the array of list option DOM nodes from myListbox.options by matching the IDs, and returns the removed A tag DOM nodes in an array.

myListbox.add(A-TagDOM-Node); // Adds a new list option to the Listbox. (Must be an A tag DOM node that includes a unique ID attribute value, an Href attribute for keyboard accessibility, and innerText to set the screen reader accessible label text)

myListbox.add([A-TagDOM-Node1, A-TagDOM-Node2]); // Adds an array of new list options to the Listbox. (Must include A tag DOM nodes that include a unique ID attribute value, an Href attribute for keyboard accessibility, and innerText to set the screen reader accessible label text)

myListbox.activate.apply(listOptionDOM-Node); // Programmatically activate the 'grab' or 'check' functionality for a specific list option DOM node (within myListbox.options when either isSortable or isMultiselect is set to True). The single parameter for this statement must consist of the A tag DOM node for the list option that you wish to activate. This simply performs a toggle action on the specified option, and does not specify a particular state.
</pre>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample listboxes in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what
                                    they look like. This is demonstrated within the "Shell" folders, where there is no CSS styling for the listbox. This is also
                                    useful as a practice template for trying out different styling designs with custom content.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a focus
                                    outline clearly shows which elements have focus, and your newly styled listbox will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Implementation Notes</span></h4>
                                </div>
                                <p> All list option elements must be marked up as links (A tags with an Href attribute) to ensure backwards compatibility
                                    and graceful degradation. These are the only elements that will receive keyboard focus.</p>
                                <p> All list option elements, as well as the listbox container, must include unique ID attribute values.</p>
                                <p> In the case of the list option elements, the ID is used as the value of the Listbox control, so when an item is activated,
                                    the value of the Listbox will be returned as the ID value for the active A tag.
                                    For standard Listboxes, this is the ID of the currently selected list option as a string. E.G "uniqueId2"
                                    For Multiselect Listboxes, This is an array of the ID strings of the currently checked list options. E.G [<em>"uniqueId2", "uniqueId4"</em>]</p>
                                <p> An innerText label for each A tag must be included to ensure accessibility for screen reader users, though you
                                    may position this text offscreen to hide it visually if desired.</p>
                                <p> Alternatively, you may also include IMG tags within the A tags to form image links. When an IMG tag includes an
                                    informative Alt attribute, this text is also included as part of the list option label for screen reader users.</p>
                                <p> If a background image is used instead however, then there must be an innerText label, even if positioned
                                    offscreen, to ensure accessibility for screen reader users.</p>
                                <p> All list option label text must be unique, to prevent confusion for screen reader users.</p>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" ><button id="menus">ARIA Menus</button></h3>
                            <div class="content hdn">
                                <p> An ARIA Menu is a simple control type that can easily be made accessible.</p>
                                <p> <strong>Expected behaviors:</strong> A keyboard accessible mechanism opens the menu, the arrow keys are used to browse
                                    available menu items or open and close submenus, pressing Tab will close all open menus, and pressing Escape will close the currently open menu.</p>
                                <p> ARIA menus can be implemented in two ways, horizontally or vertically. This has nothing to do with what they look like, since the CSS styling can be set to whatever you like,
                                    but rather, refers to the keyboard interaction model for each menu.</p>
                                <p> A vertical menu is navigated using the <kbd class="up">Up</kbd> and <kbd class="down">Down</kbd> arrow keys to scroll through menu items,
                                    and <kbd class="left">Left</kbd> and <kbd class="right">Right</kbd> are used to close or open submenus.</p>
                                <p> A horizontal menu is navigated using the <kbd class="left">Left</kbd> and <kbd class="right">Right</kbd> arrow keys to scroll through menu items,
                                    and <kbd class="up">Up</kbd> and <kbd class="down">Down</kbd> are used to close or open submenus.</p>
                                <p> You can optionally set different interaction models for specific menus or submenus depending on how the
                                    menu is visually presented, so that the behavior properly fits the UI design.</p>
                                <p> Additionally, a menu may be triggered using either the left or right click, with accompanying behaviors for each.</p>
                                <p> A left click menu often uses a link or button as the triggering element, and also supports the <kbd class="down">Down</kbd> arrow, <kbd>Space</kbd>, and <kbd>Enter</kbd>
                                    keys to invoke the menu from the keyboard.</p>
                                <p> For more complex controls, such as interactive ARIA Widgets that include their own functionality attached to the arrow keys
                                    and the left click handler, the right click menu may be used, which also supports the <kbd><kbd>Shift</kbd>+<kbd>F10</kbd></kbd> and Application keystrokes for keyboard support.</p>
                                <p> The right click menu may also be used on the Body element to present a customized page wide context menu that has no dedicated triggering element.</p>
                                <p> The Menu Module automates these processes by adding all related event handlers and managing all related rendering procedures.</p>
                                <ul>
                                    <li> Button: Basic left-click horizontal popup Menu control with ARIA <code>role=menubar, role=menuitem, aria-posinset, aria-setsize, aria-haspopup, aria-owns</code>, and <code>role=application</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Menus/Horizontal (Internal Content)/demo.htm"> Coding Arena/ARIA Menus/Horizontal (Internal Content)/demo.htm</a>
                                    </li>
                                    <li> Button: Basic left-click vertical popup Menu control with ARIA <code>role=menu, role=menuitem, aria-posinset, aria-setsize, aria-haspopup, aria-owns</code>, and <code>role=application</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Menus/Vertical (Internal Content)/demo.htm"> Coding Arena/ARIA Menus/Vertical (Internal Content)/demo.htm</a>
                                    </li>
                                    <li> Body: Basic page wide right-click Popup Menu control with ARIA <code>role=menu, role=menuitem, aria-posinset, aria-setsize, aria-haspopup, aria-owns</code>, and <code>role=application</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Menus/Variation Body Element With Right Click/demo.htm"> Coding Arena/ARIA Menus/Variation Body Element With Right Click/demo.htm</a>
                                    </li>
                                    <li> ARIA Textbox: Basic right-click Popup Menu control with ARIA <code>role=menu, role=menuitem, aria-posinset, aria-setsize, aria-haspopup, aria-owns</code>, and <code>role=application</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Menus/Variation Simulated Edit With Right Click/demo.htm"> Coding Arena/ARIA Menus/Variation Simulated Edit With Right Click/demo.htm</a>
                                    </li>
                                    <li> Standard Textareas: Basic right-click Popup Menu control with ARIA <code>role=menu, role=menuitem, aria-posinset, aria-setsize, aria-haspopup, aria-owns</code>, and <code>role=application</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Menus/Variation Standard Edits With Right Click/demo.htm"> Coding Arena/ARIA Menus/Variation Standard Edits With Right Click/demo.htm</a>
                                    </li>
                                    <li> ARIA Tabs: Complex right-click Popup Menu control with ARIA <code>role=menu, role=menuitem, aria-posinset, aria-setsize, aria-haspopup, aria-owns</code>, and <code>role=application</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Menus/Variation ARIA Tabs With Right Click/demo.htm"> Coding Arena/ARIA Menus/Variation ARIA Tabs With Right Click/demo.htm</a>
                                    </li>
                                    <li> ARIA Tree: Complex right-click Popup Menu control with ARIA <code>role=menu, role=menuitem, aria-posinset, aria-setsize, aria-haspopup, aria-owns</code>, and <code>role=application</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Menus/Variation ARIA Tree With Right Click/demo.htm"> Coding Arena/ARIA Menus/Variation ARIA Tree With Right Click/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <p> <strong>Basic menu structure with no submenus:</strong></p>
                                <pre class="brush: html;">
&lt;ol class="menu" id="uniqueId1">
&lt;li>
&lt;a href="#" class="link" id="uniqueId2">
Menu Item One Name
&lt;/a>
&lt;/li>
&lt;li>
&lt;a href="#" class="link" id="uniqueId3">
Menu Item Two Name
&lt;/a>
&lt;/li>
&lt;li>
&lt;a href="#" class="link" id="uniqueId4">
Menu Item Three Name
&lt;/a>
&lt;/li>
&lt;/ol>
</pre>
                                <p> <strong>Basic menu structure with nested submenus:</strong></p>
                                <pre class="brush: html;">
&lt;ol class="menu" id="uniqueId1">
&lt;li>

&lt;a href="#" class="submenu" id="-uniqueId2">
Subfolder Menu Item One Name (Level 1)
&lt;/a>

&lt;ol class="menu" id="uniqueId1-uniqueId2">
&lt;li>

&lt;a href="#" class="submenu" id="-uniqueId2-1">
Subfolder Submenu Item One Name (Level 2)
&lt;/a>

&lt;ol class="menu" id="uniqueId1-uniqueId2-uniqueId2-1">
&lt;li>

&lt;a href="#" class="link" id="uniqueId2-1-1">
Submenu Item One Name (Level 3)
&lt;/a>

&lt;/li>
&lt;/ol>

&lt;/li>
&lt;li>

&lt;a href="#" class="link" id="uniqueId2-2">
Submenu Item Two Name (Level 2)
&lt;/a>

&lt;/li>
&lt;/ol>

&lt;/li>
&lt;li>

&lt;a href="#" class="link" id="uniqueId3">
Menu Item Two Name (Level 1)
&lt;/a>

&lt;/li>
&lt;/ol>
</pre>
                                <p> The HTML menu syntax is flexible, and may consist of UL tags, OL tags, DIV tags, or any other combination, as
                                    long as the container element includes a unique ID, as well as each menu item tag.</p>
                                <p> For simplicity, these have been marked up as list elements, which is generally preferable since it includes native
                                    screen reader support for nested lists. Also, the use of standard A tags with an Href attribute ensures keyboard
                                    accessibility across all Assistive Technologies for graceful degradation.</p>
                                <p> You may also use additional HTML markup within the menu item links for formatting purposes (such as SPAN tags), as
                                    long as you don't add additional active elements such as clickable images. The only actionable element should be the menu item link, and nothing else.</p>
                                <p> Submenus are mapped by combining the ID attribute value of the container element, with the ID attribute value of the
                                    submenu link. The two combined point to the full ID attribute value of the associated submenu container element.</p>
                                <p> For example, notice the ID value on the top level menu OL tag above is <code>id="uniqueId1"</code>, and the ID of the first Subfolder
                                    A tag within that structure is <code>id="-uniqueId2"</code>.</p>
                                <p> When you combine the two (<code>"uniqueId1-uniqueId2"</code>), notice that this directly points to the submenu OL tag as its ID attribute value.</p>
                                <p> You can experiment with this in the Coding Arena "Shell" folders, where the same code is used.</p>
                                <p> <strong>Important:</strong> Don't add any ARIA attributes to the markup, and don't add tabindex attributes.
                                    All of these are handled automatically when the menus are rendered.</p>
                                <p> If the menu constructs are contained within the same page, they must be contained within a container element that has an ID attribute.
                                    This is used by the setup function to confine the parsing query to this node only.</p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: html;">
&lt;div id="hiddenDivId" class="hidden">

&lt;ol class="menu" id="uniqueId1">
...
&lt;/ol>

&lt;/div>
</pre>
                                <p> <strong>The following attributes are handled automatically by the Menu Module:</strong></p>
                                <ul>
                                    <li> <code>role="menubar"</code> (horizontal)</li>
                                    <li> <code>role="menu"</code> (vertical)</li>
                                    <li> <code>aria-owns</code></li>
                                    <li> <code>tabindex</code></li>
                                    <li> <code>role="menuitem"</code></li>
                                    <li> <code>aria-posinset</code></li>
                                    <li> <code>aria-setsize</code></li>
                                    <li> <code>aria-haspopup</code></li>
                                </ul>
                                <p> HTML5 attributes that can optionally be added to the menu list container markup:</p>
                                <ul>
                                    <li> <strong>data-horizontal="true"/"false"</strong> : Sets or unsets a horizontal flyout menu where the Left and Right arrow keys will
                                        be used to navigate menu item nodes, and Up and Down will be used to close or open submenus. This temporarily overrides the interaction
                                        model set within the JavaScript declaration statement.</li>
                                    <li> <strong>data-offsetleft="number"</strong> : Specifies a positive or negative offsetLeft value that will be applied to the menu after it is rendered.</li>
                                    <li> <strong>data-offsettop="number"</strong> : Specifies a positive or negative offsetTop value that will be applied to the menu after it is rendered.</li>
                                    <li> <strong>data-autoposition="number between 0 and 12"</strong> : Specifies a custom <code>autoPosition</code> value that will control where the menu
                                        is visually positioned relative to the triggering element.

                                        <p> <strong>Value Definitions:</strong></p>
                                        <ul class="lsn">
                                            <li> 0: Disabled </li>
                                            <li> 1: Above/Center/Left Edge Aligned </li>
                                            <li> 2: Above/Right/Right Edge Aligned </li>
                                            <li> 3: Level/Right/Right Edge Aligned </li>
                                            <li> 4: Below/Right/Right Edge Aligned </li>
                                            <li> 5: Below/Center/Left Edge Aligned </li>
                                            <li> 6: Below/Left/Left Edge Aligned </li>
                                            <li> 7: Level/Left/Left Edge Aligned </li>
                                            <li> 8: Above/Left/Left Edge Aligned </li>
                                            <li> 9: Level/Center/Left Edge Aligned </li>
                                            <li> 10: Above/Center/Right Edge Aligned </li>
                                            <li> 11: Level/Center/Right Edge Aligned </li>
                                            <li> 12: Below/Center/Right Edge Aligned </li>
                                        </ul>
                                    </li>
                                </ul>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: html;">
&lt;ol class="menu" id="uniqueId1-uniqueId2-uniqueId2-1" data-horizontal="true" data-offsetleft="10" data-offsettop="-20" data-autoposition="3">
...
&lt;/ol>
</pre>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
$A.setMenu( 'CSS-SelectorForTriggeringElement' , 'LocalePathOrContainerID' , 'TopLevelMenuID' ,
callbackFunction(ev, dc){
// Do something every time a menu item link node is clicked
} , areMenusInTheSameDoc? , contextDOM-Node , {
// Configure key / value mapping overrides
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> <strong>Parameter 1: The triggering element CSS Selector</strong>
                                            <br />
                                            This points to the triggering element link or button that you want to use as the menu triggering element.
                                            For instance, the CSS Selector <code>"a.button"</code> points to the A tag with <code>class="button"</code> for this purpose.
                                            Multiple triggering elements that open the same menu may be specified using one CSS Selector.
                                        </p>
                                    </li>
                                    <li>
                                        <p> <strong>Parameter 2: The Locale Path or Container ID</strong>
                                            <br />
                                            When menus are contained within an external HTML file, this string value is the relative file path, such as <em>"files/menus.html"</em>.
                                            <br />
                                            When menus are contained within the same page, this string value is the ID attribute of the container
                                            element where all of the menu tags are located, such as <code>"hiddenDivId"</code>.
                                        </p>
                                    </li>
                                    <li>
                                        <p> <strong>Parameter 3: Top Level Menu ID</strong>
                                            <br />
                                            This string is the top level menu ID attribute value, such as <code>"uniqueId1"</code>, which is used to specify which menu will be opened first when the triggering element is activated.
                                        </p>
                                    </li>
                                    <li>
                                        <p> <strong>Parameter 4: The Callback Function</strong>
                                            <br />
                                            This is where you can set specific functionality to occur whenever a menu item link is activated, whether this
                                            is to navigate to another page, or to perform another client side action.
                                            <br />
                                            When declared, two arguments are passed to the function, first is the event object, and the second is the AccDC Object for the currently open menu object.
                                            <br />
                                            Using <code>this</code> within the function will reference the DOM node for the activated element, which is useful if mapping the ID attribute to a particular action.
                                            <code>dc.top.triggerObj</code> (where dc is the AccDC Object) provides the DOM node for the original triggering element that first opened the menu.
                                        </p>
                                    </li>
                                    <li>
                                        <p> <strong>Parameter 5: Are Menus within the Same Doc</strong>
                                            <br />
                                            A Boolean (true or false), that specifies whether the script should process the Locale parameter as an internal or external resource locator.
                                            <br />
                                            If menu markup is contained within an external HTML file, set this to false, otherwise set to true.
                                        </p>
                                    </li>
                                    <li>
                                        <p> <strong>Parameter 6: The Context DOM Node</strong>
                                            <br />
                                            This is the DOM node that will be used to confine the parsing query.
                                            <br />
                                            Typically this is set to document, since all of the IDs are relative to this location.
                                            <br />
                                            However, this parameter gives you the ability to reference iFrame documents instead if desired.
                                        </p>
                                    </li>
                                    <li>
                                        <p> <strong>Parameter 7: The Config Object</strong>
                                            <br />
                                            This is a key / value mapping of overrides that can be used to customize the element types of menu container and menu item elements, the class names for each, the default keyboard interaction model, the default auto positioning if desired, plus additional AccDC API overrides if desired.
                                        </p>
                                        <p> <strong>Example:</strong></p>
                                        <pre class="brush: js;">
{

// Enable right click functionality
// Automatically configures keyboard support using Shift+F10 and the Applications key
// When set to false, the Enter, Space, and Down arrow keys are supported in addition to onclick
rightClick: true, // Default: false

// Set the accessible help description that will be announced for screen reader users
// Only applicable when rightClick is set to true
// Will automatically clear on touch screen devices to prevent confusion
rightClickText: 'Press Shift+F10 or the Applications key to open the popup menu',

// Set the main container class, (which will surround the menu as a Div tag when rendered)
containerClass: 'menu',

// Specify the menu tag name in the markup
menuTag: 'ol',
// Specify the menu class name on the above tag in the markup
menuClass: 'menu',

// Specify the active element that will be used as each menu node
// Important, if nesting A tags within LIs, only the A tag should be used for this purpose
// Active elements should never be nested.
// The following tag will receive keyboard focus within the menu structure when using the arrow keys to navigate
// Event bindings are also tied to this tag
itemTag: 'a',

// Specify the class name that indicates when a menu item opens a submenu
folderClass: 'submenu',
// Specify the class name that indicates when a menu item is to be triggered directly
// This should not be the same as the folderClass declaration
linkClass: 'link',

// Specify if the menu is a flyout menu
// If true, the Left and Right arrow keys will scroll the open menu
// If false, the Up and Down arrow keys will scroll the open menu instead
horizontal: false,

// Set a default autoPosition value between 0 (disabled) and 12
autoPosition: 0,

// Set custom offset values to adjust the positioning calculation
// May return a positive or negative number
offsetLeft: function(dc){
return 0;
},
offsetTop: function(dc){
return 0;
},

overrides: {
// Additional AccDC API properties and methods can be applied here if desired.
}

}
</pre>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> Every menu instance is registered as an AccDC Object, the ID of which matches the ID attribute value on the menu container element.</p>
                                <p> This means that you can programmatically control each menu using JavaScript if desired, like so:</p>
                                <pre class="brush: js;">
// Get a reference to the top level Menu AccDC Object for the menu container with id="uniqueId"
var dc = $A.reg['uniqueId'];

// Now invoke the object
dc.open();

// Or close it
dc.close();

// All other AccDC API properties and methods can be applied here as well.
</pre>
                                <p> Additionally, when a menu is attached to a triggering element, the custom handler <code>popupmenu</code> is attached to that element.</p>
                                <p> To support both standard and touch device usage as part of responsive design, a specially displayed icon (typically
                                    referred to as a Hamburger icon) is often displayed conditionally on touch screen devices to allow for context menus to be actionable
                                    [ <a href="http://gizmodo.com/who-designed-the-iconic-hamburger-icon-1555438787" target="_blank">Reference</a> ]
                                </p>
                                <p> Such an icon can be programmatically configured to open the popup menu attached to the triggering element by manually triggering the <code>popupmenu</code> event on that element.</p>
                                <pre class="brush: js;">
// Detect if running on a touch device
if ('ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0){

// Unhide the hamburger icon and attach an onclick handler
$A.bind($A.remClass(hamburgerIconElement, 'hidden'), 'click', function(ev){

// Trigger the menu attached to the original triggering element
$A.trigger(originalTriggeringElement, 'popupmenu');

ev.stopPropagation(); // Important to prevent bubbling and auto closing
ev.preventDefault();
});

}
</pre>
                                <p> Similarly, a currently open menu can be programmatically closed by triggering the <code>closepopupmenu</code> event on the triggering element.</p>
                                <pre class="brush: js;">
// Close the menu attached to the original triggering element
$A.trigger(originalTriggeringElement, 'closepopupmenu');
</pre>
                                <p> When <code>aria-disabled="true"</code> is programmatically set on any menu item node after rendering, it will automatically
                                    be disabled within the menu, so that disabled submenus will not open when clicked or arrowed to, and custom handling for non-submenu
                                    links can then be processed individually within the click callback.</p>
                                <div class="hd">
                                    <h4><span> Triggering Element Requirements</span></h4>
                                </div>
                                <p> When a custom menu is applied to the Body element, no triggering element is required.</p>
                                <p> All other usages for custom popup menus require the use of a keyboard focusable active element that includes a valid
                                    active element role, which may consist of any native active element such as a standard link or form field, or a keyboard
                                    accessible interactive ARIA Widget type.</p>
                                <p> <strong>Valid interactive ARIA Widget roles include:</strong></p>
                                <ul>
                                    <li> button</li>
                                    <li> checkbox</li>
                                    <li> columnheader</li>
                                    <li> combobox</li>
                                    <li> grid</li>
                                    <li> gridcell</li>
                                    <li> link</li>
                                    <li> listbox</li>
                                    <li> option</li>
                                    <li> radio</li>
                                    <li> rowheader</li>
                                    <li> slider</li>
                                    <li> spinbutton</li>
                                    <li> tab</li>
                                    <li> textbox</li>
                                    <li> tree</li>
                                    <li> treegrid</li>
                                    <li> treeitem</li>
                                </ul>
                                <p>[ <a href="http://www.w3.org/TR/wai-aria/roles" target="_blank">Reference</a> ]</p>


                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample menus in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually
                                    matter what they look like. This is demonstrated within the "Shell" folders, where there is no CSS styling for the
                                    menu. This is also useful as a practice template for trying out different styling designs with custom content.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a
                                    focus outline clearly shows which elements have focus, and your newly styled menu will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Bootstrapping</span></h4>
                                </div>
                                <p> Bootstrapping is designed to handle common control types that span multiple pages with similar setup configurations.</p>
                                <p> The menus within the Bootstrap folders are configured using HTML5 <code>"data-"</code> attributes within the HTML markup.</p>
                                <p> When the Bootstrap Module (<em>"accdc_bootstrap.js"</em>) is executed, it parses the newly loaded DOM, recognizes the class <code>"accMenu"</code>,
                                    then configures the same module declaration as previously described using these HTML5 attributes.</p>
                                <p> <strong>Available HTML5 attributes for the triggering element:</strong></p>
                                <ul>
                                    <li> <strong>data-src :</strong> The resource path and pointer to the ID attribute of the top level menu list.
                                        If pointing to a menu list within the same document, only the ID attribute should be included here. </li>
                                    <li> <strong>data-internal :</strong> The ID attribute of the container element for all menu lists within the same document.
                                        If <code>data-src</code> is set to an external source, <code>data-internal</code> should be blank or not included. </li>
                                    <li> <strong>data-containerclass :</strong> The class name that will be added dynamically to the surrounding Div tag for each menu group when rendered. <code>"menu"</code> is set by default
                                        if no value is specified. </li>
                                    <li> <strong>data-menutag :</strong> The tag name for the container element that contains all menu item tags. All menu item tags must be contained within this container element,
                                        even if they are not first level child nodes. "ol" is set by default if no value is specified. </li>
                                    <li> <strong>data-menuclass :</strong> The shared class name that is contained within every menu container element. All menu tags specified by <code>data-menutag</code> must include this
                                        class name. <code>"menu"</code> is set by default if no value is specified. </li>
                                    <li> <strong>data-menuitemtag :</strong> The shared tag name that specifies all menu item tags. All menu item tags must be contained within the container element specified
                                        by <code>data-menutag</code>, even if they are not first level child nodes. <code>"a"</code> is set by default if no value is specified. </li>
                                    <li> <strong>data-menufolderclass :</strong> The shared class name that is contained within every menu tag that opens a submenu. <code>"submenu"</code> is set by default if no value is
                                        specified. </li>
                                    <li> <strong>data-menulinkclass :</strong> The shared class name that is contained within every menu tag that does not open a submenu. <code>"link"</code> is set by default if no value
                                        is specified. </li>
                                    <li> <strong>data-flyout="true" :</strong> Specifies a horizontal flyout menu where the <kbd class="left">Left</kbd> and <kbd class="right">Right</kbd> arrow keys will be used to navigate menu item nodes, and Up and Down
                                        will be used to close or open submenus. If <code>data-flyout</code> is not included within the markup, the default vertically oriented keyboard assignments will be
                                        applied automatically. </li>
                                </ul>
                                <p> Additional HTML5 attributes can be added to enhance functionality by editing the file <em>"accdc_bootstrap.js"</em>.</p>
                                <p> <strong>Required attributes for the triggering element:</strong></p>
                                <ul>
                                    <li> <strong>class="accMenu"</strong> : The bootstrap class name that specifies an accessible menu triggering element. </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> Implementation Notes</span></h4>
                                </div>
                                <p> The lists can be set to any tag, such as OL, UL, etc, as long as this is specified in the menuTag property
                                    within the JavaScript declaration statement or within the data-menutag attribute on the triggering element if Bootstrapped.</p>
                                <p> The same is true for the menu item nodes, which is specified using the menuItemTag property in the JavaScript
                                    declaration statement, or within the <code>data-menuitemtag</code> attribute on the triggering element if Bootstrapped.</p>
                                <p> Menus and submenus may be nested or broken out into separate lists within the markup if desired, as long as they
                                    are all contained within the same top level container element specified by ID within the JavaScript invocation statement,
                                    or within the data-internal attribute on the triggering element if Bootstrapped.</p>
                                <p> All menu container elements and menu item nodes must include unique ID attributes.</p>
                                <p> Submenus are mapped by combining the ID attribute of the top level menu container ID and the submenu pointer link ID,
                                    which, when combined, points to the ID of the referenced submenu container.</p>
                                <p> All menu item nodes must include <code>innerText</code> to ensure accessibility for screen reader users.</p>
                                <p> Don't include any ARIA attributes within the menu markup, since this is handled automatically by the Menu module.</p>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control" ><button id="radio-buttons">ARIA Radio Buttons</button></h3>
                            <div class="content hdn">
                                <p> ARIA Radio buttons provide a means for rendering standard links as a radio button group.</p>
                                <p><strong> Expected behaviors:</strong> Only one radio button should receive focus in the tab order, regardless whether one or no
                                    radio button in the group is selected. If a radio button is selected, only the currently selected radio button should appear in the tab order.
                                    The arrow keys should move focus to the next or previous radio button in the group, and the act of moving to that radio button should automatically select it.</p>
                                <p> The Radio Button Module automates these processes by adding all related event handlers and managing keyboard focus appropriately.</p>
                                <ul>
                                    <li> Basic simulated Radio controls with ARIA <code>role=radiogroup, role=radio, aria-posinset, aria-setsize, aria-checked</code>, and <code>aria-owns</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Radio Buttons/ARIA Radio Buttons/demo.htm"> Coding Arena/ARIA Radio Buttons/ARIA Radio Buttons/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <pre class="brush: html;">
&lt;ul id="radiogroupId" role="radiogroup">
&lt;li>
&lt;a href="#" role="radio" class="accRadio" id="rOpt1" aria-labelledby="rOpt1Lbl">
&lt;span id="rOpt1Lbl"> Radio One Label Text &lt;/span>
&lt;/a>
&lt;/li>
&lt;li>
&lt;a href="#" role="radio" class="accRadio" id="rOpt2" aria-labelledby="rOpt2Lbl">
&lt;span id="rOpt2Lbl"> Radio Two Label Text &lt;/span>
&lt;/a>
&lt;/li>
&lt;li>
&lt;a href="#" role="radio" class="accRadio" id="rOpt3" aria-labelledby="rOpt3Lbl">
&lt;span id="rOpt3Lbl"> Radio Three Label Text &lt;/span>
&lt;/a>
&lt;/li>
&lt;/ul>
</pre>
                                <h5>Markup requirements</h5>
                                <ul>
                                    <li> The Radio container element must include the attribute <code>role="radiogroup"</code>.</li>
                                    <li> All radio option nodes must include the attribute <code>role="radio"</code>.</li>
                                    <li> Both the Radio container element and all radio option nodes must include unique ID values.
                                        The current value for a Radio Control is the ID attribute of the currently selected radio button.
                                    </li>
                                    <li> The innerHTML for each radio option node must contain a textual label, which may be positioned offscreen to hide it visually if desired.
                                        <br />
                                        This textual label is critical so that screen reader users will be able to identify the purpose of the radio button.
                                        <br />
                                        If the textual label is included within another tag (such as a Span tag) for formatting purposes, aria-labelledby must be used to explicitly associate the label text with the element that includes role="radio" by referencing its ID.
                                        <br />
                                        Additionally, the textual label must be included within the opening and closing tags of the element with <code>role="radio"</code>.
                                    </li>
                                    <li> If using an A tag, an href attribute is required to ensure keyboard accessibility.</li>
                                    <li> Images may also be used within radio option nodes if desired.
                                        <br />
                                        If an image is present however, it should include the attribute <code>alt=""</code> to hide it from screen reader users.
                                        <br />
                                        An image with a textual Alt value won't be reliably announced as the radio button label in all browsers, which is why <code>alt=""</code> is used to hide it from screen reader users.
                                        <br />
                                        A textual label must be used instead to ensure the highest level of accessibility for the highest percentage of people.
                                        <br />
                                        To add a tooltip for sighted mouse users, use the Title attribute on the IMG tag instead.
                                        <br />
                                        The value within the Title attribute must match the text contained within the textual label however, especially when the textual label is positioned
                                        off screen to hide it visually. (This will ensure equal accessibility for all user types)
                                    </li>
                                </ul>
                                <p> <strong>The following attributes are handled automatically by the Radio Button Module:</strong></p>
                                <ul>
                                    <li> <code>tabindex</code></li>
                                    <li> <code>aria-owns</code></li>
                                    <li> <code>aria-setsize</code></li>
                                    <li> <code>aria-posinset</code></li>
                                    <li> <code>aria-selected</code></li>
                                    <li> <code>aria-checked</code></li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
var myRadioGroup = new $A.RadioGroup( 'radiogroupId' , 'CSS Selector for All Radio Elements' , DefaultIndexValue , 'Optional Legend Text' ,
callbackFunction(selectedRadioNode, radiosArray){
// Do something whenever a radio is selected
// this.value is the ID value of the newly selected radio element
} );
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> <strong>Parameter 1:</strong> The ID attribute of the radio group container. (This is the element with <code>role="radiogroup"</code>)</p>
                                    </li>
                                    <li>
                                        <p><strong> Parameter 2:</strong> The CSS Selector that identifies all elements with <code>role="option"</code> (all of which must be contained within
                                            the container specified in parameter 1)</p>
                                    </li>
                                    <li>
                                        <p> <strong>Parameter 3:</strong> The array index of the radio button that you want to be selected by default when instantiated.
                                            <br />
                                            (Simply pass -1 to specify that no radio button should be selected by default)
                                        </p>
                                    </li>
                                    <li>
                                        <p> <strong>Parameter 4:</strong> The shared legend text that will be announced to screen reader users whenever a radio button group receives initial focus.
                                            <br />
                                            The legend text will be announced in addition to the textual label for the radio button.
                                            <br />
                                            To use a visually displayed legend instead (as demonstrated within the Coding Arena samples), use
                                            <code>aria-labelledby</code> on the element with <code>role="radiogroup"</code>, and pass "" to this parameter to skip it.
                                        </p>
                                    </li>
                                    <li>
                                        <p> <strong>Parameter 5:</strong> The callback function that will be executed whenever a new radio button is activated.</p>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> When a radio button grouping is instantiated as a new Radio Group Control, all of the following public properties and methods are available:
                                    <br />
                                    (<code>'myRadiogroup'</code> refers to the variable instance name)
                                </p>
                                <pre class="brush: js;">
myRadiogroup.radios; // The array of all radio option DOM nodes

myRadiogroup.index; // The array index of the currently selected radio option

myRadiogroup.value; // The string ID attribute value of the currently selected radio option

myRadiogroup.set('radioId'); // Sets the radio option with id="radioId"

myRadiogroup.set(arrayIndex); // Sets the radio option at the specified array index (relative to myRadiogroup.radios)
</pre>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample radios in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually
                                    matter what they look like. This is demonstrated within the "Shell" folders, where there is no CSS styling for the
                                    radio group. This is also useful as a practice template for trying out different styling designs with custom content.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a
                                    focus outline clearly shows which elements have focus, and your newly styled radio group will be accessible.</p>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control" ><button id="sliders">ARIA Sliders</button></h3>
                            <div class="content hdn">
                                <p> ARIA Sliders are used to present adjustable values for users, and can easily be made accessible.</p>
                                <p> Expected behaviors: The slider should have only one tab stop in the tab order, the arrow keys should move the slider in
                                    single value increments, <kbd>PageUp/PageDown</kbd> should move the slider in 10% increments, <kbd>Home/End</kbd> should move the slider to the
                                    beginning or end, and the slider should be draggable using the mouse as usual.</p>
                                <p> The Slider Module automates these processes by adding all related event handlers and managing keyboard focus appropriately.</p>
                                <ul>
                                    <li> Horizontal Slider control with ARIA <code>role=slider, aria-label, aria-valuemin, aria-valuemax, aria-valuenow, aria-valuetext</code>, and <code>aria-orientation</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Sliders/Horizontal/demo.htm"> Coding Arena/ARIA Sliders/Horizontal/demo.htm</a>
                                    </li>
                                    <li> Vertical Slider control with ARIA <code>role=slider, aria-label, aria-valuemin, aria-valuemax, aria-valuenow, aria-valuetext</code>, and <code>aria-orientation</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Sliders/Vertical/demo.htm"> Coding Arena/ARIA Sliders/Vertical/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <pre class="brush: html;">
&lt;div class="slider">

&lt;div class="min" aria-hidden="true">
&lt;span>0%&lt;/span>
&lt;/div>

&lt;div class="slideWrapper">

&lt;div class="slide clearfix">

&lt;div class="nub" id="handleId">&lt;!--
This is the slider thumb icon
-->&lt;/div>

&lt;/div>

&lt;/div>

&lt;div class="max" aria-hidden="true">
&lt;span>100%&lt;/span>
&lt;/div>

&lt;/div>
</pre>
                                <p> <strong>Important:</strong> The first parentNode container of the draggable slide element must be relatively positioned to set this as
                                    the offsetParent. In the above markup, this is the Div tag with <code>class="slide clearfix"</code>.</p>
                                <p> Also, notice that <code>aria-hidden="true"</code> is used on the Min and Max container tags.
                                    Since these values will be provided to screen reader users as part of the ARIA Slider Control, having them announced during navigation
                                    would only repeat the same information twice, which is unnecessary. So <code>aria-hidden</code> is used to remove them from the Virtual Buffer for screen reader users.</p>
                                <p> The next step is to use CSS to set the width and height of the slider, which you can see examples of in the Coding Arena samples.
                                    This is important, because when the Slider Control is instantiated, it will use these offsets to configure the positioning calculations and map them to related keyboard commands.</p>
                                <p> <strong>The following attributes are handled automatically by the Slider Module:</strong></p>
                                <ul>
                                    <li> <code>tabindex</code></li>
                                    <li> <code>aria-label</code></li>
                                    <li> <code>role="slider"</code></li>
                                    <li> <code>aria-valuemin</code></li>
                                    <li> <code>aria-valuemax</code></li>
                                    <li> <code>aria-valuenow</code></li>
                                    <li> <code>aria-valuetext</code></li>
                                    <li> <code>aria-orientation</code></li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
$A.setSlider('handleId', {
// Configure key / value mappings
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter is the ID of the element that will be made draggable, which will then be morphed into an AccDC Object. E.G <code>"handleId"</code>
                                            The markup structure will slightly change at this point, since an extra DIV will then surround the element with <code>id="handleId"</code>.</p>
                                    </li>
                                    <li>
                                        <p> The second parameter is where all of the slider configuration is set.</p>
                                        <p> <strong>Example:</strong></p>
                                        <pre class="brush: js;">
{

// Set the role text that is conveyed to screen reader users
role: 'Slider',

// Set a minimum value
min: 0,

// Set a maximum value
max: 100,

// Set the start value
now: 50,

// Is a vertical slider?
vertical: false,

// Set the hidden link text for graceful degradation
// This should reflect the purpose of the slider
degradeLbl: 'Manually choose a percentage',

// Return the string that will act as the ARIA Slider label for screen reader users
// This should reflect the purpose of the slider
ariaLabel: function(dc){
return 'Choose a percentage between 0 and 100';
},

// Return the string that will act as the textual notification for screen reader users
// This is automatically announced every time the slider is moved
valueText: function(dc, val){
return val + '%';
},

// Set the action to occur whenever the value changes
onDrag: function(ev, dd, dc, val){
// ev is the standard event object
// dd is the custom drag event object
// dc is the AccDC Object for the Slider
// val is the current value of the slider
},

// Set the class name for the surrounding Div, which automatically surrounds the drag handle element
className: 'handleWrapper'

}
</pre>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> After a Slider Control is instantiated, it can be controlled programmatically using its ID, which matches the ID attribute
                                    value of the drag handle (passed as the first parameter in the invocation statement).</p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: js;">
// Get a reference to the Slider AccDC Object using its ID, which matches the handle elements ID attribute
var dc = $A.reg['handleId'];

// Get the current slider value
var currentVal = dc.config.now;

// Assign a new slider value
dc.config.now = currentVal + 10;

// Apply the change
dc.set.apply(dc);
</pre>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample sliders in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what they look like.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a focus outline
                                    clearly shows which elements have focus, and your newly styled sliders will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Implementation Notes</span></h4>
                                </div>
                                <p> Simply use CSS to set the size of the slider, and the height and width of the container element, and then the slider will configure itself using these offsets.</p>
                                <p> Since repetitive labels are used, and the textual slider icon has no value for screen reader users, <code>aria-hidden="true"</code> is used to hide them from screen reader users.</p>
                                <p> Don't include any other ARIA attributes however, the Slider module handles this automatically. </p>
                                <p> The slide icon can be changed to anything, or an image or CSS background image can be used instead, and the styling can be
                                    configured for any layout, and it will still be accessible for screen reader and keyboard only users.</p>
                                <p> VoiceOver instructions for use on iOS touch screen devices:</p>
                                <p> When VoiceOver is used on iOS touch screen devices, VoiceOver instructs the user to swipe up and down with one finger to
                                    adjust the slider value, which is incorrect. (Last verified on 04/07/2013)</p>
                                <p> Instead, do the following:</p>
                                <ol>
                                    <li> Use one finger and double tap the slide icon, and keep your finger pressed down on the second tap.</li>
                                    <li> Wait until you hear a slight noise, then slide your finger in the direction that you wish to move the slider.</li>
                                    <li> Then lift your finger to release the slider.</li>
                                </ol>
                                <p><em> Credit goes to David Hilbert Poehlman for providing VoiceOver pass-through technique instructions.</em></p>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control" ><button id="toggles">ARIA Toggles, Checkboxes, and Switches</button></h3>
                            <div class="content hdn">
                                <p> The Toggle Control is a multipurpose control type, that covers checkboxes, toggle buttons, switches, and even simulated links and buttons.</p>
                                <p> <strong>Expected behaviors:</strong> The general behavior of a Toggle control is to receive keyboard focus in the tab order regardless
                                    of the active select state, to be toggleable or actionable by pressing the <kbd>Spacebar</kbd> or by pressing <kbd>Enter</kbd> on the control, and to be toggleable or actionable by clicking it as usual.</p>
                                <p> The Toggle Module automates these processes by adding all related event handlers.</p>
                                <ul>
                                    <li> Simulated Checkbox controls with ARIA <code>role=checkbox</code>, and <code>aria-checked</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Toggles, Checkboxes, Links, and Buttons/ARIA Checkboxes/demo.htm"> Coding Arena/ARIA Toggles, Checkboxes, Links, and Buttons/ARIA Checkboxes/demo.htm</a>
                                    </li>
                                    <li> Simulated Switch controls with ARIA <code>role=switch</code>, and <code>aria-checked</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Toggles, Checkboxes, Links, and Buttons/ARIA Switches/demo.htm"> Coding Arena/ARIA Toggles, Checkboxes, Links, and Buttons/ARIA Switches/demo.htm</a>
                                    </li>
                                    <li> Simulated Toggle Button controls with ARIA <code>role=button</code>, and <code>aria-pressed</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Toggles, Checkboxes, Links, and Buttons/ARIA Toggle Buttons/demo.htm"> Coding Arena/ARIA Toggles, Checkboxes, Links, and Buttons/ARIA Toggle Buttons/demo.htm</a>
                                    </li>
                                    <li> Simulated Button and Link controls with ARIA <code>role=button</code> or <code>role=link</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Toggles, Checkboxes, Links, and Buttons/ARIA Links and Buttons/demo.htm"> Coding Arena/ARIA Toggles, Checkboxes, Links, and Buttons/ARIA Links and Buttons/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <p> The HTML syntax varies depending on which type of implementation is desired, and each type has specific rules that must
                                    be observed in order to ensure the highest level of accessibility for screen reader users.</p>
                                <p> IMG</p>
                                <p> For IMG tags, the following attributes are required to ensure accessibility for the widest range of screen readers:</p>
                                <ol>
                                    <li> <strong>aria-label :</strong> Specifies a textual label for screen reader users. (The Alt alone won't work for this purpose)</li>
                                    <li> <strong>alt="" :</strong> Hides the image from screen reader users when no tooltip is desired for mouse users.
                                        <br />
                                        To add a tooltip for sighted mouse users, use both the Alt and Title attributes. The text for both must match the
                                        text contained within the <code>aria-label</code> attribute, so that all three are the same. This will also maximize
                                        accessibility in iOS devices using VoiceOver.
                                    </li>
                                    <li> <strong>role="button"</strong> must be added for toggles, <code>role="checkbox"</code> must be added for checkboxes, or <code>role="switch"</code> must be added for switches.</li>
                                    <li> A unique ID must be added for proper event binding.</li>
                                </ol>
                                <p><strong> Examples:</strong></p>
                                <pre class="brush: html;">
&lt;img role="button"
aria-label="Toggle Button Label"
alt="Toggle Button Label"
title="Toggle Button Label"
id="uniqueId1"
src="icon.png"
/>

&lt;img role="checkbox"
aria-label="Checkbox Label"
alt="Checkbox Label"
title="Checkbox Label"
id="uniqueId2"
src="icon.png"
/>

&lt;img role="switch"
aria-label="Switch Label"
alt="Switch Label"
title="Switch Label"
id="uniqueId2"
src="icon.png"
/>
</pre>
                                <h5> INPUT</h5>
                                <p> For INPUT tags with <code>type="image"</code>, the following attributes are required to ensure accessibility for the widest range of screen readers:</p>
                                <ol>
                                    <li> <strong>aria-label :</strong> Specifies a textual label for screen reader users. (The Alt alone won't work for this purpose)</li>
                                    <li> <strong>Title :</strong> Specifies a textual label for screen reader users. This must match the text contained within the aria-label attribute.
                                        <br />
                                        (Both the Title and aria-label attributes are required to correct differing screen reader feedback when tabbing versus arrowing down the page using JAWS.)
                                    </li>
                                    <li> To add a tooltip for sighted mouse users, use both the Alt and Title attributes. The text for both must match the text contained within the aria-label attribute, so that all three are the same.</li>
                                    <li> <strong>role="button"</strong> must be added for toggles, <code>role="checkbox"</code> must be added for checkboxes, or <code>role="switch"</code> must be added for switches.</li>
                                    <li> A unique ID must be added for proper event binding.</li>
                                </ol>
                                <p> <strong>Examples:</strong></p>
                                <pre class="brush: html;">
&lt;input type="image"
role="button"
aria-label="Toggle Button Label"
alt="Toggle Button Label"
title="Toggle Button Label"
id="uniqueId3"
src="icon.png"
/>

&lt;input type="image"
role="checkbox"
aria-label="Checkbox Label"
alt="Checkbox Label"
title="Checkbox Label"
id="uniqueId4"
src="icon.png"
/>

&lt;input type="image"
role="switch"
aria-label="Switch Label"
alt="Switch Label"
title="Switch Label"
id="uniqueId4"
src="icon.png"
/>
</pre>
                                <h5>Container Elements</h5>
                                <p> For all other container elements that support innerHTML such as DIVs and SPANs, the following attributes and rules are
                                    required to ensure accessibility for the widest range of screen readers:</p>
                                <ol>
                                    <li> <strong>Inner Text :</strong> Specifies a textual label for screen reader users. This may be visible or positioned using <code>offscreenText</code>.</li>
                                    <li> <strong>No Embedded Active Elements :</strong> Don't embed any other active elements, including mouse clickable images, links, or anything else that needs to be activated separately. (The only actionable element should be the element with role="button" or role="checkbox".)</li>
                                    <li> To add a tooltip for sighted mouse users, use the Title attribute. This must match the text contained within the innerText label.</li>
                                    <li> <strong>role="button"</strong> must be added for toggles, <code>role="checkbox"</code> must be added for checkboxes, or <code>role="switch"</code> must be added for switches.</li>
                                    <li> A unique ID must be added for proper event binding.</li>
                                </ol>
                                <p> <strong>Examples:</strong></p>
                                <pre class="brush: html;">
&lt;div role="button"
title="Toggle Button Label"
id="uniqueId5">
&lt;span class="lbl">
Toggle Button Label
&lt;/span>
&lt;/div>

&lt;div role="checkbox"
title="Checkbox Label"
id="uniqueId6">
&lt;span class="lbl">
Checkbox Label
&lt;/span>
&lt;/div>

&lt;div role="switch"
title="Switch Label"
aria-label="Switch Label"
id="uniqueId6">&lt;/div>
</pre>
                                <p> (The element with the valid role will automatically be made focusable.)</p>
                                <p> The following attributes are handled automatically by the Toggle Module:</p>
                                <ul>
                                    <li> <code>tabindex</code></li>
                                    <li> <code>aria-checked</code> (if applicable)</li>
                                    <li> <code>aria-pressed</code> (if applicable)</li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
var myToggle = new $A.Toggle('uniqueId', {
// Configure key / value mappings
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>The first parameter is the ID attribute value of the element that will become actionable.</li>
                                    <li>The second parameter is the key / value map that configures specific functionality.</li>
                                </ol>
                                <p> <strong>Example:</strong></p>

                                <pre class="brush: js;">
{

// Disable ARIA
// (only for simulated Checkboxes and Toggle Buttons, leave out otherwise)
noARIA: true,

// Disable toggling
// (only for ARIA Links and Buttons, leave out otherwise)
noToggle: true,

// Set the initial state
// (only for simulated Checkboxes and Toggle Buttons, leave out otherwise)
state: false,

// Declare a callback to run every time the state changes
callback: function(state){
// 'state' is the proposed state change, true or false
// 'this' is the triggering element
// Return true to accept the ARIA state change, or false to prevent
return true;
}

}
</pre>
                                </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> After a Toggle control is instantiated, the following public properties and methods are available:</p>
                                <pre class="brush: js;">
myToggle.state; // Reflects the current select state of the toggle (true or false)

myToggle.set(Boolean); // Set the Toggle with the specified state (true or false)
</pre>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The samples in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what they look like.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a focus outline
                                    clearly shows which elements have focus, and your newly styled checkbox, button, or switch will be accessible.</p>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" ><button id="trees">ARIA Trees</button></h3>
                            <div class="content hdn">
                                <p> An ARIA Tree is a complex control type that requires a lot of synchronizing to make accessible.</p>
                                <p> The reasons why: If the right ARIA attributes are not applied to the correct DOM nodes that receive keyboard focus,
                                    and if the parent child ID associations are not properly mapped and maintained, and if tree nodes are not labeled properly
                                    using the correct ARIA attributes, and if the tree contains any other active elements that are not part of the ARIA Tree
                                    structure, then the ARIA Tree and its contents will not be accessible for screen reader users.</p>
                                <p> Currently, a large part of this is the result of unequal support by screen reader manufacturers. For example, even though
                                    the ARIA specification states that <code>role="document"</code> can be used to embed additional content panels within specific widgets such
                                    as this, doing so will result in content panels that are inaccessible using JAWS in both IE and Firefox. (Verified in JAWS 12, 13, and 14)</p>
                                <p> Nevertheless, the Tree Module automates these processes accessibly by adding all related event handlers and managing all
                                    related rendering procedures using an external XML file for configuration.</p>
                                <ul>
                                    <li> Tree control with ARIA <code>role=tree or role=group, aria-label, role=treeitem, aria-expanded, aria-selected, aria-level, aria-posinset, aria-setsize</code>, and <code>aria-owns</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Trees/Tree (External XML)/demo.htm"> Coding Arena/ARIA Trees/Tree (External XML)/demo.htm</a>
                                    </li>
                                    <li> Shell Tree control with no CSS, ARIA <code>role=tree or role=group, aria-label, role=treeitem, aria-expanded, aria-selected, aria-level, aria-posinset, aria-setsize</code>, and <code>aria-owns</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/ARIA Trees/Tree (External XML Shell)/demo.htm"> Coding Arena/ARIA Trees/Tree (External XML Shell)/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <pre class="brush: html;">
&lt;div id="myTreeId">&lt;/div>
</pre>
                                <div class="hd">
                                    <h4><span> XML Syntax</span></h4>
                                </div>
                                <pre class="brush: xml;">
&lt;?xml version="1.0" encoding="UTF-8" ?>
&lt;tree>
&lt;branch id="uniqueId0-1" name="Branch Link Name for id=uniqueId0-1">
&lt;leaf id="uniqueId0-1-1" name="Leaf Link Name for id=uniqueId0-1-1">&lt;/leaf>
&lt;/branch>
&lt;leaf id="uniqueId0-2" name="Leaf Link Name for id=uniqueId0-2">&lt;/leaf>
&lt;/tree>
</pre>
                                <p> The above XML markup results in the following HTML structure when rendered:</p>
                                <pre class="brush: html;">
&lt;div class="TreeView">
&lt;div>
&lt;ul role="tree" aria-owns="uniqueId0-1 uniqueId0-2" aria-label="Informative Field Name">
&lt;li>
&lt;a class="branch" aria-expanded="true" id="uniqueId0-1" aria-level="1" role="treeitem" aria-posinset="1" tabIndex="0" aria-selected="true" aria-owns="aria1363672754457" aria-setsize="2" href="#" aria-label="Branch Link Name for id=uniqueId0-1">
&lt;SPAN>Branch Link Name for id=uniqueId0-1&lt;/SPAN>
&lt;/a>
&lt;div class="TreeView">
&lt;div>
&lt;ul id="aria1363672754457" role="group" aria-owns="uniqueId0-1-1">
&lt;li>
&lt;a class="leaf" id="uniqueId0-1-1" aria-level="2" role="treeitem" aria-posinset="1" tabIndex="-1" aria-selected="false" aria-setsize="1" href="#" aria-label="Leaf Link Name for id=uniqueId0-1-1">
&lt;SPAN>Leaf Link Name for id=uniqueId0-1-1&lt;/SPAN>
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;a class="leaf" id="uniqueId0-2" aria-level="1" role="treeitem" aria-posinset="2" tabIndex="-1" aria-selected="false" aria-setsize="2" href="#" aria-label="Leaf Link Name for id=uniqueId0-2">
&lt;SPAN>Leaf Link Name for id=uniqueId0-2&lt;/SPAN>
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
</pre>
                                <h5>Required XML attributes</h5>
                                <ul>
                                    <li> <strong>id : </strong>The unique ID of the node. This will automatically be converted into the ID attribute of the relevant tree item link when rendered.
                                        (All IDs must be unique)</li>
                                    <li> <strong>name :</strong> The textual name of the node, which will automatically be converted into the textual label for the tree item link when rendered.
                                        <br />
                                        (All name attribute values at the same logical node level must be unique to ensure accessibility for screen reader users)
                                    </li>
                                </ul>
                                <p> <strong>The following attributes are handled automatically by the ARIA Tree Module:</strong></p>
                                <ul>
                                    <li> <code>aria-label</code></li>
                                    <li> <code>role="tree"</code></li>
                                    <li> <code>role="group"</code></li>
                                    <li> <code>aria-owns</code></li>
                                    <li> <code>tabindex</code></li>
                                    <li> <code>role="treeitem"</code></li>
                                    <li> <code>aria-setsize</code></li>
                                    <li> <code>aria-posinset</code></li>
                                    <li> <code>aria-selected</code></li>
                                    <li> <code>aria-expanded</code></li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
var treeId = $A.setTree({
// Configuration key / value map
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter is used to configure ARIA Tree functionality using a key / value map.</p>
                                        <p> <strong>Example:</strong></p>

                                        <pre class="brush: js;">
{

// Set the XML file to parse
path: 'files/tree.xml',

// Set the label that will be announced to screen reader users
title: 'Informative Field Name',

// Specify the container element where the tree nodes will be inserted
container: 'div#myTree',

// Set the class name shared by all tree AccDC Objects when rendered
topClass: 'TreeView',

// Set the container tree node type
treeTag: 'ul',

// Set the divider node type that will be appended to the treeTag node
dividerTag: 'li',

// Set the focusable tree item node type that will be inserted within dividerTag node
treeItemTag: 'a',

// Set the shared class name for all tree items that expand into subfolders
treeClass: 'branch',

// Set the shared class name for all tree items that do not expand into subfolders
treeItemClass: 'leaf',

// Set the class name that is only set on the tree item node that has focus
selectClass: 'selected',

// Set the handler type that will trigger the callback
bind: 'click',

// Declare a callback function
callback: function(ev, dc){

// Get the XML node that matches the ID attribute of the currently triggered element
var xmlNode = $A.query('#' + this.id, dc.top.xmlDocument)[0];

// To learn more about the XML DOM and supported properties and methods,
// and how to access custom attributes on each node, visit
// http://www.w3schools.com/dom/default.asp

},

overrides: {
// Set optional AccDC API overrides for every AccDC Object that is rendered in the tree
}

}
</pre>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> The invocation statement returns the top level ID of the newly instantiated ARIA Tree control, which is now registered as an AccDC Object.</p>
                                <p> You can use this ID to programmatically change or invoke AccDC API properties and methods within the ARIA Tree structure, and to traverse the parent / child relationship of tree node objects.</p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: js;">
// Get the Tree AccDC Object using the ID stored in the variable treeId
var dc = $A.reg[treeId];
</pre>
                                <p> Now, you can traverse the expandable branches in the tree using
                                    <code>dc.siblings, dc.children, dc.parent</code>, and <code>dc.top</code>,
                                    and apply changes, store and retrieve data, or invoke AccDC API commands as desired.</p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: js;">
// Close the Tree AccDC Object and remove it from the DOM.
dc.top.close();

// All other AccDC API properties and methods are similarly available.
</pre>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample trees in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what
                                    they look like. This is demonstrated within the "Shell" folders, where there is no CSS styling for the tree. This is also
                                    useful as a practice template for trying out different styling designs with custom content.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a focus
                                    outline clearly shows which elements have focus, and your newly styled tree will be accessible.</p>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" ><button id="banners">Banners</button></h3>
                            <div class="content hdn">
                                <p> A Banner is a simple control type, which can easily be made accessible.</p>
                                <p> <strong>Expected behaviors:</strong> Ensure that the content of the banner appears at the top of the page, ensure that the beginning
                                    and ending boundaries are conveyed to screen reader users, and make sure the banner can be closed from the keyboard (if applicable).</p>
                                <p> The Banner Module automates these processes by instantiating banner content as an AccDC Object.</p>
                                <ul>
                                    <li> Basic Banner control with offscreen boundary text:
                                        <br />
                                        <a target="ca" href="Coding Arena/Banners/Banner (Internal Content)/demo.htm"> Coding Arena/Banners/Banner (Internal Content)/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <pre class="brush: html;">
&lt;div id="bannerContainerElementId">
Banner content goes here.
&lt;/div>
</pre>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
var bannerId = $A.setBanner({
// Configure functionality key / value map
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter configures banner functionality using a key / value map.</p>

                                        <p> <strong>Example:</strong></p>

                                        <pre class="brush: js;">
{

// Set a unique ID for the Banner AccDC Object
id: 'myBannerId',

// Set the boundary text for screen reader users
role: 'Banner',

// Set the Banner AccDC Object to render literal content
// (Only if pulling content from within the same page, remove otherwise)
mode: 0,

// Set the content to be rendered by pulling it from within the same page
// 'removeChild' is important here, so no duplicate ID conflicts can occur when the object is opened and closed
// (Only if pulling content from within the same page, remove otherwise)
source: $A.getEl('bannerContainerElementId').parentNode.removeChild($A.getEl('bannerContainerElementId')),

// Specify the path and ID of the banner content to be loaded
// (Only if pulling content from an external page, remove otherwise)
source: 'files/overlays.html #bannerContainerElementId',

// Disable automatic positioning if wishing to use a Style Sheet instead
autoFix: 0,

// Specify that the banner should open as soon as the page loads
autoStart: true,

// Set a class name for the banner top level container element
className: 'banner',

// Specify that the textual content of the banner should automatically be announced to screen reader users when opened
announce: true,

// Choose the container element where the banner will be inserted
isStatic: 'body',
// Choose to prepend the banner instead of replacing the content within the container element
// (This places the banner content at the top of the page in the reading order for screen readers)
prepend: true,

// Set a hidden close link to appear for screen reader users
showHiddenClose: true,

// Remove the hidden close link from the tab order so it doesn't appear when tabbing
displayHiddenClose: false,

// Set the heading level that will be accessible for screen reader users
ariaLevel: 2,

// Run a script after the banner finishes loading
runAfter: function(dc){
// Optionally do stuff
// 'dc' is the Banner AccDC Object
// dc.containerDiv is the DOM node where all banner content is rendered
}

// Other AccDC API properties and methods can go here as well if desired.

}
</pre>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> The invocation statement returns the ID of the newly instantiated Banner AccDC Object, which can be used to programmatically control each banner using JavaScript if desired.</p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: js;">
// Get a reference to the Banner AccDC Object
var dc = $A.reg[bannerId];

// Which you can then open

dc.open();

// Or close

dc.close();

// All other AccDC API properties and methods can be applied here as well.
</pre>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample banners in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter
                                    what they look like. This is demonstrated within the "Shell" folders, where there is no CSS styling for the banner. This
                                    is also useful as a practice template for trying out different styling designs with custom content.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a focus
                                    outline clearly shows which elements have focus, and your newly styled banner will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Bootstrapping</span></h4>
                                </div>
                                <p> Bootstrapping is designed to handle common control types that span multiple pages with similar setup configurations.</p>
                                <p> The banners within the Bootstrap folders are configured using HTML5 <code>"data-"</code> attributes within the HTML
                                    markup.</p>
                                <p> When the Bootstrap Module (<em>"accdc_bootstrap.js"</em>) is executed, it parses the newly loaded DOM, recognizes the
                                    class <code>"accBanner"</code>, then configures the same module declaration as previously described using these HTML5 attributes.</p>
                                <p> <strong>Available HTML5 attributes:</strong></p>
                                <ul>
                                    <li> <strong>data-src :</strong> The resource path and pointer to the ID attribute of the banner container element. </li>
                                    <li> <strong>data-role :</strong> The role name that is conveyed to screen reader users as beginning and ending boundary text
                                        for the new content. "Banner" is set by default if no value is specified. </li>
                                </ul>
                                <p> Additional HTML5 attributes can be added to enhance functionality by editing the file <em>"accdc_bootstrap.js"</em>.</p>
                                <p> <strong>Required attributes:</strong></p>
                                <ul>
                                    <li> <strong>class="accBanner" :</strong> The bootstrap class name that specifies a banner insertion point container.</li>
                                    <li> <strong>id :</strong> The unique ID of the element. This value is also registered as the ID of the banner AccDC Object,
                                        making it possible to invoke the object programmatically.
                                        <br />
                                        E.G $A.reg.uniqueID.open();
                                        <br />
                                        // All other AccDC API properties and methods are similarly available.
                                    </li>
                                </ul>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" ><button id="carousels">Carousels, Slideshows, and Wizards</button></h3>
                            <div class="content hdn">
                                <p> A Carousel is a complex control type that is easy to make accessible.</p>
                                <p> <strong>Expected behaviors:</strong> The beginning and ending boundaries should be conveyed to screen reader users, content
                                    changes should be announced to screen reader users only when a navigation button is manually activated, all navigation
                                    buttons should be keyboard accessible and include unique accesskeys for screen reader users, auto cycling should pause
                                    when an element within the carousel receives focus or when the mouse is moved into the region, auto cycling should
                                    resume when focus moves out of the carousel or when the mouse moves out of the region, and auto cycling should be
                                    stoppable from anywhere on the page using the keyboard.</p>
                                <p> The Carousel Module automates these processes by adding all related event handlers and managing all related rendering
                                    procedures using an external XML file for configuration.</p>
                                <ul>
                                    <li> Customized Carousel control with named region text, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Carousels, Slideshows, and Wizards/Carousel (Flat from XML with Overrides)/demo.htm"> Coding Arena/Carousels, Slideshows, and Wizards/Carousel (Flat from XML with Overrides)/demo.htm</a>
                                    </li>
                                    <li> Basic Carousel control with named region text, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Carousels, Slideshows, and Wizards/Carousel (Flat from XML)/demo.htm"> Coding Arena/Carousels, Slideshows, and Wizards/Carousel (Flat from XML)/demo.htm</a>
                                    </li>
                                    <li> Bottom grouped Carousel control with named region text, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Carousels, Slideshows, and Wizards/Carousel (Grouped from XML, with Group Name on Bottom)/demo.htm"> Coding Arena/Carousels, Slideshows, and Wizards/Carousel (Grouped from XML, with Group Name on Bottom)/demo.htm</a>
                                    </li>
                                    <li> Top grouped Carousel control with named region text, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Carousels, Slideshows, and Wizards/Carousel (Grouped from XML, with Group Name on Top)/demo.htm"> Coding Arena/Carousels, Slideshows, and Wizards/Carousel (Grouped from XML, with Group Name on Top)/demo.htm</a>
                                    </li>
                                    <li> Bottom captioned Carousel control with named region text, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Carousels, Slideshows, and Wizards/Carousel (Grouped from XML, with Group Names as Captions)/demo.htm"> Coding Arena/Carousels, Slideshows, and Wizards/Carousel (Grouped from XML, with Group Names as Captions)/demo.htm</a>
                                    </li>
                                    <li> Basic Slideshow control with named region text, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Carousels, Slideshows, and Wizards/Slideshow (Flat from XML)/demo.htm"> Coding Arena/Carousels, Slideshows, and Wizards/Slideshow (Flat from XML)/demo.htm</a>
                                    </li>
                                    <li> Wizard Slideshow control with named region text, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Carousels, Slideshows, and Wizards/Wizard (Grouped from XML)/demo.htm"> Coding Arena/Carousels, Slideshows, and Wizards/Wizard (Grouped from XML)/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <pre class="brush: html;">
&lt;div id="myCarousel">&lt;/div>
</pre>
                                <div class="hd">
                                    <h4><span> XML Syntax</span></h4>
                                </div>
                                <p> An external XML file is used to configure and populate each slide of the carousel. </p>
                                <p> <strong>Flat:</strong></p>
                                <pre class="brush: xml;">
&lt;?xml version="1.0" encoding="UTF-8" ?>
&lt;carousel
role="Slideshow"
height="auto" width="auto"
className="carouselCls"
prevTitle="Previous" nextTitle="Next" slideName="Slide" groupName=""
showGroup="" groupPosTop=""
btnPText="&#8593;" btnNText="&#8595;" btnPGText="" btnNGText=""
isGrouped="no"
btnPAccesskey="1" btnNAccesskey="2" btnPGAccesskey="" btnNGAccesskey=""
direction="tb" cycle="yes" timer="0" animDelay="1250" forward="yes"
hiddenMsg="" >
&lt;slide announce="Unique Slide Name" >&lt;![CDATA[
HTML content to render goes here
]]>&lt;/slide>
&lt;slide announce="Unique Slide Name" >&lt;![CDATA[
HTML content to render goes here
]]>&lt;/slide>
&lt;/carousel>
</pre>
                                <p> <strong>Grouped:</strong></p>
                                <pre class="brush: xml;">
&lt;?xml version="1.0" encoding="UTF-8" ?>
&lt;carousel
role="Carousel"
height="auto" width="auto"
className="carouselCls"
prevTitle="Previous" nextTitle="Next" slideName="Slide" groupName="Group"
showGroup="yes" groupPosTop="yes"
btnPText="&#8592;" btnNText="&#8594;" btnPGText="&#8656;" btnNGText="&#8658;"
isGrouped="yes"
btnPAccesskey="1" btnNAccesskey="2" btnPGAccesskey="3" btnNGAccesskey="4"
direction="lr" cycle="yes" timer="5000" animDelay="2000" forward="yes"
hiddenMsg="Press Escape to stop automatic cycling" >
&lt;group name="Unique Group Name" >
&lt;slide announce="Unique Slide Name" >&lt;![CDATA[
HTML content to render goes here
]]>&lt;/slide>
&lt;slide announce="Unique Slide Name" >&lt;![CDATA[
HTML content to render goes here
]]>&lt;/slide>
&lt;/group>
&lt;group name="Unique Group Name" >
&lt;slide announce="Unique Slide Name" >&lt;![CDATA[
HTML content to render goes here
]]>&lt;/slide>
&lt;slide announce="Unique Slide Name" >&lt;![CDATA[
HTML content to render goes here
]]>&lt;/slide>
&lt;/group>
&lt;/carousel>
</pre>
                                <p> <strong>Important:</strong> All attributes must remain within the XML markup.
                                    Attributes that are not required may be set to null. E.G. <code>attributeName=""</code>.</p>
                                <h5>Carousel attribute definitions</h5>
                                <ul>
                                    <li> <strong>role :</strong> Hidden text role for screen reader users</li>
                                    <li> <strong>className :</strong> The class name for styling the top level AccDC Object container</li>
                                    <li> <strong>prevTitle :</strong> Title and screen reader text for the previous button (Must be unique)</li>
                                    <li> <strong>nextTitle :</strong> Title and screen reader text for the next button (Must be unique)</li>
                                    <li> <strong>slideName :</strong> Shared name for a slide, appended to prevTitle and nextTitle for Next Slide and Previous Slide button labeling</li>
                                    <li> <strong>isGrouped :</strong> Must be 'yes' or 'no': Must match the syntax of the XML markup (whether or not the group tag is present)</li>
                                    <li> <strong>groupName :</strong> Shared name for a group, appended to prevTitle and nextTitle for Next Group and Previous Group button labeling</li>
                                    <li> <strong>showGroup :</strong> If 'yes', group names will be displayed above or below the carousel (depending on the value of groupPosTop)</li>
                                    <li> <strong>groupPosTop :</strong> If 'yes', group names are displayed above the carousel, if not, then they are displayed below (only if showGroup='yes')</li>
                                    <li> <strong>btnPText :</strong> Visible textual label for the Previous Slide button; uses innerHTML to insert</li>
                                    <li> <strong>btnNText :</strong> Visible textual label for the Next Slide button; uses innerHTML to insert</li>
                                    <li> <strong>btnPGText :</strong> Visible textual label for the Previous Group button; uses innerHTML to insert</li>
                                    <li> <strong>btnNGText :</strong> Visible textual label for the Next Group button; uses innerHTML to insert</li>
                                    <li> <strong>btnPAccesskey :</strong> AccessKey for the Previous Slide button (for screen reader users)</li>
                                    <li> <strong>btnNAccesskey :</strong> AccessKey for the Next Slide button (for screen reader users)</li>
                                    <li> <strong>btnPGAccesskey :</strong> AccessKey for the Previous Group button (for screen reader users)</li>
                                    <li> <strong>btnNGAccesskey :</strong> AccessKey for the Next Group button (for screen reader users)</li>
                                    <li> <strong>direction :</strong> Must be either 'lr' (left to right), or 'tb' (top to bottom)</li>
                                    <li> <strong>cycle :</strong> Must be either 'yes' or 'no' to set the behavior of infinite looping</li>
                                    <li> <strong>timer :</strong> Set to '0' to disable auto rotation, or set a positive integer for N milliseconds</li>
                                    <li> <strong>animDelay :</strong> Slide animation length in N milliseconds; set to '0' for instant rendering</li>
                                    <li> <strong>forward :</strong> Set to 'yes' or 'no' to configure auto rotation to move backwards or forwards (relative to direction)</li>
                                    <li> <strong>hiddenMsg :</strong> Hidden text message for screen reader users to convey supplementary information</li>
                                </ul>
                                <p> <strong>Group attribute definitions:</strong></p>
                                <ul>
                                    <li> <strong>name :</strong> The shared name of the group, which will be displayed visually if showGroup='yes'</li>
                                </ul>
                                <p> <strong>Slide attribute definitions:</strong></p>
                                <ul>
                                    <li> <strong>announce :</strong> The text that will be announced to screen reader users when a slide is manually changed using the navigation buttons.
                                        <br />
                                        If the group tag 'name' attribute value matches the slide tag 'announce' attribute value, then set announce to "" to prevent redundancy for screen reader users.
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
$A.setCarousel( $A.getEl('myCarousel') , 'path/file.xml' , defaultIndexValue , {
// Configure optional key / value mapping overrides
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter is the DOM node container element where the carousel will be inserted.</p>
                                    </li>
                                    <li>
                                        <p> The second parameter is the file path for the associated XML file.</p>
                                    </li>
                                    <li>
                                        <p> The third parameter is the default slide index value when the carousel is rendered.</p>
                                        <p> When using a flat carousel, this should be of type 'number', such as 0; when using a grouped carousel, this should be of type 'string', such as '0,0'
                                        </p>
                                    </li>
                                    <li>
                                        <p> The fourth parameter is a key / value map of optional overrides to customize functionality.</p>

                                        <p> <strong>Example:</strong></p>
                                        <pre class="brush: js;">
{

// Pause rotation automatically when carousel is first loaded. (Added in R2.9 for use with a Play/Pause button)
pauseRotation: false,

// Set the classes for the three floating Div panels that comprise the carousel

// The left Div where the Prev Slide and Prev Group buttons are rendered
lNavCls: 'lNav',
// The center Div where the slides are cycled within a relatively positioned container
contentCls: 'centerContent',
// The right Div where the Next Slide and Next Group buttons are rendered
rNavCls: 'rNav',

// Set the nav button element type
// ('button' is recommended so that the action is automatically triggered when accesskeys are pressed, which doesn't happen for other element types
btnTag: 'button',

// Override the default inner span tag inserted within the nav button element, which is inserted using innerHTML
prevBtnInsertedTag: '<i class="icon prev"></i>',
nextBtnInsertedTag: '<i class="icon next"></i>',
prevGroupBtnInsertedTag: '<i class="icon prev group"></i>',
nextGroupBtnInsertedTag: '<i class="icon next group"></i>',

// Set the shared class name for all nav buttons
btnCls: 'navButton',

// Set the class name for the Next and Previous Slide buttons
btnSlideCls: 'navSlideButton',

// Set the class name for the Next and Previous Group buttons (if applicable)
btnGroupCls: 'navGroupButton',

// Set the class name for the Group Name container element (Div tag), which is optionally rendered above or below the center slide container
groupNameCls: 'groupName',

// Set the hidden heading level for screen reader users (defaults to 3 if omitted)
ariaLevel: 2,

// Set optional callbacks for the slide rendering action
handlers: {

// Runs every time a new slide completes rendering
complete: function(dc){

// 'this' is the Carousel AccDC Object, and is the same as the 'dc' argument
// The content of the new slide is contained within the DOM node dc.containerDiv
// E.G alert(dc.containerDiv.innerHTML);
// dc.top is the top level AccDC Object for the carousel, which can be used to share data between handler functions.

// Other DOM node properties that are available here
// dc.top.btn.P : The Prev Button DOM node
// dc.top.btn.N : The Next Button DOM node
// dc.top.btn.PG : The Prev Group Button DOM node
// dc.top.btn.NG : The Next Group Button DOM node

// Available state and index values
// dc.groupVal : the current index value of the currently active Group (if applicable)
// dc.groupMax : the maximum number of Groups within the carousel
// dc.slideVal : the current index value of the newly loaded slide (relative to siblings if contained within a Group)
// dc.slideMax : the maximum number of Slides within the Group or carousel (if contained within a flat list)

},

// Runs every time the auto rotation of a carousel stops or resumes rotating

stopStateChange: function(isStopped, dc){
// isStopped or paused = true or false
// Or for granular detection
// dc.isStopped = true or false
// dc.isPaused = true or false
},

// Runs every time the Previous Slide button is clicked
btnPrev: function(ev, dc){

// 'this' is the button element DOM node
// 'dc' is the Carousel AccDC Object
// dc.top is the top level AccDC Object for the carousel, which can be used to share data between handler functions.

// Other DOM node properties that are available here
// dc.btn.P : The Prev Button DOM node
// dc.btn.N : The Next Button DOM node
// dc.btn.PG : The Prev Group Button DOM node
// dc.btn.NG : The Next Group Button DOM node

// Available state and index values
// dc.groupVal : the current index value of the currently active Group (if applicable)
// dc.slideVal : the current index value of the newly loaded slide (relative to siblings if contained within a Group)

// Return false to prevent the previous slide from rendering
},

// Runs every time the Next Slide button is clicked
btnNext: function(ev, dc){

// 'this' is the button element DOM node
// 'dc' is the Carousel AccDC Object
// dc.top is the top level AccDC Object for the carousel, which can be used to share data between handler functions.

// Other DOM node properties that are available here
// dc.btn.P : The Prev Button DOM node
// dc.btn.N : The Next Button DOM node
// dc.btn.PG : The Prev Group Button DOM node
// dc.btn.NG : The Next Group Button DOM node

// Available state and index values
// dc.groupVal : the current index value of the currently active Group (if applicable)
// dc.slideVal : the current index value of the newly loaded slide (relative to siblings if contained within a Group)

// Return false to prevent the next slide from rendering
},

// Runs every time the Previous Group button is clicked
btnPrevG: function(ev, dc){

// 'this' is the button element DOM node
// 'dc' is the Carousel AccDC Object
// dc.top is the top level AccDC Object for the carousel, which can be used to share data between handler functions.

// Other DOM node properties that are available here
// dc.btn.P : The Prev Button DOM node
// dc.btn.N : The Next Button DOM node
// dc.btn.PG : The Prev Group Button DOM node
// dc.btn.NG : The Next Group Button DOM node

// Available state and index values
// dc.groupVal : the current index value of the currently active Group (if applicable)
// dc.slideVal : the current index value of the newly loaded slide (relative to siblings if contained within a Group)

// Return false to prevent the previous group from rendering
},

// Runs every time the Next Group button is clicked
btnNextG: function(ev, dc){

// 'this' is the button element DOM node
// 'dc' is the Carousel AccDC Object
// dc.top is the top level AccDC Object for the carousel, which can be used to share data between handler functions.

// Other DOM node properties that are available here
// dc.btn.P : The Prev Button DOM node
// dc.btn.N : The Next Button DOM node
// dc.btn.PG : The Prev Group Button DOM node
// dc.btn.NG : The Next Group Button DOM node

// Available state and index values
// dc.groupVal : the current index value of the currently active Group (if applicable)
// dc.slideVal : the current index value of the newly loaded slide (relative to siblings if contained within a Group)

// Return false to prevent the next group from rendering
}

},

// Customize the DOM rendering order or add additional controls to the DOM when rendered within the carousel
renderFn: function(parentDiv, leftDiv, centerDiv, bufferDiv, rightDiv, btnPrev, btnNext, isGrouped, btnPrevGroup, btnNextGroup){
parentDiv.appendChild(leftDiv);
parentDiv.appendChild(centerDiv);
centerDiv.appendChild(bufferDiv);
parentDiv.appendChild(rightDiv);
leftDiv.appendChild(btnPrev);
rightDiv.appendChild(btnNext);

if (isGrouped){
leftDiv.appendChild(btnPrevGroup);
rightDiv.appendChild(btnNextGroup);
}

}

}
</pre>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> When the carousel is instantiated, it includes many nested AccDC Objects that are bound using parent / child relationships.</p>
                                <p> The top level ID for the carousel matches the ID attribute value of the insertion point container element, making it
                                    possible to control the carousel programmatically if desired.</p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: js;">
// If the insertion point DIV tag includes id="myCarousel":
// Get a reference to the Carousel AccDC Object
var dc = $A.reg['myCarousel'];

// Which you can then use to access stored data
var data = serialize(dc.form);

// Or close the carousel and remove it from the DOM
dc.close();

// All other AccDC API properties and methods are similarly available if desired.

// Also, the following Carousel specific properties and methods are available here too

// Set the carousel to a specific slide number, which must be equal to or greater than 0 to match the array index value

dc.setSlide(slideNumber);

// Or the same when using a grouped carousel

dc.setSlide(slideNumber, groupNumber);

// Programmatically stop auto cycling of a carousel

dc.enableAuto(false);

// Programmatically restart auto cycling of a carousel

dc.enableAuto(true);

// Return the current stopped state of an auto rotating carousel

var isStopped = dc.isStopped();
</pre>
                                <p> <strong>Important:</strong> The Carousel AccDC Object consists of many nested AccDC Objects which act as moving parts, similar to cogwheels within the construct.
                                    So when <code>dc.close()</code> is used to close the carousel, it, including all of its nested objects, are destroyed completely
                                    (This means that stored data will no longer be available programmatically after a carousel is closed).
                                    <br />
                                    This is done to ensure that duplication and scheduling conflicts don't arise when dynamic content panels are swapped, causing the same carousel structure to be reloaded.
                                </p>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample carousels in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what they look like.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a focus outline
                                    clearly shows which elements have focus, and your newly styled carousel will be accessible.</p>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" ><button id="drag-and-drop">Drag and Drop</button></h3>
                            <div class="content hdn">
                                <p> Drag and Drop isn't called for much as part of a general feature set, but it's good to know how to make this
                                    functionality accessible for both screen reader and keyboard only users.</p>
                                <p> Expected behaviors: All draggable objects must be accessible from the keyboard with or without a screen reader
                                    running, and hidden links should be used to identify draggable objects and the location of drop zones.</p>
                                <p> The Drag and Drop Module automates these processes by adding all related event handlers and managing all related rendering procedures.</p>
                                <ul>
                                    <li> Drag and Drop controls with offscreen drag links, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Drag and Drop/demo.htm"> Coding Arena/Drag and Drop/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
$A.setDragAndDrop({
// Configure functionality using a key / value map
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter configures drag and drop functionality using a key / value map.</p>
                                        <p><strong> Example:</strong></p>

                                        <pre class="brush: js;">
{

// Specify the draggable objects using a CSS Selector
setDrag: 'ul#options li > img',

// Specify the initial drop zone
setDrop: 'div.chosenBooks',

// CSS Selector or DOM node that specifies an optional strategic focus point where programmatic focus will return after a drop action completes
returnFocusTo: 'div.chosenBooks h3',

// Set the context node
root: document,

// Now, since the hidden links need custom link text for each draggable item,
// we're going to recursively query the data-label attribute for every image and return it
setName: function(obj){
// 'obj' is the object that matches the CSS Selector above in 'setDrag'
return $A.getAttr(obj, 'data-label');
},

// Set the initial styles for the morphed AccDC Object, which will need absolute positioning
cssObj:
{
position: 'absolute',
zIndex: 1
},

// Prevent block formatting when surrounding divs are added
displayInline: true,

// Run script before the AccDC Object opens
runBefore: function(dc){

// Do stuff

},

// Run script after the AccDC Object opens
runAfter: function(dc){

// Do stuff

},

// Configure drag and drop event handlers
on: {

// Fire when the mouse moves a minimum distance.        
dragStart: function(ev, dd, dc){
// 'ev' is the event object
// 'dd' is the Drag and Drop custom event object
// 'dc' is the AccDC Object for the draggable object
},

// Fire every time the mouse moves when dragging.  
drag: function(ev, dd, dc){
// 'ev' is the event object
// 'dd' is the Drag and Drop custom event object
// 'dc' is the AccDC Object for the draggable object
},

// Fire when the dragged element moves within the tolerance of a drop target element.  
dropStart: function(ev, dd, dc){
// 'ev' is the event object
// 'dd' is the Drag and Drop custom event object
// 'dc' is the AccDC Object for the draggable object
},

// Fire when the dragged element is dropped within the tolerance of a drop target element.  
drop: function(ev, dd, dc){
// 'ev' is the event object
// 'dd' is the Drag and Drop custom event object
// 'dc' is the AccDC Object for the draggable object
},

// Fire when the dragged element moves out of the tolerance of a drop target element.  
dropEnd: function(ev, dd, dc){
// 'ev' is the event object
// 'dd' is the Drag and Drop custom event object
// 'dc' is the AccDC Object for the draggable object
},

// Fire after all other drag and drop handlers have fired.  
dragEnd: function(ev, dd, dc){
// 'ev' is the event object
// 'dd' is the Drag and Drop custom event object
// 'dc' is the AccDC Object for the draggable object
}

},

// Restrict draggability, since there's no point in having stuff wiz around everywhere...
confineTo: 'div.booksWrapper',

// Set the drop animation time length for keyboard users in milliseconds
duration: 2000,

// Set keywords for screen reader and keyboard only users
dragText: 'Move',
toText: 'to',

// IMPORTANT: All dropTarget elements must include a data-label attribute to specify a unique name for the drop region for screen reader and keyboard only users.
// View the Coding Arena HTML markup for examples.

actionText: 'Dragging',

// Override default relative positioning to use absolute instead
// Effects only the hidden drag links when they receive focus
ddCSS:
{
position: 'absolute',
zIndex: 10
},

// Set class names for the drag links
dragClassName: 'ddLink'

}
</pre>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> DD Object Properties</span></h4>
                                </div>
                                <p> The properties and methods of the <code>'dd'</code> drag and drop custom event object are as follows:</p>
                                <p> <strong>For drag events:</strong></p>
                                <ul>
                                    <li> <strong>target (DOM Node) : </strong>
                                        The drag element to which the event handler has been bound. (Always the same as "this" within a drag event handler) </li>
                                    <li> <strong>drag (DOM Node) : </strong>
                                        The dragged element to which the drag event has been bound. </li>
                                    <li> <strong>proxy (DOM Node) : </strong>
                                        The dragged element which determines the drop target tolerance. </li>
                                    <li> <strong>drop (Array) : </strong>
                                        An array of all active drop targets for the current drag instance. </li>
                                    <li> <strong>available (Array) : </strong>
                                        An array of all available drop targets for the current instance. </li>
                                    <li> <strong>update (Method) : </strong>
                                        Helper function that updates the locations of all available drop targets in the current drag instance. </li>
                                    <li> <strong>startX (Number) : </strong>
                                        The horizontal location of the "mousedown" event. </li>
                                    <li> <strong>startY (Number) :</strong>
                                        The vertical location of the "mousedown" event. </li>
                                    <li> <strong>deltaX (Number) : </strong>
                                        The horizontal distance moved from "startX". </li>
                                    <li> <strong>deltaY (Number) : </strong>
                                        The vertical distance moved from "startX". </li>
                                    <li> <strong>originalX (Number) :</strong>
                                        The starting horizontal position of the dragged element. </li>
                                    <li> <strong>originalY (Number) :</strong>
                                        The starting vertical position of the dragged element. </li>
                                    <li> <strong>offsetX (Number) :</strong>
                                        The moved horizontal position of the dragged element. </li>
                                    <li> <strong>offsetY (Number) : </strong>
                                        The moved vertical position of the dragged element. </li>
                                </ul>
                                <p> <strong>For drop events:</strong></p>
                                <ul>
                                    <li> <strong>target (DOM Node) : </strong>
                                        The drop element to which the event handler has been bound. (Always the same as "this" within an event handler) </li>
                                    <li> <strong>drag (DOM Node) :</strong>
                                        The dragged element to which the drag event has been bound. </li>
                                    <li> <strong>proxy (DOM Node) :</strong>
                                        The dragged element, which determines the drop target tolerance. </li>
                                    <li> <strong>drop (Array) :</strong>
                                        Array of all active drop targets for the current drag instance. </li>
                                    <li> <strong>available (Array) :</strong>
                                        Array of all available drop targets for the current drag instance. </li>
                                    <li> <strong>update (Method) :</strong>
                                        Helper function that updates the locations of all available drop targets in the current drag instance. </li>
                                    <li> <strong>startX (Number) :</strong>
                                        The horizontal location of the "mousedown" event. </li>
                                    <li> <strong>startY (Number) :</strong>
                                        The vertical location of the "mousedown" event. </li>
                                    <li> <strong>deltaX (Number) :</strong>
                                        The horizontal distance moved from "startX". </li>
                                    <li> <strong>deltaY (Number) :</strong>
                                        The vertical distance moved from "startX". </li>
                                    <li> <strong>originalX (Number) :</strong>
                                        The starting horizontal position of the dragged element. </li>
                                    <li> <strong>originalY (Number) :</strong>
                                        The starting vertical position of the dragged element. </li>
                                    <li> <strong>offsetX (Number) : </strong>
                                        The moved horizontal position of the dragged element. </li>
                                    <li> <strong>offsetY (Number) :</strong>
                                        The moved vertical position of the dragged element. </li>
                                </ul>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control" >
                                <button id="footnotes">Footnotes</button>
                            </h3>
                            <div class="content hdn">
                                <p> Footnotes are simple control types that are easy to make accessible.</p>
                                <p> Expected behaviors: Provide a link as the footnote that jumps to the footnote text, provide a link at the footnote
                                    text that returns focus back to the triggering element (and account for multiple footnote links that lead to the same
                                    footnote text), and provide meaningful textual equivalents for screen reader users.</p>
                                <p> The Footnotes Module automates these processes by creating all necessary anchor elements, adding all related event
                                    handlers, and managing keyboard focus appropriately.</p>
                                <ul>
                                    <li> Footnote controls with <code>aria-label</code>, and <code>aria-hidden</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Footnotes/Footnotes (Internal)/demo.htm"> Coding Arena/Footnotes/Footnotes (Internal)/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <p> <strong>Footnote text in the body:</strong></p>
                                <pre class="brush: html;">
&lt;span class="accFootnote" data-footnote="footnotePointer1">My body text&lt;/span>
</pre>
                                <p> A SPAN tag should be used to surround the word or phrase that you want to designate as a footnote within the body content.</p>
                                <p> Required attributes for Footnote SPANs in the body:</p>
                                <ul>
                                    <li> <strong>class="accFootnote" :</strong> The class name that specifies a footnote link section to be bound.
                                        (All footnote tags should share the same class name.)</li>
                                    <li> <strong>data-footnote :</strong> Contains the ID attribute value that points to the specified footnote text at the bottom of the page.
                                        (More than one footnote may point to the same footnote text by using the same ID value if multiple footnotes reference the same text)</li>
                                </ul>
                                <p> <strong>Important: </strong>When the footnotes are parsed using the class name, a numerical index link is generated and appended to the footnote SPAN tag.</p>
                                <p> <strong>Footnote Text nodes in the footer:</strong></p>
                                <pre class="brush: html;">
&lt;span id="footnotePointer1">&lt;/span>
</pre>
                                <p> An empty SPAN tag should be used to set the focus point of the Footnote Text node in the footer, which is where focus will be moved to when the footnote link in the body is activated.</p>
                                <p> The Footnote Text SPAN tag must be placed just before the footnote text in the source code order, since this is where the Footnote Back Link will be inserted.
                                    <br />
                                    (This is also where focus is moved to when a footnote link in the body is activated, which must be before the relevant footnote text, and not after.)
                                </p>
                                <p> The Footnote Text SPAN tag must be empty, and must not surround the footnote text. Doing so will cause the inserted Back Link to
                                    appear after the footnote text, instead of before it, as expected.</p>
                                <p> <strong>Required attributes for Footnote Text SPANs in the footer:</strong></p>
                                <ul>
                                    <li> <strong>id="uniqueId" :</strong> The unique ID of the Footnote Text node.
                                        <br />
                                        (This must match the value of data-footnote so that each associated footnote link in the body will be properly bound to this focusable node in the footer.)
                                    </li>
                                </ul>
                                <p> The following attributes are handled automatically by the Footnotes Module:</p>
                                <ul>
                                    <li> <code>aria-label</code></li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
$A.setFootnotes('.accFootnote', document, {
// Configure functionality key / value mappings
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter is a CSS Selector that specifies all footnote SPAN tags in the body.</p>
                                    </li>
                                    <li>
                                        <p> The second parameter is the context DOM node where footnote SPANs will be queried using the CSS Selector declared in parameter one.
                                            (This makes it possible to query footnotes contained within iFrame documents)</p>
                                    </li>
                                    <li>
                                        <p> The third parameter configures footnote functionality using a key / value map.</p>

                                        <p> <strong>Example:</strong></p>

                                        <pre class="brush: js;">
{

// Set the tooltip text for the footnote (this will also be the accessible name for screen reader users)
fnText: 'Footnote',

// Set the footnote character or text that will comprise the visual link text for returning footnotes
fnChar: '&#8224;',

// Set the tooltip text for the footnote back links (this will also be the accessible name for screen reader users)
backText: 'Back to Footnote'

}
</pre>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample footnotes in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what they look like.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a focus outline
                                    clearly shows which elements have focus, and your newly styled footnotes will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Bootstrapping</span></h4>
                                </div>
                                <p> Bootstrapping is designed to handle common control types that span multiple pages with similar setup configurations.</p>
                                <p> The footnotes within the Bootstrap folders are configured using HTML5 <code>"data-"</code> attributes within the HTML markup.</p>
                                <p> When the Bootstrap Module (<em>"accdc_bootstrap.js"</em>) is executed, it parses the newly loaded DOM, recognizes the class <code>"accFootnote"</code>,
                                    then configures the same module declaration as previously described using these HTML5 attributes.</p>
                                <p> Available HTML5 attributes for footnote SPANs in the body:</p>
                                <ul>
                                    <li> <strong>data-footnote :</strong> The ID attribute value of the matching footnote text anchor tag elsewhere in the document
                                        (Focus will be moved to this anchor tag when the footnote link is activated)</li>
                                    <li> <strong>data-fntext :</strong> The tooltip text for the footnote
                                        (this will also be the accessible name for screen reader users)</li>
                                    <li> <strong>data-fnchar :</strong> The footnote character or text that will comprise the visual link text for returning footnotes</li>
                                    <li> <strong>data-backtext :</strong> The tooltip text for the footnote back links
                                        (this will also be the accessible name for screen reader users)</li>
                                </ul>
                                <p> Additional HTML5 attributes can be added to enhance functionality by editing the file <em>"accdc_bootstrap.js"</em>.</p>
                                <p> Required attributes:</p>
                                <ul>
                                    <li> <strong>class="accFootnote" :</strong> The bootstrap class name that specifies a footnote link to be bound.
                                        (Must only be on footnote links in the body, and not upon footnote text anchors in the footer)</li>
                                    <li> <strong>id :</strong> The unique ID of the footnote text anchor tag.
                                        (Must only be on footnote text anchors, and must match the data-footnote attribute values for associated footnote links within the body)</li>
                                </ul>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" >
                                <button id="inline-form-field-validation">Inline Form Field Validation</button>
                            </h3>
                            <div class="content hdn">
                                <p> Error Tooltips provide a simple way to validate user input prior to server side interaction.</p>
                                <p> Dynamic Help Tooltips work in a similar fashion, by suggesting responses that must also pass validation. </p>
                                <p> Both fulfill the same role, but on opposite spectrums.</p>
                                <p> Error Tooltips occur after a form field loses focus, which is when validation occurs.</p>
                                <p> Dynamic Help Tooltips validate user input as the interaction occurs, so that responses can be adjusted before focus is moved to the next field.</p>
                                <p> The Form Field Validation Module automates these processes by adding all related event handlers and managing all related rendering procedures.</p>
                                <ul>
                                    <li> Simple Help Tooltip control with a named region, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Inline Form Field Validation and Dynamic Help Tooltips/Dynamic Help Tooltip/demo.htm"> Coding Arena/Inline Form Field Validation and Dynamic Help Tooltips/Dynamic Help Tooltip/demo.htm</a>
                                    </li>
                                    <li> Simple Error Tooltip control with a named region, <code>aria-required</code>, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Inline Form Field Validation and Dynamic Help Tooltips/Inline Form Field Validation (Simple)/demo.htm"> Coding Arena/Inline Form Field Validation and Dynamic Help Tooltips/Inline Form Field Validation (Simple)/demo.htm</a>
                                    </li>
                                    <li> Complex Error Tooltip control with a named region, <code>aria-required</code>, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Inline Form Field Validation and Dynamic Help Tooltips/Inline Form Field Validation (Complex)/demo.htm"> Coding Arena/Inline Form Field Validation and Dynamic Help Tooltips/Inline Form Field Validation (Complex)/demo.htm</a>
                                    </li>
                                    <li> Mixed Error and Help Tooltip controls with a named region, <code>aria-required</code>, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Inline Form Field Validation and Dynamic Help Tooltips/Inline Form Field Validation with Dynamic Help Tooltip (Simple)/demo.htm"> Coding Arena/Inline Form Field Validation and Dynamic Help Tooltips/Inline Form Field Validation with Dynamic Help Tooltip (Simple)/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <p> Any standard form field.</p>
                                <p> <strong>Examples:</strong></p>
                                <pre class="brush: html;">
&lt;label for="field1"> My Text Field: &lt;/label>
&lt;input type="text" id="field1" name="whatever1" />

&lt;label for="field2"> My Select : &lt;/label>
&lt;select id="field2" name="whatever2">
&lt;option value="v0"> Option One &lt;/option>
&lt;option value="v1"> Option Two &lt;/option>
&lt;/select>

&lt;input type="checkbox" id="field3" name="whatever3" />
&lt;label for="field3"> My Checkbox &lt;/label>

&lt;input type="radio" id="field4" name="whatever4" />
&lt;label for="field4"> My Radio Button &lt;/label>
</pre>
                                <p> The following attributes are handled automatically by the Form Field Validation Module:</p>
                                <ul>
                                    <li> <code>aria-required</code></li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
$A.setFormFields( FormElementDOM-Node , {

'formFieldId1': {
// Configure error handling for the form field with id="formFieldId1"
},

'formFieldId2': {
// Configure error handling for the form field with id="formFieldId2"
}

}, function(ev){
// 'ev' is the onSubmit event object for the form element passed in parameter one
// 'this' is the form element
// Optionally do stuff before the form is submitted
// use ev.preventDefault() to cancel if desired
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter is the form element where the onSubmit event is attached.</p>
                                    </li>
                                    <li>
                                        <p> The second parameter configures form field bindings using a key / value map.</p>
                                        <p> <strong>Example:</strong></p>

                                        <pre class="brush: js;">
{

// Configure an error handling tooltip for a form field with a specific ID attribute value
'formFieldId1': {

errorText: 'Initial error text to be displayed',

// Fire every time the field loses focus
validate: function(ev, dc){
// 'this' is the form field to be validated
// 'dc' is the Tooltip AccDC Object
// All other AccDC API properties and methods apply to the 'dc' object as well
// return true to pass validation, or false to fail
},

// Optionally choose to hide or show the tooltip visually
// false is set by default if omitted
hideError: false,

// Set a class to be toggled when an error is detected
// This will be bound to the dc.triggerObj DOM node, or optionally to the dc.targetObj or dc.classObj DOM node instead if declared.
// 'validateError' is set by default if omitted
toggleClass: 'validateError',

overrides: {

// Change the beginning and ending boundary role text for screen reader users
role: 'error',

// Set a class for the tooltip container
className: 'errorTooltip',

// Change the DOM insertion point to another DOM node by setting targetObj.
// The triggering Input field is used by default if omitted
targetObj: DOM-Node,

// Set a node where the toggleClass property value will be toggled when validation fails
// The triggering Input field or targetObj element is used by default if omitted
classObj: DOM-Node,

// Optionally set the element where visual positioning calculations will be bound to
posAnchor: DOM-Node

// Additional AccDC API properties and methods to set as functionality and behavior overrides go here as well

}

},

// Configure a dynamic help tooltip for a form field with a specific ID attribute value
'formFieldId2': {

helpText: 'Initial help text to be displayed',

// Fire every time the value changes
validate: function(ev, dc){
// 'this' is the form field to be validated
// 'dc' is the Tooltip AccDC Object
// dc.source can be used to dynamically change the tooltip content (HTML markup is accepted)
// dc.open() will reopen the tooltip and display the updated content
// dc.close() will close the tooltip if desired
// All other AccDC API properties and methods apply to the 'dc' object as well
// return true to pass validation, or false to fail
},

// Assign a class to be toggled
toggleClass: 'passedValidation',

// Set the above class to be toggled only when validation is true, and not when false
togglePassed: true,

overrides: {

// Change the beginning and ending boundary role text for screen reader users
role: 'help',

// Set a class for the tooltip container
className: 'helpTooltip',

// Change the DOM insertion point to another DOM node by setting targetObj.
// The triggering Input field is used by default if omitted
targetObj: DOM-Node,

// Set a node where the toggleClass property value will be toggled when validation passes or fails
// (Depends whether 'togglePassed' is set to true or false)
// The triggering Input field or targetObj element is used by default if omitted
classObj: DOM-Node,

// Optionally set the element where visual positioning calculations will be bound to
posAnchor: DOM-Node

// Additional AccDC API properties and methods to set as functionality and behavior overrides go here as well

}

}

}
</pre>
                                    </li>
                                    <li>
                                        <p> The third parameter is an optional onSubmit handler that will run just before the form is submitted after validation passes.</p>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample tooltips in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what they look like.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a focus outline
                                    clearly shows which elements have focus, and your newly styled tooltips will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Implementation Notes</span></h4>
                                </div>
                                <p> All form fields must be explicitly labeled to ensure accessibility for the highest percentage of people.</p>
                                <p> Explicit labelling can be achieved using the LABEL and INPUT elements, by matching the LABEL tag's For attribute with the INPUT tag's Id attribute,
                                    <br />
                                    or by setting the <code>Title</code> attribute on the INPUT tag with an informative label,
                                    <br />
                                    or by setting the <code>aria-label</code> attribute on the INPUT tag with an informative label,
                                    <br />
                                    or by setting the <code>aria-labelledby</code> attribute on the INPUT tag that references the ID of an informative label.
                                </p>
                                <p> The advantage of using an explicitly associated LABEL element and INPUT tag, is that mouse users can click the label text and automatically
                                    activate the form field that it applies to. Voice navigation software also uses explicit LABEL/INPUT tag associations to aid navigation.</p>
                                <p> This type of functionality does not occur when using the <code>Title</code> attribute or ARIA to explicitly associate a label.</p>
                                <p> When an INPUT element has an explicitly associated LABEL tag, a <code>Title</code> attribute should not be included. Screen readers often use an
                                    order of precedence when reading form field labels, and will often announce one or the other, but not both.</p>
                                <p> When a form field has an explicit LABEL, additional information can also be associated with the form field using <code>aria-describedby</code>,
                                    which will automatically be announced to screen reader users when focus is set to that field.</p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: html;">
&lt;label for="field1"> My Text Field: &lt;/label>
&lt;input type="text" id="field1" aria-describedby="additional1" name="whatever" />
&lt;span id="additional1"> Supplementary Text &lt;/span>
</pre>
                                <p><strong> Important:</strong> When implementing supplementary text to be announced for screen reader users, never
                                    use <code>"display:none"</code> or <code>"visibility:hidden"</code> to hide the text that is being announced.
                                    Doing so will make it impossible for screen reader users to browse the supplementary text using the arrow keys if clarification is needed.
                                    If you wish to hide the supplementary text from sighted users, use offscreenText instead.</p>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" >
                                <button id="modals">Modals</button>
                            </h3>
                            <div class="content hdn">
                                <p> A Modal is a relatively simple control type, and can easily be made accessible.</p>
                                <p> <strong>Expected behaviors:</strong> Ensure that the background content is hidden from screen reader users, ensure that the beginning and
                                    ending boundaries are conveyed to screen reader users, make sure the modal can be closed from the keyboard, and ensure that
                                    circular tabbing confines keyboard focus within the modal content.</p>
                                <p> The Modal Module automates these processes by instantiating the content as a Modal AccDC Object, which can be configured
                                    and controlled programmatically if desired to enhance functionality.</p>
                                <ul>
                                    <li> Basic Modal control with <code>role=region</code> plus <code>aria-label</code>, and <code>aria-hidden</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Modals/Modal (Internal Content)/demo.htm"> Coding Arena/Modals/Modal (Internal Content)/demo.htm</a>
                                    </li>
                                    <li> Basic Modal control with <code>role=dialog</code> plus <code>aria-label</code> plus <code>aria-describedby</code> plus <code>aria-modal</code>, and <code>aria-hidden</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Modals/Modal (Internal Content With role=dialog)/demo.htm"> Coding Arena/Modals/Modal (Internal Content With role=dialog)/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <p> <strong>For the triggering element:</strong></p>
                                <pre class="brush: html;">
&lt;a href="#" id="modalTrigger"> Triggering Element &lt;/a>
</pre>
                                <p> (A triggering element is not actually required)</p>
                                <p> <strong>For the modal container element:</strong></p>
                                <pre class="brush: html;">
&lt;div id="modalContainerId">
Modal content goes here.
&lt;/div>
</pre>
                                <p> <strong>Required HTML5 attributes for the modal container element:</strong></p>
                                <ul>
                                    <li> <strong>data-first="true" :</strong> Must be added to the first focusable active element within the modal to control circular tabbing and <kbd><kbd>shift</kbd>+<kbd>tabbing</kbd></kbd>.</li>
                                    <li> <strong>data-last="true" :</strong> Must be added to the last focusable active element within the modal to control circular tabbing and <kbd><kbd>shift</kbd>+<kbd>tabbing</kbd></kbd>.</li>
                                </ul>
                                <p> Also, when Implementing a Close link or button, the className must match the <code>"closeClassName"</code> property within the JavaScript invocation statement.
                                    (If not explicitly set, the default value "lbClose" will be set by default, and should be used for all Close links or buttons)
                                    Doing so will automatically bind the AccDC Close Methods with this element, and return keyboard focus properly when the AccDC Object is closed.</p>
                                <p> <strong>The following attributes are handled automatically by the Modal Module:</strong></p>
                                <ul>
                                    <li> <code>aria-hidden</code></li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
var modalId = $A.setModal({
// Configure functionality key / value mappings
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter configures modal functionality using a key / value map.</p>

                                        <p> <strong>Example:</strong></p>
                                        <pre class="brush: js;">
{

// Set a unique ID for the modal AccDC Object, which can be referenced through $A.reg['uniqueId']
id: 'uniqueId',

// Set the screen reader accessible boundary text values
role: 'Modal',

// Set a triggering element using either the DOM node or a CSS Selector
// (Only if a triggering element is present, remove otherwise)
trigger: '#modalTrigger',

// Prevent focus from returning to a triggering element
// (Only if a triggering element is not present, remove otherwise)
returnFocus: false,

// Specify that literal content is to be rendered
// (Only if pulling content from within the same page, remove otherwise)
mode: 0,

// Use removeChild to grab the desired modal content from within the document
// This is important to prevent ID attribute conflicts later
// (Only if pulling content from within the same page, remove otherwise)
source: $A.getEl('modalContainerId').parentNode.removeChild($A.getEl('modalContainerId')),

// Specify the file path and ID attribute of the modal container element
// (Only if pulling content from an external page, remove otherwise)
source: 'files/modal.html #modalContainerId',

// Set the class name for the top level container element
className: 'modal',

// Set the class name for the screen reader accessible close link
// This must match the class name for any close links or buttons within the modal content, which will cause Close Method Binding to automatically occur when the content is rendered.
closeClassName: 'lbClose',

// Enable the ARIA modal dialog design pattern as documented at
// http://whatsock.com/training/matrices/#dialog
ariaDialog: false,

// Enable role=alert to announce the Dialog content no matter which window is currently active.
alertDialog: false,

// Run script after the Modal AccDC Object finishes loading
runAfter: function(dc){

// 'dc' is the Modal AccDC Object

// Set a background Div for the modal, so it will appear as a lightbox
dc.backdrop = $A.createEl('div', null, null, 'modalBackdrop', document.createTextNode(' '));
// Now insert the backdrop Div before the Modal AccDC Object top level container
dc.accDCObj.parentNode.insertBefore(dc.backdrop, dc.accDCObj);

// Now configure content bindings within the modal
// dc.containerDiv is the DOM node where the newly rendered modal content is contained

// All other AccDC API properties and methods are similarly available for the 'dc' object

},

// Run script after the Modal AccDC Object finishes closing
runAfterClose: function(dc){
// Remove the backdrop Div
if (dc.backdrop)
dc.backdrop.parentNode.removeChild(dc.backdrop);
}

// (Other AccDC API properties and methods can be declared here also to customize functionality and behavior)

}
</pre>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> Every modal is registered as an AccDC Object, the ID of which is returned by the JavaScript invocation statement.</p>
                                <p> This means that you can programmatically control each modal using JavaScript.</p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: js;">
// Get a reference to the Modal AccDC Object using the ID  stored in the modalId variable
var dc = $A.reg[modalId];

// Now invoke the modal
dc.open();

// Or close the modal
dc.close();

// All other AccDC API properties and methods can be applied here as well.
</pre>
                                <div class="hd">
                                    <h4><span> Triggering Element Requirements</span></h4>
                                </div>
                                <p> A triggering element for a modal is not required, but when one is present, you should always use an active element for this purpose
                                    to ensure accessibility for both screen reader and keyboard only users.</p>
                                <p> Within the Coding Arena samples, these are standard links (A tags with an Href attribute). However, you can use whatever type of
                                    triggering element you wish, a standard link, button, or image link, with any type of styling.</p>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample modals in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what
                                    they look like. This is demonstrated within the "Shell" folders, where there is no CSS styling for the modal. This is also
                                    useful as a practice template for trying out different styling designs with custom content.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a focus outline
                                    clearly shows which elements have focus, and your newly styled modal will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Bootstrapping</span></h4>
                                </div>
                                <p> Bootstrapping is designed to handle common control types that span multiple pages with similar setup configurations.</p>
                                <p> The modals within the Bootstrap folders are configured using HTML5 <code>"data-"</code> attributes within the HTML markup.</p>
                                <p> When the Bootstrap Module (<em>"accdc_bootstrap.js"</em>) is executed, it parses the newly loaded DOM, recognizes the class <code>"accModal"</code>,
                                    then configures the same module declaration as previously described using these HTML5 attributes.</p>
                                <p> <strong>Available HTML5 attributes for the triggering element:</strong></p>
                                <ul>
                                    <li> <strong>data-src :</strong> The resource path and pointer to the ID attribute of the modal container element.
                                        If set, <code>data-internal</code> should be blank or not included. </li>
                                    <li> <strong>data-internal :</strong> The ID attribute of the modal container element within the same document.
                                        If <code>data-internal</code> is set, <code>data-src</code> should be blank or not included. </li>
                                    <li> <strong>data-role :</strong> The role name that is conveyed to screen reader users as beginning and ending boundary text for
                                        the new content. "Modal" is set by default if no value is specified. </li>
                                </ul>
                                <p> Additional HTML5 attributes can be added to enhance functionality by editing the file <em>"accdc_bootstrap.js"</em>.</p>
                                <p> <strong>Required attributes for the triggering element:</strong></p>
                                <ul>
                                    <li> <strong>class="accModal" :</strong> The bootstrap class name that specifies an accessible modal. </li>
                                    <li> <strong>id :</strong> The unique ID of the element. This value is also registered as the ID of the modal AccDC Object, making it possible to invoke the object programmatically.
                                        <br />
                                        E.G $A.reg.uniqueID.open();
                                        <br />
                                        // All other AccDC API properties and methods are similarly available.
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> Implementation Notes</span></h4>
                                </div>
                                <p> Do not use <code>aria-haspopup</code>. It might sound like a good idea to notify screen reader users that a 'Popup' is attached by adding
                                    the attribute <code>aria-haspopup="true"</code> to the triggering element, but this is not a good idea.</p>
                                <p> Screen readers announce different feedback based on the various combinations of element types and ARIA roles in the markup, which can
                                    lead to confusion and misrepresent the purpose of the feature altogether.</p>
                                <p> <strong>Examples:</strong></p>
                                <pre class="brush: html;">
&lt;!-- Triggering Element One
JAWS 13 and 14 announces as "Has Popup"
NVDA2013 announces as "SubMenu"
-->

&lt;a href="#" aria-haspopup="true"> Triggering Element One &lt;/a>

&lt;!-- Triggering Element Two
JAWS 13 and 14 announces as "Menu"
NVDA2013 announces as "Menu Button SubMenu"
-->

&lt;a href="#" role="button" aria-haspopup="true"> Triggering Element Two &lt;/a>

&lt;!-- Triggering Element Three
JAWS 13 and 14 announces as "Menu"
NVDA2013 announces as "Menu Button SubMenu"
-->

&lt;button aria-haspopup="true"> Triggering Element Three &lt;/button>
</pre>
                                <p> In short, don't use <code>aria-haspopup</code> unless you are triggering a menu.</p>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" >
                                <button id="popups">Popups</button>
                            </h3>
                            <div class="content hdn">
                                <p> A Popup is a relatively simple control type, and can easily be made accessible.</p>
                                <p> <strong>Expected behaviors:</strong> Ensure that the beginning and ending boundaries are conveyed to screen reader users,
                                    make sure the popup can be closed from the keyboard, and ensure that focus moves appropriately when the popup opens and closes.</p>
                                <p> The Popup Module automates these processes by instantiating the content as a Popup AccDC Object, which can be configured and
                                    controlled programmatically if desired to enhance functionality.</p>
                                <ul>
                                    <li> Basic Popup control with offscreen boundary text, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Popups/Popup (Internal Content)/demo.htm"> Coding Arena/Popups/Popup (Internal Content)/demo.htm</a>
                                    </li>
                                    <li> Shell basic Popup control with no CSS, offscreen boundary text, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Popups/Popup (Internal Content Shell)/demo.htm"> Coding Arena/Popups/Popup (Internal Content Shell)/demo.htm</a>
                                    </li>
                                    <li> Basic popup simulated Listbox control with offscreen boundary text, ARIA <code>role=listbox, role=option, aria-posinset, aria-setsize, aria-selected, aria-label</code>, and <code>aria-owns</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Popups/Popup Listbox (Internal Content)/demo.htm"> Coding Arena/Popups/Popup Listbox (Internal Content)/demo.htm</a>
                                    </li>
                                    <li> Basic Popup Scrollable Div control with offscreen boundary text, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Popups/Scrollable Div Popup (External Content)/demo.htm"> Coding Arena/Popups/Scrollable Div Popup (External Content)/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <p> <strong>For the triggering element:</strong></p>
                                <pre class="brush: html;">
&lt;a href="#" id="popupTrigger"> Triggering Element &lt;/a>
</pre>
                                <p> <strong>For the popup container element:</strong></p>
                                <pre class="brush: html;">
&lt;div id="popupContainerId">
Popup content goes here.
&lt;/div>
</pre>
                                <p> When Implementing a Close link or button, the className must match the <code>"closeClassName"</code> property within the JavaScript invocation statement.
                                    (If not explicitly set, the default value <code>"popupClose"</code> will be set by default, and should be used for all Close links or buttons)
                                    Doing so will automatically bind the AccDC Close Methods with this element, and return keyboard focus properly when the AccDC Object is closed.</p>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
var popupId = $A.setPopup({
// Configure functionality key / value mappings
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>The first parameter configures popup functionality using a key / value map.</li>
                                </ol>

                                <p> <strong>Example:</strong></p>
                                <pre class="brush: js;">
{

// Set a unique ID for the Popup AccDC Object, which can be referenced through $A.reg['uniqueId']
id: 'uniqueId',

// Set the screen reader accessible boundary text values
role: 'Popup',

// Set a triggering element using either the DOM node or a CSS Selector
trigger: '#popupTrigger',

// Specify that literal content is to be rendered
// (Only if pulling content from within the same page, remove otherwise)
mode: 0,

// Use removeChild to grab the desired popup content from within the document
// This is important to prevent ID attribute conflicts later
// (Only if pulling content from within the same page, remove otherwise)
source: $A.getEl('popupContainerId').parentNode.removeChild($A.getEl('popupContainerId')),

// Specify the file path and ID attribute of the popup container element
// (Only if pulling content from an external page, remove otherwise)
source: 'files/popup.html #popupContainerId',

// Position the popup on the right of the triggering element
autoPosition: 3,

// Move the Popup AccDC Object 10px to the right, and 20px up when opened
offsetLeft: 10,
offsetTop: -20,

// Set the class name for the top level container element
className: 'popup',

// Set the class name for the screen reader accessible close link
// This must match the class name for any close links or buttons within the popup content, which will cause Close Method Binding to automatically occur when the content is rendered.
closeClassName: 'popupClose',

// Set a visually hidden close link for screen reader users to appear at the end of the popup content
showHiddenClose: true,

// Set the visually hidden close link to appear onFocus (required for 508 compliance if no other keyboard accessible close method is available)
displayHiddenClose: true,

// Set the heading level that will be accessible for screen reader users
ariaLevel: 2,

// Run script after the Popup AccDC Object finishes loading
runAfter: function(dc){
// 'dc' is the Popup AccDC Object
// dc.containerDiv is the DOM node where the newly rendered popup content is contained
// All other AccDC API properties and methods are similarly available for the 'dc' object
},

// Run script after the Popup AccDC Object finishes closing
runAfterClose: function(dc){
// Optionally do stuff
}

// (Other AccDC API properties and methods can be declared here also to customize functionality and behavior)

}
</pre>
                                </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> Every popup is registered as an AccDC Object, the ID of which is returned by the JavaScript invocation statement.</p>
                                <p> This means that you can programmatically control each popup using JavaScript.</p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: js;">
// Get a reference to the Popup AccDC Object using the ID  stored in the popupId variable
var dc = $A.reg[popupId];

// Now invoke the popup
dc.open();

// Or close the popup
dc.close();

// All other AccDC API properties and methods can be applied here as well.
</pre>
                                <div class="hd">
                                    <h4><span> Triggering Element Requirements</span></h4>
                                </div>
                                <p> Regarding the triggering element, you should always use an active element for this purpose to ensure accessibility for both screen reader and keyboard only users.</p>
                                <p> Within the samples, these are standard links (A tags with an Href attribute). However, you can use whatever type of triggering
                                    element you wish, a standard link, button, or image link, with any type of styling. There must be an active element as a triggering element though, to ensure accessibility.</p>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample popups in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what they look
                                    like. This is demonstrated within the "Shell" folders, where there is no CSS styling for the popup. This is also useful as a practice
                                    template for trying out different styling designs with custom content.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a focus outline clearly
                                    shows which elements have focus, and your newly styled popup will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Bootstrapping</span></h4>
                                </div>
                                <p> Bootstrapping is designed to handle common control types that span multiple pages with similar setup configurations.</p>
                                <p> The popups within the Bootstrap folders are configured using HTML5 <code>"data-"</code> attributes within the HTML markup.</p>
                                <p> When the Bootstrap Module (<em>"accdc_bootstrap.js"</em>) is executed, it parses the newly loaded DOM, recognizes the class <code>"accPopup"</code>, then
                                    configures the same module declaration as previously described using these HTML5 attributes.</p>
                                <p><strong> Available HTML5 attributes for the triggering element:</strong></p>
                                <ul>
                                    <li> <strong>data-src :</strong> The resource path and pointer to the ID attribute of the popup container element.
                                        If set, <code>data-internal</code> should be blank or not included. </li>
                                    <li> <strong>data-internal :</strong> The ID attribute of the popup container element within the same document.
                                        If <code>data-internal</code> is set, <code>data-src</code> should be blank or not included. </li>
                                    <li> <strong>data-role :</strong> The role name that is conveyed to screen reader users as beginning and ending boundary text for the new content. "Popup" is set by default if no value is specified.</li>
                                    <li> <strong>data-autoposition :</strong> The autoPosition override, which dynamically positions the new content relative to the triggering element. This reflects the autoPosition property documented within AccDC, and may be a value between 0 and 12. The default is 3 if left blank or not included. </li>
                                    <li> <strong>data-offsetleft :</strong> The offsetLeft override, which dynamically positions the new content relative to the triggering element. The default is 10 if left blank or not included. </li>
                                    <li> <strong>data-offsettop :</strong> The offsetTop override, which dynamically positions the new content relative to the triggering element. The default is -20 if left blank or not included. </li>
                                </ul>
                                <p> Additional HTML5 attributes can be added to enhance functionality by editing the file <em>"accdc_bootstrap.js"</em>.</p>
                                <p> <strong>Required attributes for the triggering element:</strong></p>
                                <ul>
                                    <li> <strong>class="accPopup" :</strong> The bootstrap class name that specifies an accessible popup. </li>
                                    <li> <strong>id :</strong> The unique ID of the element. This value is also registered as the ID of the Popup AccDC Object, making it possible to invoke the object programmatically.
                                        <br />
                                        E.G $A.reg.uniqueID.open();
                                        <br />
                                        // All other AccDC API properties and methods are similarly available.
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> Implementation Notes</span></h4>
                                </div>
                                <p> Do not use <code>aria-haspopup</code>.</p>
                                <p> It might sound like a good idea to notify screen reader users that a 'Popup' is attached by adding the attribute <code>aria-haspopup="true"</code> to the triggering element,
                                    but this is not a good idea.</p>
                                <p> Screen readers announce different feedback based on the various combinations of element types and ARIA roles in the markup,
                                    which can lead to confusion and misrepresent the purpose of the feature altogether.</p>
                                <p> <strong>Examples:</strong></p>
                                <pre class="brush: html;">
&lt;!-- Triggering Element One
JAWS 13 and 14 announces as "Has Popup"
NVDA2013 announces as "SubMenu"
-->

&lt;a href="#" aria-haspopup="true"> Triggering Element One &lt;/a>

&lt;!-- Triggering Element Two
JAWS 13 and 14 announces as "Menu"
NVDA2013 announces as "Menu Button SubMenu"
-->

&lt;a href="#" role="button" aria-haspopup="true"> Triggering Element Two &lt;/a>

&lt;!-- Triggering Element Three
JAWS 13 and 14 announces as "Menu"
NVDA2013 announces as "Menu Button SubMenu"
-->

&lt;button aria-haspopup="true"> Triggering Element Three &lt;/button>
</pre>
                                <p> In short, don't use <code>aria-haspopup</code> unless you are triggering a menu.</p>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" >
                                <button id="progress-bars">Progress Bars</button>
                            </h3>
                            <div class="content hdn">
                                <p> A Progress Bar control is a relatively simple HTML5 control that, nevertheless, does require a specific implementation in order to
                                    work correctly in a backwards compatible manner with Internet Explorer 8.</p>
                                <p> The Progress Bar module automates this process by instantiating a Progress Bar control that can be programmatically set at runtime as values change.</p>
                                <ul>
                                    <li> <strong>Basic Popup Progress control with polyfill:</strong>
                                        <br />
                                        <a target="ca" href="Coding Arena/Progress Bars/Progress Bar (Dynamic Fixed Container with Trigger)/demo.htm"> Coding Arena/Progress Bars/Progress Bar (Dynamic Fixed Container with Trigger)/demo.htm</a>
                                    </li>
                                    <li><strong> Basic Insert Progress control with polyfill:</strong>
                                        <br />
                                        <a target="ca" href="Coding Arena/Progress Bars/Progress Bar (Static Container Insertion with AutoStart)/demo.htm"> Coding Arena/Progress Bars/Progress Bar (Static Container Insertion with AutoStart)/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <p><strong> Unobtrusive:</strong></p>
                                <p> (No HTML markup is needed)</p>
                                <p> <strong>Inline:</strong></p>
                                <pre class="brush: html;">
&lt;div id="pbTargetZone">&lt;/div>
</pre>
                                <p> <strong>The following attributes are handled automatically by the Progress Bar Module:</strong></p>
                                <ul>
                                    <li> <code>value</code></li>
                                    <li> <code>aria-valuetext</code></li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
var myProgressBar = $A.setProgressBar({
// Configure functionality using a key / value map
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter configures Progress Bar functionality using a key / value map.</p>
                                        <p> <strong>Example:</strong></p>

                                        <pre class="brush: js;">
{

// Set a unique ID, which will also be the ID attribute value for the 'progress' element when rendered
id: 'progressbar1',

// Set the boundary text for screen reader users
role: 'Download',

// Set initial values for the progress bar, values may be of type Int or Float
config: {
value: 0,
max: 100
},

// Specify the container element where the Progress Bar AccDC Object will be inserted
// (Only if pointing to the ID of a target zone container element, remove otherwise)
isStatic: '#pbTargetZone',

// Specify the container element where the unobtrusive Progress Bar AccDC Object will be inserted
// (Only if no target zone container tag is present, remove otherwise)
isStatic: 'body',
// Also, prepend the progress bar content to the content already contained within the body element
// This also places it at the top of the page for screen reader users
prepend: true,

// Set the class name for the top level container Div that surrounds the 'progress' element
className: 'progressBar',

// Load the Progress Polyfill script after the progress bar is rendered for cross-browser compatibility
// (The accompanying CSS file must also be included in the header of the page)
runJSAfter: ['js/progress-polyfill.min.js'],

// Run script after the progress bar finishes rendering
runAfter: function(dc){
// Optionally do something
// dc.source is the DOM node for the rendered 'progress' element
},

// Run script after the progress bar finishes closing
runAfterClose: function(dc){
// Optionally do something
}

// Other AccDC API properties and methods can be applied here as well if desired

}
</pre>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> The function <code>"$A.setProgressBar"</code> returns the instantiated AccDC Object for the progress bar, which can then be controlled as follows:</p>
                                <pre class="brush: js;">
// Render the Progress Bar
myProgressBar.open();

// Update the Progress Bar with a new value
myProgressBar.set(50);

// Then close the Progress Bar after the process has completed
myProgressBar.close();
</pre>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample Progress Bars in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what they look like.</p>
                                <p> Instructions for changing the visual appearance of the <code>'progress'</code> element are discussed in the
                                    article <a href="http://www.useragentman.com/blog/2012/01/03/cross-browser-html5-progress-bars-in-depth/" target="_blank">"Cross Browser HTML5 Progress Bars In Depth"</a>.</p>
                                <div class="hd">
                                    <h4><span> Implementation Notes</span></h4>
                                </div>
                                <p> To ensure proper rendering across various browsers, the Progress Bar Module requires the following dependencies:</p>
                                <ul>
                                    <li><a href="https://github.com/LeaVerou/HTML5-Progress-polyfill" target="_blank"> The Progress Polyfill by Lea Verou</a></li>
                                </ul>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" >
                                <button id="scrollable-divs">Scrollable Divs</button>
                            </h3>
                            <div class="content hdn">
                                <p> A Scrollable Div is a very simple control type, which can easily be made accessible.</p>
                                <p> <strong>Expected behaviors:</strong> Ensure that the scrollable container element receives keyboard focus, and ensure that the
                                    Up/Down/Left/Right arrow keys and the PageUp/PageDown and the Home/End keys scroll content appropriately.</p>
                                <p> The Scrollable Div Module automates these processes by making the scrollable container keyboard accessible.</p>
                                <ul>
                                    <li> Basic Scrollable Div control:
                                        <br />
                                        <a target="ca" href="Coding Arena/Scrollable Divs/Scrollable Div (Internal Content)/demo.htm"> Coding Arena/Scrollable Divs/Scrollable Div (Internal Content)/demo.htm</a>
                                    </li>
                                    <li> Basic Popup Scrollable Div control with offscreen boundary text, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Scrollable Divs/Scrollable Div Popup (External Content)/demo.htm"> Coding Arena/Scrollable Divs/Scrollable Div Popup (External Content)/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <pre class="brush: html;">
&lt;div id="scrollableDivId">
&lt;div>
Scrollable content goes here.
&lt;/div>
&lt;/div>
</pre>
                                <p> <strong>The following attributes are handled automatically by the Scrollable Div Module:</strong></p>
                                <ul>
                                    <li> <code>tabindex</code></li>
                                </ul>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
$A.makeScrollable(scrollableDivDOM_Node, 'textMessageForScreenReaderUsers');
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter is the DOM node of the scrollable div container (with <code>'overflow:auto'</code> in the CSS).</p>
                                    </li>
                                    <li>
                                        <p> The second parameter is the text string that will be announced to screen reader users the first time that focus moves into the Scrollable Div.
                                            (This message alerts VoiceOver users that the region is scrollable.)
                                            <code>Scrollable Region</code> is set by default if no value is specified.</p>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample Scrollable Divs in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what they look like.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision users, and a focus outline
                                    clearly shows which elements have focus, and your newly styled Scrollable Div will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Bootstrapping</span></h4>
                                </div>
                                <p> Bootstrapping is designed to handle common control types that span multiple pages with similar setup configurations.</p>
                                <p> The Scrollable Divs within the Bootstrap folders are configured using HTML5 <code>"data-"</code> attributes within the HTML markup.</p>
                                <p> When the Bootstrap Module (<em>"accdc_bootstrap.js"</em>) is executed, it parses the newly loaded DOM, recognizes the class <code>"accScrollable"</code>,
                                    then configures the same module declaration as previously described using these HTML5 attributes.</p>
                                <p> Additional HTML5 attributes can be added to enhance functionality by editing the file <em>"accdc_bootstrap.js"</em>.</p>
                                <p> <strong>Required attributes:</strong></p>
                                <ul>
                                    <li> <strong>class="accScrollable" :</strong> The bootstrap class name that specifies an accessible Scrollable Div. </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> Implementation Notes</span></h4>
                                </div>
                                <p> Do not use <code>aria-haspopup</code>.</p>
                                <p> It might sound like a good idea to notify screen reader users that a 'popup' is attached by adding the attribute <code>aria-haspopup="true"</code> to the triggering element (if applicable),
                                    but this is not a good idea.</p>
                                <p> Screen readers announce different feedback based on the various combinations of element types and ARIA roles in the markup, which can lead to confusion and misrepresent the purpose of the feature altogether.</p>
                                <p> <strong>Examples:</strong></p>
                                <pre class="brush: html;">
&lt;!-- Triggering Element One
JAWS 13 and 14 announces as "Has Popup"
NVDA2013 announces as "SubMenu"
-->

&lt;a href="#" aria-haspopup="true"> Triggering Element One &lt;/a>

&lt;!-- Triggering Element Two
JAWS 13 and 14 announces as "Menu"
NVDA2013 announces as "Menu Button SubMenu"
-->

&lt;a href="#" role="button" aria-haspopup="true"> Triggering Element Two &lt;/a>

&lt;!-- Triggering Element Three
JAWS 13 and 14 announces as "Menu"
NVDA2013 announces as "Menu Button SubMenu"
-->

&lt;button aria-haspopup="true"> Triggering Element Three &lt;/button>
</pre>
                                <p> In short, don't use <code>aria-haspopup</code> unless you are triggering a menu.</p>
                                <p> Additionally, no ARIA attributes are necessary to make a Scrollable Div accessible for screen reader users.</p>
                                <p> <strong>VoiceOver instructions for use on iOS touch screen devices:</strong></p>
                                <p> To navigate the content of a Scrollable Div using VoiceOver, use the Rotator (turn three fingers like turning a knob) to select Line Mode, then use one finger to swipe up and down within the scrollable content to navigate.</p>
                                <p><em>Credit goes to David Hilbert Poehlman for providing VoiceOver rotator navigation technique instructions.</em></p>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" >
                                <button id="tooltips">Tooltips</button>
                            </h3>
                            <div class="content hdn">
                                <p> A Tooltip is a relatively simple control type, which can easily be made accessible.</p>
                                <p> <strong>Expected behaviors:</strong> Ensure that the beginning and ending boundaries are conveyed to screen reader users, and make sure the Tooltip is accessible from the keyboard.</p>
                                <p> The Tooltip Module automates these processes by instantiating the content as a Tooltip AccDC Object, which can be configured and controlled programmatically if desired to enhance functionality.</p>
                                <ul>
                                    <li> Simple Tooltip control with a named region, <code>role=tooltip</code>, and <code>aria-describedby</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Tooltips/Tooltip (Internal Content)/demo.htm"> Coding Arena/Tooltips/Tooltip (Internal Content)/demo.htm</a>
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> HTML Syntax</span></h4>
                                </div>
                                <p> <strong>For the triggering element:</strong></p>
                                <pre class="brush: html;">
&lt;a href="#" id="tooltipTrigger1"> Triggering Element &lt;/a>
</pre>
                                <p> <strong>Or</strong></p>
                                <pre class="brush: html;">
&lt;input type="..." id="tooltipTrigger2" title="Field name if no Label tag is associated" />
</pre>
                                <p> <strong>Or</strong></p>
                                <pre class="brush: html;">
&lt;select id="tooltipTrigger3" title="Field name if no Label tag is associated">
&lt;option value="0"> Option One &lt;/option>
&lt;option value="1"> Option Two &lt;/option>
&lt;/select>
</pre>
                                <p> <strong>For the tooltip container element:</strong></p>
                                <pre class="brush: html;">
&lt;div id="tooltipContainerId">
Tooltip content goes here.
&lt;/div>
</pre>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
var tooltipId = $A.setTooltip({
// Configure functionality key / value mappings
});
</pre>
                                <div class="hd">
                                    <h4><span> Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter configures tooltip functionality using a key / value map.</p>

                                        <p> <strong>Example:</strong></p>
                                        <pre class="brush: js;">
{

// Set a unique ID for the Tooltip AccDC Object, which can be referenced through $A.reg['uniqueId']
id: 'uniqueId',

// Set the role name for the container
role: 'tooltip',

// Set the triggering element using a DOM node or a CSS Selector
trigger: '#tooltipTrigger1',

// Set an optional time delay in milliseconds
wait: 1500,

// Specify that literal content is to be rendered
// (Only if pulling content from within the same page, remove otherwise)
mode: 0,

// Use removeChild to grab the desired Tooltip content from within the document
// This is important to prevent ID attribute conflicts later
// (Only if pulling content from within the same page, remove otherwise)
source: $A.getEl('tooltipContainerId').parentNode.removeChild($A.getEl('tooltipContainerId')),

// Set a file path to pull the Tooltip content from and reference the container element ID
// (Only if pulling content from an external page, remove otherwise)
source: 'files/tooltip.html #tooltipContainerId',

// Position the Tooltip on the right of the triggering element
autoPosition: 3,

// Move the Tooltip AccDC Object 10px to the right when opened
offsetLeft: 10,

// Set the class name for the top level container element
className: 'tooltip'

// (Other AccDC API properties and methods can be declared here also to customize functionality and behavior)

}
</pre>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> Every tooltip is registered as an AccDC Object, the ID of which is returned by the JavaScript invocation statement.</p>
                                <p> This means that you can programmatically control each tooltip using JavaScript.</p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: js;">
// Get a reference to the Tooltip AccDC Object using the ID  stored in the tooltipId variable
var dc = $A.reg[tooltipId];

// Now change the content of the tooltip
dc.source = 'Hello World';

// All other AccDC API properties and methods can be applied here as well.
</pre>
                                <div class="hd">
                                    <h4><span> Styling</span></h4>
                                </div>
                                <p> The sample tooltips in the Coding Arena are styled to look a certain way for the demo, but it doesn't actually matter what they look like.</p>
                                <p> When applying new styles, simply ensure that sufficient color contrast is observed for low vision
                                    users, and a focus outline clearly shows which elements have focus, and your newly styled tooltip will be accessible.</p>
                                <div class="hd">
                                    <h4><span> Bootstrapping</span></h4>
                                </div>
                                <p> Bootstrapping is designed to handle common control types that span multiple pages with similar setup configurations.</p>
                                <p> The tooltips within the Bootstrap folders are configured using HTML5 <code>"data-"</code> attributes within the HTML markup.</p>
                                <p> When the Bootstrap Module (<em>"accdc_bootstrap.js"</em>) is executed, it parses the newly loaded DOM,
                                    recognizes the class <code>"accTooltip"</code>, then configures the same module declaration as previously described using these HTML5 attributes.</p>
                                <p> <strong>Available HTML5 attributes:</strong></p>
                                <ul>
                                    <li> <strong>data-src :</strong> The resource path and pointer to the ID attribute of the tooltip container element.
                                        If set, <code>data-internal</code> should be blank or not included.</li>
                                    <li> <strong>data-internal :</strong> The ID attribute of the tooltip container element within the same document.
                                        If <code>data-internal</code> is set, <code>data-src</code> should be blank or not included. </li>
                                    <li> <strong>data-role :</strong> The role name that is conveyed to screen reader users as beginning and ending boundary text for the new content.
                                        <code>"Tooltip"</code> is set by default if no value is specified. </li>
                                    <li> <strong>data-autoposition :</strong> The <code>autoPosition</code> override, which dynamically positions the new content relative to the triggering
                                        element. This reflects the autoPosition property documented within AccDC, and may be a value between 0 and 12.
                                        The default is 3 if left blank or not included. </li>
                                    <li> <strong>data-offsetleft :</strong> The offsetLeft override, which dynamically positions the new content relative to the triggering
                                        element. The default is 10 if left blank or not included. </li>
                                    <li> <strong>data-offsettop :</strong> The offsetTop override, which dynamically positions the new content relative to the triggering
                                        element. The default is 0 if left blank or not included. </li>
                                </ul>
                                <p> Additional HTML5 attributes can be added to enhance functionality by editing the file <em>"accdc_bootstrap.js"</em>.</p>
                                <p> <strong>Required attributes:</strong></p>
                                <ul>
                                    <li> <strong>class="accTooltip" :</strong> The bootstrap class name that specifies an accessible tooltip. </li>
                                    <li> <strong>id :</strong> The unique ID of the element. This value is also registered as the ID of the Tooltip AccDC Object,
                                        making it possible to invoke the object programmatically.
                                        <br />
                                        E.G $A.reg.uniqueID.open();
                                        <br />
                                        // All other AccDC API properties and methods are similarly available.
                                    </li>
                                </ul>
                                <div class="hd">
                                    <h4><span> Implementation Notes</span></h4>
                                </div>
                                <p> When an A tag is used as the triggering element, it must adhere to the following:</p>
                                <ol>
                                    <li> If the element contains no link text and no Img element, then the link should include an informative <code>Title</code> attribute. (This is only valid if there is no link text at all)</li>
                                    <li> If the element contains an Img tag and no link text, then the Img tag should include an informative <code>Alt</code> attribute and <code>Title</code> attribute, both of which should match.</li>
                                    <li> The A tag must include an <code>href</code> attribute, to ensure keyboard accessibility.</li>
                                </ol>
                                <p> Do not use <code>aria-haspopup</code>.</p>
                                <p> It might sound like a good idea to notify screen reader users that a 'Popup' is attached by adding the attribute <code>aria-haspopup="true"</code> to the triggering element,
                                    but this is not a good idea.</p>
                                <p> Screen readers announce different feedback based on the various combinations of element types and ARIA roles in the markup, which can lead to confusion and misrepresent the purpose of the feature altogether.</p>
                                <p> <strong>Examples:</strong></p>
                                <pre class="brush: html;">
&lt;!-- Triggering Element One
JAWS 13 and 14 announces as "Has Popup"
NVDA2013 announces as "SubMenu"
-->

&lt;a href="#" aria-haspopup="true"> Triggering Element One &lt;/a>

&lt;!-- Triggering Element Two
JAWS 13 and 14 announces as "Menu"
NVDA2013 announces as "Menu Button SubMenu"
-->

&lt;a href="#" role="button" aria-haspopup="true"> Triggering Element Two &lt;/a>

&lt;!-- Triggering Element Three
JAWS 13 and 14 announces as "Menu"
NVDA2013 announces as "Menu Button SubMenu"
-->

&lt;button aria-haspopup="true"> Triggering Element Three &lt;/button>
</pre>
                                <p> In short, don't use <code>aria-haspopup</code> unless you are triggering a menu.</p>
                            </div>
                        </div>


                        <div class="panel">
                            <h3 class="control" >
                                <button id="web-chat">Web Chat</button>
                            </h3>
                            <div class="content hdn">
                                <p> The concept of Web Chat seems complicated, but it's actually quite easy to make accessible for screen reader and keyboard only users.</p>
                                <ul>
                                    <li> Simple Web Chat control with offscreen boundary text, <code>role=application</code>, and <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Web Chat and Dynamic Message Announcement/Web Chat (Static)/demo.htm"> Coding Arena/Web Chat and Dynamic Message Announcement/Web Chat (Static)/demo.htm</a>
                                    </li>
                                    <li> Simple Checkbox controls with <code>aria-live=polite</code>:
                                        <br />
                                        <a target="ca" href="Coding Arena/Web Chat and Dynamic Message Announcement/Dynamic Message Announcement/demo.htm"> Coding Arena/Web Chat and Dynamic Message Announcement/Dynamic Message Announcement/demo.htm</a>
                                    </li>
                                </ul>
                                <p> This may not be readily apparent by reading the JavaScript code for the chat demo in the Coding Arena however, so I'll
                                    outline the concepts that make it accessible here, to simplify things.</p>
                                <ol>
                                    <li> When the chat popup loads in the DOM, the content is appended to the 'BODY' element, so that it appears at the
                                        bottom of the page for screen reader users. This is important, because as new messages are received, the
                                        Virtual Buffer line numbers within the body content won't change. This is often what causes focus reading issues
                                        when trying to navigate within body content if nodes higher up in the DOM tree continually update themselves, which quickly becomes an accessibility issue.</li>
                                    <li> After the chat popup is rendered, focus is automatically moved into the message field. To aid with this,
                                        the surrounding DIV tag for the message field, includes the ARIA attribute <code>role="application"</code>. This forces JAWS 14
                                        to automatically enter Applications Mode when the field receives focus in both IE and Firefox.</li>
                                    <li> The message field consists of a Textarea element. This is important, since this allows screen reader users to
                                        press <kbd>Enter</kbd> to submit new messages without automatically exiting Forms Mode, which would occur if an Input element was used instead.</li>
                                    <li> The scrollable chat window is keyboard accessible, so that keyboard only users can simply <kbd><kbd>Shift</kbd>+<kbd>Tab</kbd></kbd> into the
                                        message field and use the Up/Down arrow keys and the PageUp/PageDown/Home/End keys to read through previously posted messages.</li>
                                    <li> The Close icon is keyboard accessible, and pressing Escape will alternately close the Chat Popup.</li>
                                    <li>
                                        <p> Now, here is where the magic is for screen reader users. Whenever new messages arrive, they are automatically
                                            announced. This is accomplished using the <code>$A.announce()</code> method, which automatically queues incoming messages using
                                            Unobtrusive Announcement to prevent speech interruption. It also can be set to ignore repetitive messages by passing
                                            true as the second parameter.</p>
                                        <p> <strong>Example:</strong></p>
                                        <pre class="brush: js;">
$A.announce(LastMSG-DOM-Node, true);
</pre>
                                    </li>
                                </ol>
                                <p> The <code>$A.announce()</code> method is also prototyped to the String object, so it can be invoked by returning strings as well for storage if desired.</p>
                                <p> <strong>Example:</strong></p>
                                <pre class="brush: js;">
var msgHistory = [],
msgTextString = 'Howdy!';

msgHistory.push( msgTextString.announce() );
</pre>
                                <p> Which will both store the string contained in the variable <code>msgTextString</code> and announce it to screen reader users at the same time.</p>
                                <p> When a chat dialog is closed, the following method may be invoked:</p>
                                <pre class="brush: js;">
String.announce.clear();
</pre>
                                <p> This will clear the queue so that message announcement does not continue to occur after the chat dialog is closed.</p>
                                <div class="hd">
                                    <h4><span> Announce Method Details</span></h4>
                                </div>
                                <p> The AccDC Announce method has been tested successfully using JAWS 11-14, NVDA, and VoiceOver, in Internet Explorer 8-9, Firefox, Chrome, and Safari with applicable screen readers.</p>
                                <div class="hd">
                                    <h4><span> JavaScript</span></h4>
                                </div>
                                <pre class="brush: js;">
$A.announce( StringOrDOMNode , SuppressRepeat?&lt;true/false> , isAggressive?&lt;true/false> );
</pre>
                                <p> Or</p>
                                <pre class="brush: js;">
var myString = anotherString.announce();
</pre>
                                <div class="hd">
                                    <h4><span> $A.announce() Parameters</span></h4>
                                </div>
                                <ol>
                                    <li>
                                        <p> The first parameter is a DOM node or text string to be announced.
                                            (Repetitive messages will automatically be queued for announcement.)</p>
                                    </li>
                                    <li>
                                        <p> The second parameter is a Boolean value that specifies whether the announcement of repeat message text is automatically suppressed.
                                            If set to true, repetitive text will not be announced to screen reader users.
                                            False is set by default if no value is specified.
                                        </p>
                                    </li>
                                    <li>
                                        <p> The third parameter is a Boolean value that specifies whether aggressive announcement will be used to announce text.
                                            If set to true, prior speech output will be interrupted and the latest text message will be forcibly announced. This will occur regardless which window currently has focus, and is not desirable in most cases.
                                            False is set by default if no value is specified.
                                        </p>
                                    </li>
                                </ol>
                                <div class="hd">
                                    <h4><span> Programmatic Control</span></h4>
                                </div>
                                <p> <strong>Manually clear the message queue</strong></p>
                                <pre class="brush: js;">
String.announce.clear();
</pre>
                                <p> <strong>Access the last message that was announced</strong></p>
                                <pre class="brush: js;">
var last = String.announce.lastMsg;
</pre>
                                <p> <strong>Adjust the initial delay in milliseconds</strong> when the <code>$A.announce()</code> method queues messages to be announced sequentially</p>
                                <pre class="brush: js;">
String.announce.baseDelay = 2000;
</pre>
                                <p> <strong>Adjust the delay in milliseconds</strong> when a message using <code>$A.announce()</code> contains two or more words including punctuation.</p>
                                <pre class="brush: js;">
String.announce.charMultiplier = 160;
</pre>
                                <div class="hd">
                                    <h4><span> Implementation Notes</span></h4>
                                </div>
                                <p> <strong>Important:</strong> Unobtrusive Announcement should only be used sparingly, and not for everything.</p>
                                <p> When too many things are announced on the same page, it is difficult for screen reader users to differentiate between
                                    what is being announced, and what is being navigated using the arrow keys. This is because the same voice is used for both, with no distinction.</p>
                            </div>
                        </div>
                    </div>

                    <div id="hd3" class="hd" tabindex="-1">
                        <h2><span id="h-3">ARIA Warnings</span></h2>
                    </div>
                    <div class="expand-collapse">
                        <p><button aria-labelledby="h-3 col-3-lbl" id="col-3"><span id="col-3-lbl">Collapse All</span></button>
                            <button aria-labelledby="h-3 exp-3-lbl" id="exp-3"><span id="exp-3-lbl">Expand All</span></button></p>
                    </div>
                    <div class="ARIA">
                        <div class="panel">
                            <h3 class="control">
                                <button id="tgl-3-2">Improper Use of ARIA</button></h3>
                            <div class="content hdn">
                                <p> Even though ARIA stands for Accessible Rich Internet Applications, the improper use of ARIA will actually cause accessibility issues for screen reader users.</p>
                                <p> <strong>Important things to be aware of:</strong></p>
                                <ul>
                                    <li> Strict care and comprehensive screen reader testing must always be applied whenever implementing ARIA within HTML markup.</li>
                                    <li> Don't ever assume, just because it's documented in the ARIA specification, that it will be accessible.</li>
                                    <li> If the component or feature is not accessible to screen reader users, it is not accessible, no matter what the specification says.</li>
                                    <li> Adherence to the ARIA specification cannot be used as an excuse for components and features that are not accessible to screen reader users.</li>
                                </ul>
                                <h5> Improper use of ARIA examples</h5>
                                <p> <strong>Example 1: Phantom form fields</strong></p>
                                <pre class="brush: html;">
&lt;form>
&lt;div id="lgnd">
Contact Details
&lt;/div>
&lt;div role="textbox" aria-label="Your full name" aria-required="true" aria-describedby="lgnd">
&lt;input type="text" name="full_name" />
&lt;/div>
&lt;div role="textbox" aria-label="Your email address" aria-required="true" aria-describedby="lgnd">
&lt;input type="text" name="email_address" />
&lt;/div>
&lt;/form>
</pre>
                                <p> Since the use of <code>role="textbox"</code> is used to surround a native form field, JAWS sees two form fields when using
                                    the Arrow keys to navigate up and down the page, causing confusion for screen reader users.</p>
                                <p> Similarly, since all supporting attributes such as <code>aria-label</code>, <code>aria-describedby</code>, and <code>aria-required</code> are applied
                                    to the wrong elements, they are not accessible as a result.</p>
                                <p> <strong>Example 2: Unreadable content</strong></p>
                                <pre class="brush: html;">
&lt;table role="tree">
&lt;tr role="treeitem">
&lt;td>
Name:
&lt;/td>
&lt;td>
Bryan Garaventa
&lt;/td>
&lt;/tr>
&lt;tr role="treeitem">
&lt;td>
Title:
&lt;/td>
&lt;td>
Bryan Garaventa - Resume
&lt;/td>
&lt;/tr>
&lt;tr role="treeitem">
&lt;td>
File Type:
&lt;/td>
&lt;td>
PDF
&lt;/td>
&lt;/tr>
&lt;/table>
</pre>
                                <p> The use of <code>role="tree"</code> and <code>role="treeitem"</code> on this table, literally makes it impossible to read the table content using JAWS.</p>
                                <p> <strong>Example 3: Mixing roles</strong></p>
                                <pre class="brush: html;">
&lt;div role="tablist">
&lt;div role="tab">
&lt;h2>
&lt;a href="#"> Link One &lt;/a>
&lt;/h2>
&lt;/div>
&lt;div role="tab">
&lt;h2>
&lt;a href="#"> Link Two &lt;/a>
&lt;/h2>
&lt;/div>
&lt;div role="tab">
&lt;h2>
&lt;a href="#"> Link Three &lt;/a>
&lt;/h2>
&lt;/div>
&lt;/div>
</pre>
                                <p> Since screen readers convey certain role types (such as Tabs) as form controls, the nesting of additional active elements confuses screen reader output.</p>
                                <p> <strong>Example 4: Confusing feedback</strong></p>
                                <pre class="brush: html;">
&lt;textarea title="Status" aria-haspopup="true">&lt;/textarea>

&lt;textarea title="Comment" aria-expanded="true">&lt;/textarea>
</pre>
                                <p> In the case of <code>aria-haspopup</code> on the edit field, only "Has Popup" is announced by JAWS, which is confusing. "Has Popup" does
                                    not convey what the purpose of the popup is, nor does it indicate how to invoke it. NVDA announces "Edit SubMenu", which is even more confusing.</p>
                                <p> In the case of <code>aria-expanded</code> on the edit field, "Edit Expanded" is announced by screen readers, which is superfluous.
                                    The content of all edit fields, even when scrolled off screen visually, is always visible to screen reader users, so announcing
                                    expanded means nothing to screen reader users.</p>
                                <p>Care must be taken with incorrect assumptions, such as the assumption that applying aria-disabled="true" to an element will remove it from the focus order or that doing so will prevent JavaScript events such as onFocus or onClick from firing on that element. These are incorrect assumptions, because ARIA does not change the behavior in the browser, only what type of information is conveyed to assistive technologies.</p>
                                <p>Also great care must be taken when applying global attributes, such as aria-hidden. The aria-hidden attribute when set to 'true' will hide that element and all child elements from assistive technology users, regardless that the content is still visible. Moreover, if the container also includes focusable elements, these will remain in the tab order regardless. When aria-hidden is set to "false", even on an element that is hidden using the HTML5 'hidden' attribute or CSS display:none, it will be exposed to assistive technology users regardless, which can be extremely problematic if misapplied on elements that are meant to be hidden from all users.</p>
                                <p>For a comprehensive guide of how ARIA works from beginning to end, please read the <a href="http://whatsock.com/training">Accessibility Tree Training Guide</a>.</p>
                                <p>Also, use the <a href="http://whatsock.com/training/matrices/visual-aria.htm">Visual ARIA Bookmarklet</a> to examine ARIA usage within live web technologies to better understand which ARIA attributes are present and when they are being applied incorrectly.</p>
                                <h5> Conclusion</h5>
                                <p> Whenever ARIA is applied, it must be thoroughly tested using JAWS in Internet Explorer and using NVDA in Firefox. These are
                                    the two most widely used Windows based screen readers in the world. JAWS is hard coded to work best in Internet Explorer, and NVDA is hard coded to work best in Firefox.</p>
                                <p> If mobile support is needed, VoiceOver on iOS devices is the most widely used screen reader that should be used for testing.
                                    TalkBack on the Android is the second most widely used.</p>
                                <p> <strong>Important:</strong> Even when ARIA is implemented correctly and precisely according to the specification, if adding certain ARIA
                                    attributes causes accessibility issues for screen reader users to occur, then they should not be used.</p>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control"><button id="tgl-3-3">aria-haspopup</button></h3>
                            <div class="content hdn">
                                <p> The attribute <code>aria-haspopup</code> should only be used on triggering elements that open menus. Otherwise, the presence of the attribute will
                                    only misrepresent the popup type to screen reader users.</p>
                                <p> <strong>Examples:</strong></p>
                                <pre class="brush: html;">
&lt;!-- Triggering Element One
JAWS 13 and 14 announces as "Has Popup"
NVDA2013 announces as "SubMenu"
-->

&lt;a href="#" aria-haspopup="true"> Triggering Element One &lt;/a>

&lt;!-- Triggering Element Two
JAWS 13 and 14 announces as "Menu"
NVDA2013 announces as "Menu Button SubMenu"
-->

&lt;a href="#" role="button" aria-haspopup="true"> Triggering Element Two &lt;/a>

&lt;!-- Triggering Element Three
JAWS 13 and 14 announces as "Menu"
NVDA2013 announces as "Menu Button SubMenu"
-->

&lt;button aria-haspopup="true"> Triggering Element Three &lt;/button>
</pre>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control"><button id="tgl-3-4">role="presentation"</button></h3>
                            <div class="content hdn">
                                <p> The attribute <code>role="presentation"</code> should only be used in very limited circumstances, and only when it is desirable to suppress the role of an element for screen reader users.</p>
                                <p> Many element types have particular roles that are automatically conveyed to screen reader users.</p>
                                <p> Examples include headings, links, buttons, images, lists, frames, tables, form fields, and many others. All of which have specific
                                    relevance for screen reader users, who depend on the identification of these roles to navigate reliably within web pages.</p>
                                <p> When <code>role="presentation"</code> is added to the markup of such an element, it manually overrides this role mapping in the browser,
                                    and prevents the screen reader from identifying or even interacting with the element in the expected manner.</p>
                                <p> <strong>Example 1: Headings</strong></p>
                                <pre class="brush: html;">
&lt;h2 role="presentation"> Key Section Heading &lt;/h2>
</pre>
                                <p> It is now impossible for screen reader users to navigate to the heading using the <kbd>H</kbd> and <kbd><kbd>Shift</kbd>+<kbd>H</kbd></kbd> key commands, nor is the text
                                    identified as a heading while browsing down the page using the arrow keys.</p>
                                <p> <strong>Example 2: Links and Buttons</strong></p>
                                <pre class="brush: html;">
&lt;a href="#" role="presentation"> Triggering Element &lt;/a>

&lt;button role="presentation"> Triggering Element &lt;/button>
</pre>
                                <p> It is now impossible for screen reader users to identify these elements as actionable elements during navigation.</p>
                                <p> <strong>Example 3: Tables</strong></p>
                                <pre class="brush: html;">
&lt;table role="presentation">
&lt;tr>
&lt;th scope="col">
Product
&lt;/th>
&lt;th scope="col">
Quantity
&lt;/th>
&lt;/tr>
&lt;tr>
&lt;td>
Doorknob
&lt;/td>
&lt;td>
2000
&lt;/td>
&lt;/tr>
&lt;/table>
</pre>
                                <p> It is now impossible for screen reader users to navigate the data table using table navigation commands.</p>
                                <p> Whenever <code>role="presentation"</code> is added to HTML markup, it must always be tested using JAWS, NVDA, and VoiceOver
                                    (if applicable) to ensure that the element type remains accessible for screen reader users.</p>
                            </div>
                        </div>
                    </div>


                    <div id="hd4" class="hd" tabindex="-1">
                        <h2><span id="h-4">Event Model Differences</span></h2>
                    </div>
                    <div class="expand-collapse">
                        <p><button aria-labelledby="h-4 col-4-lbl" id="col-4"><span id="col-4-lbl"> Collapse All</span></button>
                            <button aria-labelledby="h-4 exp-4-lbl" id="exp-4"><span id="exp-4-lbl"> Expand All</span></button></p>
                    </div>
                    <div class="Events">
                        <div class="panel">
                            <h3 class="control"><button id="tgl-4-1">onFocus</button></h3>
                            <div class="content hdn">
                                <p> When JAWS interacts with the Virtual Buffer, making it possible for screen reader users to navigate from the top of the page
                                    to the bottom using the <kbd class="down">Down</kbd> arrow key, it will not automatically trigger the onFocus handler.</p>
                                <p> When you do the same using NVDA however, it will automatically trigger the <code>onFocus</code> handler.</p>
                                <p> This means that, any elements that cause specific actions to occur, such as simulated Tab controls, simulated Radio Button
                                    controls, or any other control type that uses onFocus to invoke selection, will automatically be triggered by NVDA in both IE and
                                    Firefox when using the arrow keys to navigate page content.</p>
                                <p> <strong>Example 1: Tabs</strong></p>
                                <pre class="brush: html;">
&lt;div role="tablist">
&lt;div role="tab" tabindex="0" onfocus="alert('Switch content 1');"> Label One &lt;/div>
&lt;div role="tab" tabindex="-1" onfocus="alert('Switch content 2');"> Label Two &lt;/div>
&lt;div role="tab" tabindex="-1" onfocus="alert('Switch content 3');"> Label Three &lt;/div>
&lt;/div>
</pre>
                                <p> In JAWS, you can use the arrow keys to navigate between tabs and press <kbd>Enter</kbd> on the announced tab to activate it.</p>
                                <p> In NVDA however, using the arrow keys to announce each tab will automatically activate it.</p>
                                <p> <strong>Example 2: Implied form field labels</strong></p>
                                <pre class="brush: html;">
&lt;input type="text" value="Street Address 1" onfocus="this.value=''" />&lt;br />
&lt;input type="text" value="Street Address 2" onfocus="this.value=''" />&lt;br />
&lt;input type="text" value="City" onfocus="this.value=''" />&lt;br />
&lt;input type="text" value="State" onfocus="this.value=''" />
</pre>
                                <p> In JAWS, setting focus to the Input field will cause the value to be cleared.</p>
                                <p> In NVDA however, using the arrow keys to navigate down the page will cause the form fields to be cleared.</p>
                                <p> <strong>Important: </strong>This method of form field labeling should never be used.</p>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control"><button id="tgl-4-2">onClick vs onKeypress</button></h3>
                            <div class="content hdn">
                                <p> The events that are triggered for certain elements depend on the type of element that is being activated.</p>
                                <p> For example, adding an <code>onClick</code> handler to a natively active element such as an A tag with an <code>href</code> attribute,
                                    or a BUTTON element, will be accessible for both mouse and keyboard users, regardless whether a screen reader is running or not.</p>
                                <p> However, if you do the same for a natively non-active element, such as a DIV or SPAN tag, it will not be
                                    accessible from the keyboard without a screen reader running.</p>
                                <p> <strong>Example 1: Standard link</strong></p>
                                <pre class="brush: html;">
&lt;a href="#" onclick="alert('Clicked');" > Triggering Element &lt;/a>
</pre>
                                <p> This link is actionable from the keyboard with or without a screen reader running, and can be activated using the mouse.</p>
                                <p> <strong>Example 2: Simulated link with no onKeypress</strong></p>
                                <pre class="brush: html;">
&lt;span role="link" tabindex="0" onclick="alert('Clicked');" > Triggering Element &lt;/span>
</pre>
                                <p> This simulated link is actionable from the mouse, and for screen reader users in Virtual Buffer Mode.
                                    However, it is not actionable for keyboard only users that have no screen reader running, nor is it actionable for screen reader users in Applications Mode.</p>
                                <p> <strong>Example 3: Simulated link with both onClick and onKeypress</strong></p>
                                <pre class="brush: html;">
&lt;span role="link" tabindex="0" onkeypress="kpHandler(this, event);"
onclick="alert('Clicked');" > Triggering Element &lt;/span>
&lt;script type="text/javascript">
function kpHandler(obj, ev){var k = ev.which || ev.keyCode; if (k == 13)alert('Pressed');}
&lt;/script>
</pre>
                                <p> This simulated link is actionable from the mouse and from the keyboard with or without a screen reader running.
                                    However, the <code>onKeypress</code> is only activated for screen reader users in Applications Mode, and for keyboard only users,
                                    and the <code>onClick</code> is only activated for mouse users, and for screen reader users in Virtual Buffer Mode.
                                </p>
                            </div>
                        </div>

                        <div class="panel">
                            <h3 class="control"><button id="tgl-4-3">Event Propagation</button></h3>
                            <div class="content hdn">
                                <p> Many accessibility issues arise when nesting active elements, which directly effects event propagation.</p>
                                <p> <strong>Example: Nested active elements</strong></p>
                                <pre class="brush: html;">
&lt;div role="link" tabindex="0" onkeypress="kpHandler(this, event);"
onclick="alert('DIV clicked');" >
&lt;img
alt="Triggering element"
src="icon.png"
onclick="alert('IMG clicked');"
/>
&lt;/div>
&lt;script type="text/javascript">
function kpHandler(obj, ev){var k = ev.which || ev.keyCode; if (k == 13)alert('DIV pressed');}
&lt;/script>
</pre>
                                <p> This simulated image link performs different actions depending on the action mode (mouse or keyboard), and also depending on the browse mode for screen reader users.</p>
                                <ul>
                                    <li> Mouse users will trigger the <code>onClick</code> for both the IMG and DIV, but not the <code>onKeypress</code>.</li>
                                    <li> Keyboard only users without a screen reader will trigger the DIV <code>onKeypress</code>, but neither of the <code>onClicks</code>.</li>
                                    <li> Screen reader users in Virtual Buffer Mode will trigger the <code>onClick</code> for both the IMG and DIV, but not the onKeypress.</li>
                                    <li> Screen reader users in Applications Mode will trigger the DIV <code>onKeypress</code>, but neither of the <code>onClicks</code>.</li>
                                </ul>
                                <p> It is, therefore, very important to ensure that nested active elements are not used to perform different actions.</p>
                            </div>
                        </div>

                    </div>
                </article>
            </main>

            <aside>
                <h2>Transversal content</h2>
                <section class="honors">
                    <h3>The "Above and Beyond Accessibility Award" <a href="http://thersa.org" target="_blank">
                            <img src="_doc_files/img/rsa_fellowship_logo.jpg" alt="Supported by the Royal Society of Arts" title="Supported by the Royal Society of Arts" /></a></h3>
                    <p>AccDC was awarded the <strong>"Above and Beyond Accessibility Award"</strong> from the United States Department of Labor,
                        and was presented at the Developing with Accessibility Event, hosted by the Federal Communications
                        Commission in Washington DC in 2012.</p>
                </section>
                <section class="at-guide">
                    <h3><a href="http://whatsock.com/training">The Accessibility Tree Guide</a></h3>
                    <p>A Training Guide, if you want to learn how to be totally
                        awesome. <a href="http://whatsock.com/training">Check it out!</a></p>
                </section>
            </aside>

        </div>

        <p class="topLink"><a href="#container"><img src="_doc_files/img/up.png" title="Back to Top" alt="Back to Top" /></a></p>

        <footer>
            <p class="copyright">&copy;<script type="text/javascript">
                    document.write(new Date().getFullYear());
                </script> WhatSock. All rights reserved.</p>
            <p>Visual design by <a href="http://gericci.me/">Angela Ricci</a>.</p>
        </footer>
    </div>
</body>

</html>